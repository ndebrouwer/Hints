


    async function exportSolidityVerifier(zKeyName, templates, logger) {

        const verificationKey = await zkeyExportVerificationKey(zKeyName);

        let template = templates[verificationKey.protocol];

        return ejs.render(template ,  verificationKey);
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var zkey = /*#__PURE__*/Object.freeze({
        __proto__: null,
        newZKey: newZKey,
        exportBellman: phase2exportMPCParams,
        importBellman: phase2importMPCParams,
        verifyFromR1cs: phase2verifyFromR1cs,
        verifyFromInit: phase2verifyFromInit,
        contribute: phase2contribute,
        beacon: beacon,
        exportJson: zkeyExportJson,
        bellmanContribute: bellmanContribute,
        exportVerificationKey: zkeyExportVerificationKey,
        exportSolidityVerifier: exportSolidityVerifier
    });

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */


    async function plonkSetup(r1csName, ptauName, zkeyName, logger) {

        await blake2bWasm.ready();

        const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdPTau, sectionsPTau);
        const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, "r1cs", 1);
        const r1cs = await readR1csHeader(fdR1cs, sectionsR1cs, false);

        const sG1 = curve.G1.F.n8*2;
        const G1 = curve.G1;
        const sG2 = curve.G2.F.n8*2;
        const Fr = curve.Fr;
        const n8r = curve.Fr.n8;

        if (logger) logger.info("Reading r1cs");
        let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);

        const plonkConstraints = new BigArray();
        const plonkAdditions = new BigArray();
        let plonkNVars = r1cs.nVars;

        const nPublic = r1cs.nOutputs + r1cs.nPubInputs;

        await processConstraints();

        const fdZKey = await createBinFile(zkeyName, "zkey", 1, 14, 1<<22, 1<<24);


        if (r1cs.prime != curve.r) {
            if (logger) logger.error("r1cs curve does not match powers of tau ceremony curve");
            return -1;
        }

        let cirPower = log2(plonkConstraints.length -1) +1;
        if (cirPower < 3) cirPower = 3;   // As the t polinomal is n+5 whe need at least a power of 4
        const domainSize = 2 ** cirPower;

        if (logger) logger.info("Plonk constraints: " + plonkConstraints.length);
        if (cirPower > power) {
            if (logger) logger.error(`circuit too big for this power of tau ceremony. ${plonkConstraints.length} > 2**${power}`);
            return -1;
        }

        if (!sectionsPTau[12]) {
            if (logger) logger.error("Powers of tau is not prepared.");
            return -1;
        }


        const LPoints = new BigBuffer(domainSize*sG1);
        const o = sectionsPTau[12][0].p + ((2 ** (cirPower)) -1)*sG1;
        await fdPTau.readToBuffer(LPoints, 0, domainSize*sG1, o);

        const [k1, k2] = getK1K2();

        const vk = {};


        await writeAdditions(3, "Additions");
        await writeWitnessMap(4, 0, "Amap");
        await writeWitnessMap(5, 1, "Bmap");
        await writeWitnessMap(6, 2, "Cmap");
        await writeQMap(7, 3, "Qm");
        await writeQMap(8, 4, "Ql");
        await writeQMap(9, 5, "Qr");
        await writeQMap(10, 6, "Qo");
        await writeQMap(11, 7, "Qc");
        await writeSigma(12, "sigma");
        await writeLs(13, "lagrange polynomials");

        // Write PTau points
        ////////////

        await startWriteSection(fdZKey, 14);
        const buffOut = new BigBuffer((domainSize+6)*sG1);
        await fdPTau.readToBuffer(buffOut, 0, (domainSize+6)*sG1, sectionsPTau[2][0].p);
        await fdZKey.write(buffOut);
        await endWriteSection(fdZKey);


        await writeHeaders();

        await fdZKey.close();
        await fdR1cs.close();
        await fdPTau.close();

        if (logger) logger.info("Setup Finished");

        return ;

        async function processConstraints() {

            let r1csPos = 0;

            function r1cs_readULE32() {
                const buff = sR1cs.slice(r1csPos, r1csPos+4);
                r1csPos += 4;
                const buffV = new DataView(buff.buffer);
                return buffV.getUint32(0, true);
            }

            function r1cs_readCoef() {
                const res = Fr.fromRprLE(sR1cs.slice(r1csPos, r1csPos+curve.Fr.n8));
                r1csPos += curve.Fr.n8;
                return res;
            }

            function r1cs_readCoefs() {
                const coefs = [];
                const res = {
                    k: curve.Fr.zero
                };
                const nA = r1cs_readULE32();
                for (let i=0; i<nA; i++) {
                    const s = r1cs_readULE32();
                    const coefp = r1cs_readCoef();

                    if (s==0) {
                        res.k = coefp;
                    } else {
                        coefs.push([s, coefp]);
                    }
                }

                const resCoef = reduceCoef(coefs);
                res.s = resCoef[0];
                res.coef = resCoef[1];
                return res;
            }

            function reduceCoef(coefs) {
                if (coefs.length == 0) {
                    return [0, curve.Fr.zero];
                }
                if (coefs.length == 1) {
                    return coefs[0];
                }
                const arr1 = coefs.slice(0, coefs.length >> 1);
                const arr2 = coefs.slice(coefs.length >> 1);
                const coef1 = reduceCoef(arr1);
                const coef2 = reduceCoef(arr2);

                const sl = coef1[0];
                const sr = coef2[0];
                const so = plonkNVars++;
                const qm = curve.Fr.zero;
                const ql = Fr.neg(coef1[1]);
                const qr = Fr.neg(coef2[1]);
                const qo = curve.Fr.one;
                const qc = curve.Fr.zero;

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);

                plonkAdditions.push([sl, sr, coef1[1], coef2[1]]);

                return [so, curve.Fr.one];
            }

            for (let s = 1; s <= nPublic ; s++) {
                const sl = s;
                const sr = 0;
                const so = 0;
                const qm = curve.Fr.zero;
                const ql = curve.Fr.one;
                const qr = curve.Fr.zero;
                const qo = curve.Fr.zero;
                const qc = curve.Fr.zero;

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);
            }

            for (let c=0; c<r1cs.nConstraints; c++) {
                if ((logger)&&(c%10000 == 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);
                const A = r1cs_readCoefs();
                const B = r1cs_readCoefs();
                const C = r1cs_readCoefs();

                const sl = A.s;
                const sr = B.s;
                const so = C.s;
                const qm = curve.Fr.mul(A.coef, B.coef);
                const ql = curve.Fr.mul(A.coef, B.k);
                const qr = curve.Fr.mul(A.k, B.coef);
                const qo = curve.Fr.neg(C.coef);
                const qc = curve.Fr.sub(curve.Fr.mul(A.k, B.k) , C.k);

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);
            }

        }

        async function writeWitnessMap(sectionNum, posConstraint, name) {
            await startWriteSection(fdZKey, sectionNum);
            for (let i=0; i<plonkConstraints.length; i++) {
                await fdZKey.writeULE32(plonkConstraints[i][posConstraint]);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeQMap(sectionNum, posConstraint, name) {
            let Q = new BigBuffer(domainSize*n8r);
            for (let i=0; i<plonkConstraints.length; i++) {
                Q.set(plonkConstraints[i][posConstraint], i*n8r);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);
            }
            await startWriteSection(fdZKey, sectionNum);
            await writeP4(Q);
            await endWriteSection(fdZKey);
            Q = await Fr.batchFromMontgomery(Q);
            vk[name]= await curve.G1.multiExpAffine(LPoints, Q, logger, "multiexp "+name);
        }

        async function writeP4(buff) {
            const q = await Fr.ifft(buff);
            const q4 = new BigBuffer(domainSize*n8r*4);
            q4.set(q, 0);
            const Q4 = await Fr.fft(q4);
            await fdZKey.write(q);
            await fdZKey.write(Q4);
        }

        async function writeAdditions(sectionNum, name) {
            await startWriteSection(fdZKey, sectionNum);
            const buffOut = new Uint8Array((2*4+2*n8r));
            const buffOutV = new DataView(buffOut.buffer);
            for (let i=0; i<plonkAdditions.length; i++) {
                const addition=plonkAdditions[i];
                let o=0;
                buffOutV.setUint32(o, addition[0], true); o+=4;
                buffOutV.setUint32(o, addition[1], true); o+=4;
                // The value is storen in  Montgomery. stored = v*R
                // so when montgomery multiplicated by the witness  it result = v*R*w/R = v*w 
                buffOut.set(addition[2], o); o+= n8r;
                buffOut.set(addition[3], o); o+= n8r;
                await fdZKey.write(buffOut);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkAdditions.length}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeSigma(sectionNum, name) {
            const sigma = new BigBuffer(n8r*domainSize*3);
            const lastAparence =  new BigArray(plonkNVars);
            const firstPos = new BigArray(plonkNVars);
            let w = Fr.one;
            for (let i=0; i<domainSize;i++) {
                if (i<plonkConstraints.length) {
                    buildSigma(plonkConstraints[i][0], i);
                    buildSigma(plonkConstraints[i][1], domainSize + i);
                    buildSigma(plonkConstraints[i][2], domainSize*2 + i);
                } else {
                    buildSigma(0, i);
                    buildSigma(0, domainSize + i);
                    buildSigma(0, domainSize*2 + i);
                }
                w = Fr.mul(w, Fr.w[cirPower]);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name} phase1: ${i}/${plonkConstraints.length}`);
            }
            for (let s=0; s<plonkNVars; s++) {
                if (typeof firstPos[s] !== "undefined") {
                    sigma.set(lastAparence[s], firstPos[s]*n8r);
                } else {
                    throw new Error("Variable not used");
                }
                if ((logger)&&(s%1000000 == 0)) logger.debug(`writing ${name} phase2: ${s}/${plonkNVars}`);
            }
            await startWriteSection(fdZKey, sectionNum);
            let S1 = sigma.slice(0, domainSize*n8r);
            await writeP4(S1);
            let S2 = sigma.slice(domainSize*n8r, domainSize*n8r*2);
            await writeP4(S2);
            let S3 = sigma.slice(domainSize*n8r*2, domainSize*n8r*3);
            await writeP4(S3);
            await endWriteSection(fdZKey);

            S1 = await Fr.batchFromMontgomery(S1);
            S2 = await Fr.batchFromMontgomery(S2);
            S3 = await Fr.batchFromMontgomery(S3);

            vk.S1= await curve.G1.multiExpAffine(LPoints, S1, logger, "multiexp S1");
            vk.S2= await curve.G1.multiExpAffine(LPoints, S2, logger, "multiexp S2");
            vk.S3= await curve.G1.multiExpAffine(LPoints, S3, logger, "multiexp S3");

            function buildSigma(s, p) {
                if (typeof lastAparence[s] === "undefined") {
                    firstPos[s] = p;
                } else {
                    sigma.set(lastAparence[s], p*n8r);
                }
                let v;
                if (p<domainSize) {
                    v = w;
                } else if (p<2*domainSize) {
                    v = Fr.mul(w, k1);
                } else {
                    v = Fr.mul(w, k2);
                }
                lastAparence[s]=v;
            }
        }

        async function writeLs(sectionNum, name) {
            await startWriteSection(fdZKey, sectionNum);
            const l=Math.max(nPublic, 1);
            for (let i=0; i<l; i++) {
                let buff = new BigBuffer(domainSize*n8r);
                buff.set(Fr.one, i*n8r);
                await writeP4(buff);
                if (logger) logger.debug(`writing ${name} ${i}/${l}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeHeaders() {

            // Write the header
            ///////////
            await startWriteSection(fdZKey, 1);
            await fdZKey.writeULE32(2); // Plonk
            await endWriteSection(fdZKey);

            // Write the Plonk header section
            ///////////

            await startWriteSection(fdZKey, 2);
            const primeQ = curve.q;
            const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;

            const primeR = curve.r;
            const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;

            await fdZKey.writeULE32(n8q);
            await writeBigInt(fdZKey, primeQ, n8q);
            await fdZKey.writeULE32(n8r);
            await writeBigInt(fdZKey, primeR, n8r);
            await fdZKey.writeULE32(plonkNVars);                         // Total number of bars
            await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)
            await fdZKey.writeULE32(domainSize);                  // domainSize
            await fdZKey.writeULE32(plonkAdditions.length);                  // domainSize
            await fdZKey.writeULE32(plonkConstraints.length); 

            await fdZKey.write(k1);
            await fdZKey.write(k2);

            await fdZKey.write(G1.toAffine(vk.Qm));
            await fdZKey.write(G1.toAffine(vk.Ql));
            await fdZKey.write(G1.toAffine(vk.Qr));
            await fdZKey.write(G1.toAffine(vk.Qo));
            await fdZKey.write(G1.toAffine(vk.Qc));

            await fdZKey.write(G1.toAffine(vk.S1));
            await fdZKey.write(G1.toAffine(vk.S2));
            await fdZKey.write(G1.toAffine(vk.S3));

            let bX_2;
            bX_2 = await fdPTau.read(sG2, sectionsPTau[3][0].p + sG2);
            await fdZKey.write(bX_2);

            await endWriteSection(fdZKey);
        }

        function getK1K2() {
            let k1 = Fr.two;
            while (isIncluded(k1, [], cirPower)) Fr.add(k1, Fr.one);
            let k2 = Fr.add(k1, Fr.one);
            while (isIncluded(k2, [k1], cirPower)) Fr.add(k2, Fr.one);
            return [k1, k2];


            function isIncluded(k, kArr, pow) {
                const domainSize= 2**pow;
                let w = Fr.one;
                for (let i=0; i<domainSize; i++) {
                    if (Fr.eq(k, w)) return true;
                    for (let j=0; j<kArr.length; j++) {
                        if (Fr.eq(k, Fr.mul(kArr[j], w))) return true;
                    }
                    w = Fr.mul(w, Fr.w[pow]);
                }
                return false;
            }
        }
    }

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    var sha3 = createCommonjsModule(function (module) {
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */
    const {stringifyBigInts} = utils;
    const { keccak256: keccak256$1 } = sha3;

    async function plonk16Prove(zkeyFileName, witnessFileName, logger) {
        const {fd: fdWtns, sections: sectionsWtns} = await readBinFile(witnessFileName, "wtns", 2);

        const wtns = await readHeader(fdWtns, sectionsWtns);

        const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyFileName, "zkey", 2);

        const zkey = await readHeader$1(fdZKey, sectionsZKey);
        if (zkey.protocol != "plonk") {
            throw new Error("zkey file is not groth16");
        }

        if (!Scalar.eq(zkey.r,  wtns.q)) {
            throw new Error("Curve of the witness does not match the curve of the proving key");
        }

        if (wtns.nWitness != zkey.nVars -zkey.nAdditions) {
            throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}, ${zkey.nAdditions}`);
        }

        const curve = await getCurveFromQ(zkey.q);
        const Fr = curve.Fr;
        const G1 = curve.G1;
        const n8r = curve.Fr.n8;

        if (logger) logger.debug("Reading Wtns");
        const buffWitness = await readSection(fdWtns, sectionsWtns, 2);
        // First element in plonk is not used and can be any value. (But always the same).
        // We set it to zero to go faster in the exponentiations.
        buffWitness.set(Fr.zero, 0);
        const buffInternalWitness = new BigBuffer(n8r*zkey.nAdditions);

        await calculateAdditions();

        let A,B,C,Z;
        let A4, B4, C4, Z4;
        let pol_a,pol_b,pol_c, pol_z, pol_t, pol_r;
        let proof = {};

        const sigmaBuff = new BigBuffer(zkey.domainSize*n8r*4*3);
        let o = sectionsZKey[12][0].p + zkey.domainSize*n8r;
        await fdZKey.readToBuffer(sigmaBuff, 0 , zkey.domainSize*n8r*4, o);
        o += zkey.domainSize*n8r*5;
        await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*4 , zkey.domainSize*n8r*4, o);
        o += zkey.domainSize*n8r*5;
        await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*8 , zkey.domainSize*n8r*4, o);

        const pol_s1 = new BigBuffer(zkey.domainSize*n8r);
        await fdZKey.readToBuffer(pol_s1, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p);

        const pol_s2 = new BigBuffer(zkey.domainSize*n8r);
        await fdZKey.readToBuffer(pol_s2, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 5*zkey.domainSize*n8r);

        const PTau = await readSection(fdZKey, sectionsZKey, 14);


        const ch = {};

        await round1();
        await round2();
        await round3();
        await round4();
        await round5();


        ///////////////////////
        // Final adjustments //
        ///////////////////////

        proof.protocol = "plonk";
        proof.curve = curve.name;

        await fdZKey.close();
        await fdWtns.close();

        let publicSignals = [];

        for (let i=1; i<= zkey.nPublic; i++) {
            const pub = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);
            publicSignals.push(Scalar.fromRprLE(pub));
        }

        proof.A = G1.toObject(proof.A);
        proof.B = G1.toObject(proof.B);
        proof.C = G1.toObject(proof.C);
        proof.Z = G1.toObject(proof.Z);

        proof.T1 = G1.toObject(proof.T1);
        proof.T2 = G1.toObject(proof.T2);
        proof.T3 = G1.toObject(proof.T3);

        proof.eval_a = Fr.toObject(proof.eval_a);
        proof.eval_b = Fr.toObject(proof.eval_b);
        proof.eval_c = Fr.toObject(proof.eval_c);
        proof.eval_s1 = Fr.toObject(proof.eval_s1);
        proof.eval_s2 = Fr.toObject(proof.eval_s2);
        proof.eval_zw = Fr.toObject(proof.eval_zw);
        proof.eval_t = Fr.toObject(proof.eval_t);
        proof.eval_r = Fr.toObject(proof.eval_r);

        proof.Wxi = G1.toObject(proof.Wxi);
        proof.Wxiw = G1.toObject(proof.Wxiw);

        delete proof.eval_t;

        proof = stringifyBigInts(proof);
        publicSignals = stringifyBigInts(publicSignals);

        return {proof, publicSignals};

        async function calculateAdditions() {
            const additionsBuff = await readSection(fdZKey, sectionsZKey, 3);

            const sSum = 8+curve.Fr.n8*2;

            for (let i=0; i<zkey.nAdditions; i++) {
                const ai= readUInt32(additionsBuff, i*sSum);
                const bi= readUInt32(additionsBuff, i*sSum+4);
                const ac= additionsBuff.slice(i*sSum+8, i*sSum+8+n8r);
                const bc= additionsBuff.slice(i*sSum+8+n8r, i*sSum+8+n8r*2);
                const aw= getWitness(ai);
                const bw= getWitness(bi);

                const r = curve.Fr.add(
                    curve.Fr.mul(ac, aw),
                    curve.Fr.mul(bc, bw)
                );
                buffInternalWitness.set(r, n8r*i);
            }

        }

        async function buildABC() {
            let A = new BigBuffer(zkey.domainSize * n8r);
            let B = new BigBuffer(zkey.domainSize * n8r);
            let C = new BigBuffer(zkey.domainSize * n8r);

            const aMap = await readSection(fdZKey, sectionsZKey, 4);
            const bMap = await readSection(fdZKey, sectionsZKey, 5);
            const cMap = await readSection(fdZKey, sectionsZKey, 6);

            for (let i=0; i<zkey.nConstrains; i++) {
                const iA = readUInt32(aMap, i*4);
                A.set(getWitness(iA), i*n8r);
                const iB = readUInt32(bMap, i*4);
                B.set(getWitness(iB), i*n8r);
                const iC = readUInt32(cMap, i*4);
                C.set(getWitness(iC), i*n8r);
            }

            A = await Fr.batchToMontgomery(A);
            B = await Fr.batchToMontgomery(B);
            C = await Fr.batchToMontgomery(C);

            return [A,B,C];
        }

        function readUInt32(b, o) {
            const buff = b.slice(o, o+4);
            const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
            return buffV.getUint32(0, true);
        }

        function getWitness(idx) {
            if (idx < zkey.nVars-zkey.nAdditions) {
                return buffWitness.slice(idx*n8r, idx*n8r+n8r);
            } else if (idx < zkey.nVars) {
                return buffInternalWitness.slice((idx - (zkey.nVars-zkey.nAdditions))*n8r, (idx-(zkey.nVars-zkey.nAdditions))*n8r + n8r);
            } else {
                return curve.Fr.zero;
            }
        }

        async function round1() {
            ch.b = [];
            for (let i=1; i<=9; i++) {
                ch.b[i] = curve.Fr.random();
            }
        
            [A, B, C] = await buildABC();

            [pol_a, A4] = await to4T(A, [ch.b[2], ch.b[1]]);
            [pol_b, B4] = await to4T(B, [ch.b[4], ch.b[3]]);
            [pol_c, C4] = await to4T(C, [ch.b[6], ch.b[5]]);

                    
            proof.A = await expTau(pol_a, "multiexp A");
            proof.B = await expTau(pol_b, "multiexp B");
            proof.C = await expTau(pol_c, "multiexp C");
        }

        async function round2() {

            const transcript1 = new Uint8Array(G1.F.n8*2*3);
            G1.toRprUncompressed(transcript1, 0, proof.A);
            G1.toRprUncompressed(transcript1, G1.F.n8*2, proof.B);
            G1.toRprUncompressed(transcript1, G1.F.n8*4, proof.C);

            ch.beta = hashToFr(transcript1);
            if (logger) logger.debug("beta: " + Fr.toString(ch.beta));
        
            const transcript2 = new Uint8Array(n8r);
            Fr.toRprBE(transcript2, 0, ch.beta);
            ch.gamma = hashToFr(transcript2);
            if (logger) logger.debug("gamma: " + Fr.toString(ch.gamma));
        
            let numArr = new BigBuffer(Fr.n8*zkey.domainSize);
            let denArr = new BigBuffer(Fr.n8*zkey.domainSize);

            numArr.set(Fr.one, 0);
            denArr.set(Fr.one, 0);

            let w = Fr.one;
            for (let i=0; i<zkey.domainSize; i++) {
                let n1 = A.slice(i*n8r, (i+1)*n8r);
                n1 = Fr.add( n1, Fr.mul(ch.beta, w) );
                n1 = Fr.add( n1, ch.gamma );

                let n2 = B.slice(i*n8r, (i+1)*n8r);
                n2 = Fr.add( n2, Fr.mul(zkey.k1, Fr.mul(ch.beta, w) ));
                n2 = Fr.add( n2, ch.gamma );

                let n3 = C.slice(i*n8r, (i+1)*n8r);
                n3 = Fr.add( n3, Fr.mul(zkey.k2, Fr.mul(ch.beta, w) ));
                n3 = Fr.add( n3, ch.gamma );

                const num = Fr.mul(n1, Fr.mul(n2, n3));

                let d1 = A.slice(i*n8r, (i+1)*n8r);
                d1 = Fr.add(d1, Fr.mul( sigmaBuff.slice(i*n8r*4, i*n8r*4 + n8r) , ch.beta));
                d1 = Fr.add(d1, ch.gamma);

                let d2 = B.slice(i*n8r, (i+1)*n8r);
                d2 = Fr.add(d2, Fr.mul( sigmaBuff.slice((zkey.domainSize + i)*4*n8r, (zkey.domainSize + i)*4*n8r+n8r) , ch.beta));
                d2 = Fr.add(d2, ch.gamma);

                let d3 = C.slice(i*n8r, (i+1)*n8r);
                d3 = Fr.add(d3, Fr.mul( sigmaBuff.slice((zkey.domainSize*2 + i)*4*n8r, (zkey.domainSize*2 + i)*4*n8r + n8r) , ch.beta));
                d3 = Fr.add(d3, ch.gamma);

                const den = Fr.mul(d1, Fr.mul(d2, d3));

                numArr.set(  
                    Fr.mul( 
                        numArr.slice(i*n8r,(i+1)*n8r) , 
                        num
                    ),
                    ((i+1)%zkey.domainSize)*n8r
                );

                denArr.set(  
                    Fr.mul( 
                        denArr.slice(i*n8r,(i+1)*n8r) , 
                        den
                    ),
                    ((i+1)%zkey.domainSize)*n8r
                );

                w = Fr.mul(w, Fr.w[zkey.power]);
            }

            denArr = await Fr.batchInverse(denArr);

            // TODO: Do it in assembly and in parallel
            for (let i=0; i<zkey.domainSize; i++) {
                numArr.set(   Fr.mul( numArr.slice(i*n8r, (i+1)*n8r), denArr.slice(i*n8r, (i+1)*n8r) )      ,i*n8r);
            }

            if (!Fr.eq(numArr.slice(0, n8r), Fr.one)) {
                throw new Error("Copy constraints does not match");
            }

            Z = numArr;

            [pol_z, Z4] = await to4T(Z, [ch.b[9], ch.b[8], ch.b[7]]);

            proof.Z = await expTau( pol_z, "multiexp Z");
        }

        async function round3() {

            /*
            async function checkDegree(P) {
                const p = await curve.Fr.ifft(P);
                let deg = (P.byteLength/n8r)-1;
                while ((deg>0)&&(Fr.isZero(p.slice(deg*n8r, deg*n8r+n8r)))) deg--;
                return deg;
            }

            function printPol(P) {
                const n=(P.byteLength/n8r);
                console.log("[");
                for (let i=0; i<n; i++) {
                    console.log(Fr.toString(P.slice(i*n8r, i*n8r+n8r)));
                }
                console.log("]");
            }
            */

            if (logger) logger.debug("phse3: Reading QM4");    
            const QM4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QM4, 0 , zkey.domainSize*n8r*4, sectionsZKey[7][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QL4");    
            const QL4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QL4, 0 , zkey.domainSize*n8r*4, sectionsZKey[8][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QR4");    
            const QR4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QR4, 0 , zkey.domainSize*n8r*4, sectionsZKey[9][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QO4");    
            const QO4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QO4, 0 , zkey.domainSize*n8r*4, sectionsZKey[10][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QC4");    
            const QC4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QC4, 0 , zkey.domainSize*n8r*4, sectionsZKey[11][0].p + zkey.domainSize*n8r);

            const lPols = await readSection(fdZKey, sectionsZKey, 13);

            const transcript3 = new Uint8Array(G1.F.n8*2);
            G1.toRprUncompressed(transcript3, 0, proof.Z);

            ch.alpha = hashToFr(transcript3);

            if (logger) logger.debug("alpha: " + Fr.toString(ch.alpha));    


            const Z1 = [
                Fr.zero,
                Fr.add(Fr.e(-1), Fr.w[2]),
                Fr.e(-2),
                Fr.sub(Fr.e(-1), Fr.w[2]),
            ];

            const Z2 = [
                Fr.zero,
                Fr.add(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),
                Fr.e(4),
                Fr.sub(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),
            ];

            const Z3 = [
                Fr.zero,
                Fr.add(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),
                Fr.e(-8),
                Fr.sub(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),
            ];

            const T = new BigBuffer(zkey.domainSize*4*n8r);
            const Tz = new BigBuffer(zkey.domainSize*4*n8r);

            let w = Fr.one;
            for (let i=0; i<zkey.domainSize*4; i++) {
                if ((i%4096 == 0)&&(logger)) logger.debug(`calculating t ${i}/${zkey.domainSize*4}`);

                const a = A4.slice(i*n8r, i*n8r+n8r);
                const b = B4.slice(i*n8r, i*n8r+n8r);
                const c = C4.slice(i*n8r, i*n8r+n8r);
                const z = Z4.slice(i*n8r, i*n8r+n8r);
                const zw = Z4.slice(((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r, ((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r +n8r);
                const qm = QM4.slice(i*n8r, i*n8r+n8r);
                const ql = QL4.slice(i*n8r, i*n8r+n8r);
                const qr = QR4.slice(i*n8r, i*n8r+n8r);
                const qo = QO4.slice(i*n8r, i*n8r+n8r);
                const qc = QC4.slice(i*n8r, i*n8r+n8r);
                const s1 = sigmaBuff.slice(i*n8r, i*n8r+n8r);
                const s2 = sigmaBuff.slice((i+zkey.domainSize*4)*n8r, (i+zkey.domainSize*4)*n8r+n8r);
                const s3 = sigmaBuff.slice((i+zkey.domainSize*8)*n8r, (i+zkey.domainSize*8)*n8r+n8r);
                const ap = Fr.add(ch.b[2], Fr.mul(ch.b[1], w));
                const bp = Fr.add(ch.b[4], Fr.mul(ch.b[3], w));
                const cp = Fr.add(ch.b[6], Fr.mul(ch.b[5], w));
                const w2 = Fr.square(w);
                const zp = Fr.add(Fr.add(Fr.mul(ch.b[7], w2), Fr.mul(ch.b[8], w)), ch.b[9]);
                const wW = Fr.mul(w, Fr.w[zkey.power]);
                const wW2 = Fr.square(wW);
                const zWp = Fr.add(Fr.add(Fr.mul(ch.b[7], wW2), Fr.mul(ch.b[8], wW)), ch.b[9]);

                let pl = Fr.zero;
                for (let j=0; j<zkey.nPublic; j++) {
                    pl = Fr.sub(pl, Fr.mul( 
                        lPols.slice( (j*5*zkey.domainSize+ zkey.domainSize+ i)*n8r, (j*5*zkey.domainSize+ zkey.domainSize + i+1)*n8r),
                        A.slice(j*n8r, (j+1)*n8r)
                    ));
                }

                let [e1, e1z] = mul2(a, b, ap, bp, i%4);
                e1 = Fr.mul(e1, qm);
                e1z = Fr.mul(e1z, qm);

                e1 = Fr.add(e1, Fr.mul(a, ql));
                e1z = Fr.add(e1z, Fr.mul(ap, ql));

                e1 = Fr.add(e1, Fr.mul(b, qr));
                e1z = Fr.add(e1z, Fr.mul(bp, qr));

                e1 = Fr.add(e1, Fr.mul(c, qo));
                e1z = Fr.add(e1z, Fr.mul(cp, qo));

                e1 = Fr.add(e1, pl);
                e1 = Fr.add(e1, qc);

                const betaw = Fr.mul(ch.beta, w);
                let e2a =a;
                e2a = Fr.add(e2a, betaw);
                e2a = Fr.add(e2a, ch.gamma);

                let e2b =b;
                e2b = Fr.add(e2b, Fr.mul(betaw, zkey.k1));
                e2b = Fr.add(e2b, ch.gamma);

                let e2c =c;
                e2c = Fr.add(e2c, Fr.mul(betaw, zkey.k2));
                e2c = Fr.add(e2c, ch.gamma);

                let e2d = z;

                let [e2, e2z] = mul4(e2a, e2b, e2c, e2d, ap, bp, cp, zp, i%4);
                e2 = Fr.mul(e2, ch.alpha);
                e2z = Fr.mul(e2z, ch.alpha);

                let e3a = a;
                e3a = Fr.add(e3a, Fr.mul(ch.beta, s1));
                e3a = Fr.add(e3a, ch.gamma);

                let e3b = b;
                e3b = Fr.add(e3b, Fr.mul(ch.beta,s2));
                e3b = Fr.add(e3b, ch.gamma);

                let e3c = c;
                e3c = Fr.add(e3c, Fr.mul(ch.beta,s3));
                e3c = Fr.add(e3c, ch.gamma);

                let e3d = zw;
                let [e3, e3z] = mul4(e3a, e3b, e3c, e3d, ap, bp, cp, zWp, i%4);

                e3 = Fr.mul(e3, ch.alpha);
                e3z = Fr.mul(e3z, ch.alpha);

                let e4 = Fr.sub(z, Fr.one);
                e4 = Fr.mul(e4, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));
                e4 = Fr.mul(e4, Fr.mul(ch.alpha, ch.alpha));

                let e4z = Fr.mul(zp, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));
                e4z = Fr.mul(e4z, Fr.mul(ch.alpha, ch.alpha));

                let e = Fr.add(Fr.sub(Fr.add(e1, e2), e3), e4);
                let ez = Fr.add(Fr.sub(Fr.add(e1z, e2z), e3z), e4z);

                T.set(e, i*n8r);
                Tz.set(ez, i*n8r);

                w = Fr.mul(w, Fr.w[zkey.power+2]);
            }

            if (logger) logger.debug("ifft T");    
            let t = await Fr.ifft(T);

            if (logger) logger.debug("dividing T/Z");    
            for (let i=0; i<zkey.domainSize; i++) {
                t.set(Fr.neg(t.slice(i*n8r, i*n8r+n8r)), i*n8r);
            }

            for (let i=zkey.domainSize; i<zkey.domainSize*4; i++) {
                const a = Fr.sub(
                    t.slice((i-zkey.domainSize)*n8r, (i-zkey.domainSize)*n8r + n8r),
                    t.slice(i*n8r, i*n8r+n8r)
                );
                t.set(a, i*n8r);
                if (i > (zkey.domainSize*3 -4) ) {
                    if (!Fr.isZero(a)) {
                        throw new Error("T Polynomial is not divisible");
                    }
                }
            }

            if (logger) logger.debug("ifft Tz");    
            const tz = await Fr.ifft(Tz);
            for (let i=0; i<zkey.domainSize*4; i++) {
                const a = tz.slice(i*n8r, (i+1)*n8r);
                if (i > (zkey.domainSize*3 +5) ) {
                    if (!Fr.isZero(a)) {
                        throw new Error("Tz Polynomial is not well calculated");
                    }
                } else {
                    t.set(  
                        Fr.add(
                            t.slice(i*n8r, (i+1)*n8r),
                            a
                        ),
                        i*n8r
                    );
                }
            }

            pol_t = t.slice(0, (zkey.domainSize*3+6)*n8r);

            proof.T1 = await expTau( t.slice(0, zkey.domainSize*n8r) , "multiexp T1");
            proof.T2 = await expTau( t.slice(zkey.domainSize*n8r, zkey.domainSize*2*n8r) , "multiexp T2");
            proof.T3 = await expTau( t.slice(zkey.domainSize*2*n8r, (zkey.domainSize*3+6)*n8r) , "multiexp T3");

            function mul2(a,b, ap, bp,  p) {
                let r, rz;

                
                const a_b = Fr.mul(a,b);
                const a_bp = Fr.mul(a,bp);
                const ap_b = Fr.mul(ap,b);
                const ap_bp = Fr.mul(ap,bp);

                r = a_b;

                let a0 = Fr.add(a_bp, ap_b);

                let a1 = ap_bp;

                rz = a0;
                if (p) {
                    rz = Fr.add(rz, Fr.mul(Z1[p], a1));
                }

                return [r, rz];
            }

            function mul4(a,b,c,d, ap, bp, cp, dp, p) {
                let r, rz;

                
                const a_b = Fr.mul(a,b);
                const a_bp = Fr.mul(a,bp);
                const ap_b = Fr.mul(ap,b);
                const ap_bp = Fr.mul(ap,bp);

                const c_d = Fr.mul(c,d);
                const c_dp = Fr.mul(c,dp);
                const cp_d = Fr.mul(cp,d);
                const cp_dp = Fr.mul(cp,dp);

                r = Fr.mul(a_b, c_d);

                let a0 = Fr.mul(ap_b, c_d);
                a0 = Fr.add(a0, Fr.mul(a_bp, c_d));
                a0 = Fr.add(a0, Fr.mul(a_b, cp_d));
                a0 = Fr.add(a0, Fr.mul(a_b, c_dp));

                let a1 = Fr.mul(ap_bp, c_d);
                a1 = Fr.add(a1, Fr.mul(ap_b, cp_d));
                a1 = Fr.add(a1, Fr.mul(ap_b, c_dp));
                a1 = Fr.add(a1, Fr.mul(a_bp, cp_d));
                a1 = Fr.add(a1, Fr.mul(a_bp, c_dp));
                a1 = Fr.add(a1, Fr.mul(a_b, cp_dp));

                let a2 = Fr.mul(a_bp, cp_dp);
                a2 = Fr.add(a2, Fr.mul(ap_b, cp_dp));
                a2 = Fr.add(a2, Fr.mul(ap_bp, c_dp));
                a2 = Fr.add(a2, Fr.mul(ap_bp, cp_d));

                let a3 = Fr.mul(ap_bp, cp_dp);

                rz = a0;
                if (p) {
                    rz = Fr.add(rz, Fr.mul(Z1[p], a1));
                    rz = Fr.add(rz, Fr.mul(Z2[p], a2));
                    rz = Fr.add(rz, Fr.mul(Z3[p], a3));
                }

                return [r, rz];
            }
        }

        async function round4() {
            const pol_qm = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qm, 0 , zkey.domainSize*n8r, sectionsZKey[7][0].p);

            const pol_ql = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_ql, 0 , zkey.domainSize*n8r, sectionsZKey[8][0].p);

            const pol_qr = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qr, 0 , zkey.domainSize*n8r, sectionsZKey[9][0].p);

            const pol_qo = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qo, 0 , zkey.domainSize*n8r, sectionsZKey[10][0].p);

            const pol_qc = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qc, 0 , zkey.domainSize*n8r, sectionsZKey[11][0].p);

            const pol_s3 = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_s3, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 10*zkey.domainSize*n8r);

            const transcript4 = new Uint8Array(G1.F.n8*2*3);
            G1.toRprUncompressed(transcript4, 0, proof.T1);
            G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);
            G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);
            ch.xi = hashToFr(transcript4);

            if (logger) logger.debug("xi: " + Fr.toString(ch.xi));    

            proof.eval_a = evalPol(pol_a, ch.xi);
            proof.eval_b = evalPol(pol_b, ch.xi);
            proof.eval_c = evalPol(pol_c, ch.xi);
            proof.eval_s1 = evalPol(pol_s1, ch.xi);
            proof.eval_s2 = evalPol(pol_s2, ch.xi);
            proof.eval_t = evalPol(pol_t, ch.xi);
            proof.eval_zw = evalPol(pol_z, Fr.mul(ch.xi, Fr.w[zkey.power]));

            const coef_ab = Fr.mul(proof.eval_a, proof.eval_b);
            
            let e2a = proof.eval_a;
            const betaxi = Fr.mul(ch.beta, ch.xi);
            e2a = Fr.add( e2a, betaxi);
            e2a = Fr.add( e2a, ch.gamma);

            let e2b = proof.eval_b;
            e2b = Fr.add( e2b, Fr.mul(betaxi, zkey.k1));
            e2b = Fr.add( e2b, ch.gamma);

            let e2c = proof.eval_c;
            e2c = Fr.add( e2c, Fr.mul(betaxi, zkey.k2));
            e2c = Fr.add( e2c, ch.gamma);

            const e2 = Fr.mul(Fr.mul(Fr.mul(e2a, e2b), e2c), ch.alpha);

            let e3a = proof.eval_a;
            e3a = Fr.add( e3a, Fr.mul(ch.beta, proof.eval_s1));
            e3a = Fr.add( e3a, ch.gamma);

            let e3b = proof.eval_b;
            e3b = Fr.add( e3b, Fr.mul(ch.beta, proof.eval_s2));
            e3b = Fr.add( e3b, ch.gamma);

            let e3 = Fr.mul(e3a, e3b);
            e3 = Fr.mul(e3, ch.beta);
            e3 = Fr.mul(e3, proof.eval_zw);
            e3 = Fr.mul(e3, ch.alpha);

            ch.xim= ch.xi;
            for (let i=0; i<zkey.power; i++) ch.xim = Fr.mul(ch.xim, ch.xim);
            const eval_l1 = Fr.div(
                Fr.sub(ch.xim, Fr.one),
                Fr.mul(Fr.sub(ch.xi, Fr.one), Fr.e(zkey.domainSize))
            );

            const e4 = Fr.mul(eval_l1, Fr.mul(ch.alpha, ch.alpha));

            const coefs3 = e3;
            const coefz = Fr.add(e2, e4);

            pol_r = new BigBuffer((zkey.domainSize+3)*n8r);

            for (let i = 0; i<zkey.domainSize+3; i++) {
                let v = Fr.mul(coefz, pol_z.slice(i*n8r,(i+1)*n8r));
                if (i<zkey.domainSize) {
                    v = Fr.add(v, Fr.mul(coef_ab, pol_qm.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_a, pol_ql.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_b, pol_qr.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_c, pol_qo.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, pol_qc.slice(i*n8r,(i+1)*n8r));
                    v = Fr.sub(v, Fr.mul(coefs3, pol_s3.slice(i*n8r,(i+1)*n8r)));
                }
                pol_r.set(v, i*n8r);
            }

            proof.eval_r = evalPol(pol_r, ch.xi);
        }

        async function round5() {
            const transcript5 = new Uint8Array(n8r*7);
            Fr.toRprBE(transcript5, 0, proof.eval_a);
            Fr.toRprBE(transcript5, n8r, proof.eval_b);
            Fr.toRprBE(transcript5, n8r*2, proof.eval_c);
            Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);
            Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);
            Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);
            Fr.toRprBE(transcript5, n8r*6, proof.eval_r);
            ch.v = [];
            ch.v[1] = hashToFr(transcript5);
            if (logger) logger.debug("v: " + Fr.toString(ch.v[1]));    

            for (let i=2; i<=6; i++ ) ch.v[i] = Fr.mul(ch.v[i-1], ch.v[1]);
            
            let pol_wxi = new BigBuffer((zkey.domainSize+6)*n8r);

            const xi2m = Fr.mul(ch.xim, ch.xim);

            for (let i=0; i<zkey.domainSize+6; i++) {
                let w = Fr.zero;
                w = Fr.add(w, Fr.mul(xi2m,  pol_t.slice( (zkey.domainSize*2+i)*n8r, (zkey.domainSize*2+i+1)*n8r )));

                if (i<zkey.domainSize+3) {
                    w = Fr.add(w, Fr.mul(ch.v[1],  pol_r.slice(i*n8r, (i+1)*n8r)));
                }

                if (i<zkey.domainSize+2) {
                    w = Fr.add(w, Fr.mul(ch.v[2],  pol_a.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[3],  pol_b.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[4],  pol_c.slice(i*n8r, (i+1)*n8r)));
                }
                
                if (i<zkey.domainSize) {
                    w = Fr.add(w, pol_t.slice(i*n8r, (i+1)*n8r));
                    w = Fr.add(w, Fr.mul(ch.xim,  pol_t.slice( (zkey.domainSize+i)*n8r, (zkey.domainSize+i+1)*n8r )));
                    w = Fr.add(w, Fr.mul(ch.v[5],  pol_s1.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[6],  pol_s2.slice(i*n8r, (i+1)*n8r)));
                }

                pol_wxi.set(w, i*n8r);
            }

            let w0 = pol_wxi.slice(0, n8r);
            w0 = Fr.sub(w0, proof.eval_t);
            w0 = Fr.sub(w0, Fr.mul(ch.v[1], proof.eval_r));
            w0 = Fr.sub(w0, Fr.mul(ch.v[2], proof.eval_a));
            w0 = Fr.sub(w0, Fr.mul(ch.v[3], proof.eval_b));
            w0 = Fr.sub(w0, Fr.mul(ch.v[4], proof.eval_c));
            w0 = Fr.sub(w0, Fr.mul(ch.v[5], proof.eval_s1));
            w0 = Fr.sub(w0, Fr.mul(ch.v[6], proof.eval_s2));
            pol_wxi.set(w0, 0);

            pol_wxi= divPol1(pol_wxi, ch.xi);

            proof.Wxi = await expTau(pol_wxi, "multiexp Wxi");

            let pol_wxiw = new BigBuffer((zkey.domainSize+3)*n8r);
            for (let i=0; i<zkey.domainSize+3; i++) {
                const w = pol_z.slice(i*n8r, (i+1)*n8r);
                pol_wxiw.set(w, i*n8r);
            }
            w0 = pol_wxiw.slice(0, n8r);
            w0 = Fr.sub(w0, proof.eval_zw);
            pol_wxiw.set(w0, 0);

            pol_wxiw= divPol1(pol_wxiw, Fr.mul(ch.xi, Fr.w[zkey.power]));
            proof.Wxiw = await expTau(pol_wxiw, "multiexp Wxiw");
        }

        function hashToFr(transcript) {
            const v = Scalar.fromRprBE(new Uint8Array(keccak256$1.arrayBuffer(transcript)));
            return Fr.e(v);
        }


        function evalPol(P, x) {
            const n = P.byteLength / n8r;
            if (n == 0) return Fr.zero;
            let res = P.slice((n-1)*n8r, n*n8r);
            for (let i=n-2; i>=0; i--) {
                res = Fr.add(Fr.mul(res, x), P.slice(i*n8r, (i+1)*n8r));
            }
            return res;
        }

        function divPol1(P, d) {
            const n = P.byteLength/n8r;
            const res = new BigBuffer(n*n8r);
            res.set(Fr.zero, (n-1) *n8r);
            res.set(P.slice((n-1)*n8r, n*n8r), (n-2)*n8r);
            for (let i=n-3; i>=0; i--) {
                res.set(
                    Fr.add(
                        P.slice((i+1)*n8r, (i+2)*n8r), 
                        Fr.mul(
                            d, 
                            res.slice((i+1)*n8r, (i+2)*n8r)
                        )
                    ),
                    i*n8r
                );
            }
            if (!Fr.eq(
                P.slice(0, n8r),
                Fr.mul(
                    Fr.neg(d),
                    res.slice(0, n8r)
                )
            )) {
                throw new Error("Polinomial does not divide");
            }
            return res;
        }

        async function expTau(b, name) {
            const n = b.byteLength/n8r;
            const PTauN = PTau.slice(0, n*curve.G1.F.n8*2);
            const bm = await curve.Fr.batchFromMontgomery(b);
            let res = await curve.G1.multiExpAffine(PTauN, bm, logger, name);
            res = curve.G1.toAffine(res);
            return res;
        }


        async function to4T(A, pz) {
            pz = pz || []; 
            let a = await Fr.ifft(A);
            const a4 = new BigBuffer(n8r*zkey.domainSize*4);
            a4.set(a, 0);

            const a1 = new BigBuffer(n8r*(zkey.domainSize + pz.length));
            a1.set(a, 0);
            for (let i= 0; i<pz.length; i++) {
                a1.set(
                    Fr.add(
                        a1.slice((zkey.domainSize+i)*n8r, (zkey.domainSize+i+1)*n8r),
                        pz[i]
                    ),
                    (zkey.domainSize+i)*n8r
                );
                a1.set(
                    Fr.sub(
                        a1.slice(i*n8r, (i+1)*n8r),
                        pz[i]
                    ),
                    i*n8r
                );
            }
            const A4 = await Fr.fft(a4);
            return [a1, A4];
        }


    }

    /*
        Copyright 2021 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function plonkFullProve(input, wasmFile, zkeyFileName, logger) {
        const wtns= {
            type: "mem"
        };
        await wtnsCalculate(input, wasmFile, wtns);
        return await plonk16Prove(zkeyFileName, wtns, logger);
    }

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts} = utils;
    const { keccak256 } = sha3;


    async function plonkVerify(vk_verifier, publicSignals, proof, logger) {
        vk_verifier = unstringifyBigInts(vk_verifier);
        proof = unstringifyBigInts(proof);
        publicSignals = unstringifyBigInts(publicSignals);

        const curve = await getCurveFromName(vk_verifier.curve);

        const Fr = curve.Fr;
        const G1 = curve.G1;

        proof = fromObjectProof(curve,proof);
        vk_verifier = fromObjectVk(curve, vk_verifier);
        if (!isWellConstructed(curve, proof)) {
            logger.error("Proof is not well constructed");
            return false;
        }
        const challanges = calculateChallanges(curve, proof);
        if (logger) {
            logger.debug("beta: " + Fr.toString(challanges.beta, 16));    
            logger.debug("gamma: " + Fr.toString(challanges.gamma, 16));    
            logger.debug("alpha: " + Fr.toString(challanges.alpha, 16));    
            logger.debug("xi: " + Fr.toString(challanges.xi, 16));    
            logger.debug("v1: " + Fr.toString(challanges.v[1], 16));    
            logger.debug("v6: " + Fr.toString(challanges.v[6], 16));    
            logger.debug("u: " + Fr.toString(challanges.u, 16));    
        }
        const L = calculateLagrangeEvaluations(curve, challanges, vk_verifier);
        if (logger) {
            logger.debug("Lagrange Evaluations: ");
            for (let i=1; i<L.length; i++) {
                logger.debug(`L${i}(xi)=` + Fr.toString(L[i], 16));    
            }
        }
        
        if (publicSignals.length != vk_verifier.nPublic) {
            logger.error("Number of public signals does not match with vk");
            return false;
        }

        const pl = calculatePl(curve, publicSignals, L);
        if (logger) {
            logger.debug("Pl: " + Fr.toString(pl, 16));
        }

        const t = calculateT(curve, proof, challanges, pl, L[1]);
        if (logger) {
            logger.debug("t: " + Fr.toString(t, 16));
        }

        const D = calculateD(curve, proof, challanges, vk_verifier, L[1]);
        if (logger) {
            logger.debug("D: " + G1.toString(G1.toAffine(D), 16));
        }

        const F = calculateF(curve, proof, challanges, vk_verifier, D);
        if (logger) {
            logger.debug("F: " + G1.toString(G1.toAffine(F), 16));
        }

        const E = calculateE(curve, proof, challanges, vk_verifier, t);
        if (logger) {
            logger.debug("E: " + G1.toString(G1.toAffine(E), 16));
        }

        const res = await isValidPairing(curve, proof, challanges, vk_verifier, E, F);

        if (logger) {
            if (res) {
                logger.info("OK!");
            } else {
                logger.warn("Invalid Proof");
            }
        }

        return res;

    }


    function fromObjectProof(curve, proof) {
        const G1 = curve.G1;
        const Fr = curve.Fr;
        const res = {};
        res.A = G1.fromObject(proof.A);
        res.B = G1.fromObject(proof.B);
        res.C = G1.fromObject(proof.C);
        res.Z = G1.fromObject(proof.Z);
        res.T1 = G1.fromObject(proof.T1);
        res.T2 = G1.fromObject(proof.T2);
        res.T3 = G1.fromObject(proof.T3);
        res.eval_a = Fr.fromObject(proof.eval_a);
        res.eval_b = Fr.fromObject(proof.eval_b);
        res.eval_c = Fr.fromObject(proof.eval_c);
        res.eval_zw = Fr.fromObject(proof.eval_zw);
        res.eval_s1 = Fr.fromObject(proof.eval_s1);
        res.eval_s2 = Fr.fromObject(proof.eval_s2);
        res.eval_r = Fr.fromObject(proof.eval_r);
        res.Wxi = G1.fromObject(proof.Wxi);
        res.Wxiw = G1.fromObject(proof.Wxiw);
        return res;
    }

    function fromObjectVk(curve, vk) {
        const G1 = curve.G1;
        const G2 = curve.G2;
        const Fr = curve.Fr;
        const res = vk;
        res.Qm = G1.fromObject(vk.Qm);
        res.Ql = G1.fromObject(vk.Ql);
        res.Qr = G1.fromObject(vk.Qr);
        res.Qo = G1.fromObject(vk.Qo);
        res.Qc = G1.fromObject(vk.Qc);
        res.S1 = G1.fromObject(vk.S1);
        res.S2 = G1.fromObject(vk.S2);
        res.S3 = G1.fromObject(vk.S3);
        res.k1 = Fr.fromObject(vk.k1);
        res.k2 = Fr.fromObject(vk.k2);
        res.X_2 = G2.fromObject(vk.X_2);

        return res;
    }

    function isWellConstructed(curve, proof) {
        const G1 = curve.G1;
        if (!G1.isValid(proof.A)) return false;
        if (!G1.isValid(proof.B)) return false;
        if (!G1.isValid(proof.C)) return false;
        if (!G1.isValid(proof.Z)) return false;
        if (!G1.isValid(proof.T1)) return false;
        if (!G1.isValid(proof.T2)) return false;
        if (!G1.isValid(proof.T3)) return false;
        if (!G1.isValid(proof.Wxi)) return false;
        if (!G1.isValid(proof.Wxiw)) return false;
        return true;
    }

    function calculateChallanges(curve, proof) {
        const G1 = curve.G1;
        const Fr = curve.Fr;
        const n8r = curve.Fr.n8;
        const res = {};

        const transcript1 = new Uint8Array(G1.F.n8*2*3);
        G1.toRprUncompressed(transcript1, 0, proof.A);
        G1.toRprUncompressed(transcript1, G1.F.n8*2, proof.B);
        G1.toRprUncompressed(transcript1, G1.F.n8*4, proof.C);
        res.beta = hashToFr(curve, transcript1);

        const transcript2 = new Uint8Array(n8r);
        Fr.toRprBE(transcript2, 0, res.beta);
        res.gamma = hashToFr(curve, transcript2);

        const transcript3 = new Uint8Array(G1.F.n8*2);
        G1.toRprUncompressed(transcript3, 0, proof.Z);
        res.alpha = hashToFr(curve, transcript3);

        const transcript4 = new Uint8Array(G1.F.n8*2*3);
        G1.toRprUncompressed(transcript4, 0, proof.T1);
        G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);
        G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);
        res.xi = hashToFr(curve, transcript4);

        const transcript5 = new Uint8Array(n8r*7);
        Fr.toRprBE(transcript5, 0, proof.eval_a);
        Fr.toRprBE(transcript5, n8r, proof.eval_b);
        Fr.toRprBE(transcript5, n8r*2, proof.eval_c);
        Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);
        Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);
        Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);
        Fr.toRprBE(transcript5, n8r*6, proof.eval_r);
        res.v = [];
        res.v[1] = hashToFr(curve, transcript5);

        for (let i=2; i<=6; i++ ) res.v[i] = Fr.mul(res.v[i-1], res.v[1]);

        const transcript6 = new Uint8Array(G1.F.n8*2*2);
        G1.toRprUncompressed(transcript6, 0, proof.Wxi);
        G1.toRprUncompressed(transcript6, G1.F.n8*2, proof.Wxiw);
        res.u = hashToFr(curve, transcript6);

        return res;
    }

    function calculateLagrangeEvaluations(curve, challanges, vk) {
        const Fr = curve.Fr;

        let xin = challanges.xi;
        let domainSize = 1;
        for (let i=0; i<vk.power; i++) {
            xin = Fr.square(xin);
            domainSize *= 2;
        }
        challanges.xin = xin;

        challanges.zh = Fr.sub(xin, Fr.one);
        const L = [];

        const n = Fr.e(domainSize);
        let w = Fr.one;
        for (let i=1; i<=Math.max(1, vk.nPublic); i++) {
            L[i] = Fr.div(Fr.mul(w, challanges.zh), Fr.mul(n, Fr.sub(challanges.xi, w)));
            w = Fr.mul(w, Fr.w[vk.power]);
        }

        return L;
    }

    function hashToFr(curve, transcript) {
        const v = Scalar.fromRprBE(new Uint8Array(keccak256.arrayBuffer(transcript)));
        return curve.Fr.e(v);
    }

    function calculatePl(curve, publicSignals, L) {
        const Fr = curve.Fr;

        let pl = Fr.zero;
        for (let i=0; i<publicSignals.length; i++) {
            const w = Fr.e(publicSignals[i]);
            pl = Fr.sub(pl, Fr.mul(w, L[i+1]));
        }
        return pl;
    }

    function calculateT(curve, proof, challanges, pl, l1) {
        const Fr = curve.Fr;
        let num = proof.eval_r;
        num = Fr.add(num, pl);

        let e1 = proof.eval_a;
        e1 = Fr.add(e1, Fr.mul(challanges.beta, proof.eval_s1));
        e1 = Fr.add(e1, challanges.gamma);

        let e2 = proof.eval_b;
        e2 = Fr.add(e2, Fr.mul(challanges.beta, proof.eval_s2));
        e2 = Fr.add(e2, challanges.gamma);

        let e3 = proof.eval_c;
        e3 = Fr.add(e3, challanges.gamma);

        let e = Fr.mul(Fr.mul(e1, e2), e3);
        e = Fr.mul(e, proof.eval_zw);
        e = Fr.mul(e, challanges.alpha);

        num = Fr.sub(num, e);

        num = Fr.sub(num, Fr.mul(l1, Fr.square(challanges.alpha)));

        const t = Fr.div(num, challanges.zh);

        return t;
    }

    function calculateD(curve, proof, challanges, vk, l1) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let s1 = Fr.mul(Fr.mul(proof.eval_a, proof.eval_b), challanges.v[1]);
        let res = G1.timesFr(vk.Qm, s1);

        let s2 = Fr.mul(proof.eval_a, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Ql, s2));

        let s3 = Fr.mul(proof.eval_b, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Qr, s3));

        let s4 = Fr.mul(proof.eval_c, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Qo, s4));

        res = G1.add(res, G1.timesFr(vk.Qc, challanges.v[1]));

        const betaxi = Fr.mul(challanges.beta, challanges.xi);
        let s6a = proof.eval_a;
        s6a = Fr.add(s6a, betaxi);
        s6a = Fr.add(s6a, challanges.gamma);

        let s6b = proof.eval_b;
        s6b = Fr.add(s6b, Fr.mul(betaxi, vk.k1));
        s6b = Fr.add(s6b, challanges.gamma);

        let s6c = proof.eval_c;
        s6c = Fr.add(s6c, Fr.mul(betaxi, vk.k2));
        s6c = Fr.add(s6c, challanges.gamma);

        let s6 = Fr.mul(Fr.mul(s6a, s6b), s6c);
        s6 = Fr.mul(s6, Fr.mul(challanges.alpha, challanges.v[1]));

        let s6d = Fr.mul(Fr.mul(l1, Fr.square(challanges.alpha)), challanges.v[1]);
        s6 = Fr.add(s6, s6d);

        s6 = Fr.add(s6, challanges.u);
        res = G1.add(res, G1.timesFr(proof.Z, s6));


        let s7a = proof.eval_a;
        s7a = Fr.add(s7a, Fr.mul(challanges.beta, proof.eval_s1));
        s7a = Fr.add(s7a, challanges.gamma);

        let s7b = proof.eval_b;
        s7b = Fr.add(s7b, Fr.mul(challanges.beta, proof.eval_s2));
        s7b = Fr.add(s7b, challanges.gamma);

        let s7 = Fr.mul(s7a, s7b);
        s7 = Fr.mul(s7, challanges.alpha);
        s7 = Fr.mul(s7, challanges.v[1]);
        s7 = Fr.mul(s7, challanges.beta);
        s7 = Fr.mul(s7, proof.eval_zw);
        res = G1.sub(res, G1.timesFr(vk.S3, s7));

        return res;
    }

    function calculateF(curve, proof, challanges, vk, D) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let res = proof.T1;

        res = G1.add(res, G1.timesFr(proof.T2, challanges.xin));
        res = G1.add(res, G1.timesFr(proof.T3, Fr.square(challanges.xin)));
        res = G1.add(res, D);
        res = G1.add(res, G1.timesFr(proof.A, challanges.v[2]));
        res = G1.add(res, G1.timesFr(proof.B, challanges.v[3]));
        res = G1.add(res, G1.timesFr(proof.C, challanges.v[4]));
        res = G1.add(res, G1.timesFr(vk.S1, challanges.v[5]));
        res = G1.add(res, G1.timesFr(vk.S2, challanges.v[6]));

        return res;
    }


    function calculateE(curve, proof, challanges, vk, t) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let s = t;

        s = Fr.add(s, Fr.mul(challanges.v[1], proof.eval_r));
        s = Fr.add(s, Fr.mul(challanges.v[2], proof.eval_a));
        s = Fr.add(s, Fr.mul(challanges.v[3], proof.eval_b));
        s = Fr.add(s, Fr.mul(challanges.v[4], proof.eval_c));
        s = Fr.add(s, Fr.mul(challanges.v[5], proof.eval_s1));
        s = Fr.add(s, Fr.mul(challanges.v[6], proof.eval_s2));
        s = Fr.add(s, Fr.mul(challanges.u, proof.eval_zw));

        const res = G1.timesFr(G1.one, s);

        return res;
    }

    async function isValidPairing(curve, proof, challanges, vk, E, F) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let A1 = proof.Wxi;
        A1 = G1.add(A1, G1.timesFr(proof.Wxiw, challanges.u));

        let B1 = G1.timesFr(proof.Wxi, challanges.xi);
        const s = Fr.mul(Fr.mul(challanges.u, challanges.xi), Fr.w[vk.power]);
        B1 = G1.add(B1, G1.timesFr(proof.Wxiw, s));
        B1 = G1.add(B1, F);
        B1 = G1.sub(B1, E);

        const res = await curve.pairingEq(
            G1.neg(A1) , vk.X_2,
            B1 , curve.G2.one
        );

        return res;

    }

    /*
        Copyright 2021 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    function i2hex(i) {
        return ("0" + i.toString(16)).slice(-2);
    }

    function p256(n) {
        let nstr = n.toString(16);
        while (nstr.length < 64) nstr = "0"+nstr;
        nstr = `"0x${nstr}"`;
        return nstr;
    }

    async function plonkExportSolidityCallData(proof, pub) {

        const curve = await getCurveFromName(proof.curve);
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let inputs = "";
        for (let i=0; i<pub.length; i++) {
            if (inputs != "") inputs = inputs + ",";
            inputs = inputs + p256(pub[i]);
        }

        const proofBuff = new Uint8Array(G1.F.n8*2*9 + Fr.n8*7);
        G1.toRprUncompressed(proofBuff, 0, G1.e(proof.A));
        G1.toRprUncompressed(proofBuff, G1.F.n8*2, G1.e(proof.B));
        G1.toRprUncompressed(proofBuff, G1.F.n8*4, G1.e(proof.C));
        G1.toRprUncompressed(proofBuff, G1.F.n8*6, G1.e(proof.Z));
        G1.toRprUncompressed(proofBuff, G1.F.n8*8, G1.e(proof.T1));
        G1.toRprUncompressed(proofBuff, G1.F.n8*10, G1.e(proof.T2));
        G1.toRprUncompressed(proofBuff, G1.F.n8*12, G1.e(proof.T3));
        G1.toRprUncompressed(proofBuff, G1.F.n8*14, G1.e(proof.Wxi));
        G1.toRprUncompressed(proofBuff, G1.F.n8*16, G1.e(proof.Wxiw));
        Fr.toRprBE(proofBuff, G1.F.n8*18 , Fr.e(proof.eval_a));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8, Fr.e(proof.eval_b));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*2, Fr.e(proof.eval_c));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*3, Fr.e(proof.eval_s1));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*4, Fr.e(proof.eval_s2));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*5, Fr.e(proof.eval_zw));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*6, Fr.e(proof.eval_r));

        const proofHex = Array.from(proofBuff).map(i2hex).join("");

        const S="0x"+proofHex+",["+inputs+"]";

        return S;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var plonk = /*#__PURE__*/Object.freeze({
        __proto__: null,
        setup: plonkSetup,
        fullProve: plonkFullProve,
        prove: plonk16Prove,
        verify: plonkVerify,
        exportSolidityCallData: plonkExportSolidityCallData
    });

    exports.groth16 = groth16;
    exports.plonk = plonk;
    exports.powersOfTau = powersoftau;
    exports.r1cs = r1cs;
    exports.wtns = wtns;
    exports.zKey = zkey;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,



---
File: /@zk-email/helpers/node_modules/snarkjs/build/snarkjs.min.js
---

var snarkjs=function(t){"use strict";const e=[0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];function a(t,e){return e&&10!=e?16==e?"0x"==t.slice(0,2)?BigInt(t):BigInt("0x"+t):void 0:BigInt(t)}const i=a;function o(t,e){return BigInt(t)<<BigInt(e)}function n(t,e){return BigInt(t)>>BigInt(e)}const r=o,c=n;var l=Object.freeze({__proto__:null,fromString:a,e:i,fromArray:function(t,e){let a=BigInt(0);e=BigInt(e);for(let i=0;i<t.length;i++)a=a*e+BigInt(t[i]);return a},bitLength:function(t){const a=t.toString(16);return 4*(a.length-1)+e[parseInt(a[0],16)]},isNegative:function(t){return BigInt(t)<BigInt(0)},isZero:function(t){return!t},shiftLeft:o,shiftRight:n,shl:r,shr:c,isOdd:function(t){return(BigInt(t)&BigInt(1))==BigInt(1)},naf:function(t){let e=BigInt(t);const a=[];for(;e;){if(e&BigInt(1)){const t=2-Number(e%BigInt(4));a.push(t),e-=BigInt(t)}else a.push(0);e>>=BigInt(1)}return a},bits:function(t){let e=BigInt(t);const a=[];for(;e;)e&BigInt(1)?a.push(1):a.push(0),e>>=BigInt(1);return a},toNumber:function(t){if(t>BigInt(Number.MAX_SAFE_INTEGER))throw new Error("Number too big");return Number(t)},toArray:function(t,e){const a=[];let i=BigInt(t);for(e=BigInt(e);i;)a.unshift(Number(i%e)),i/=e;return a},add:function(t,e){return BigInt(t)+BigInt(e)},sub:function(t,e){return BigInt(t)-BigInt(e)},neg:function(t){return-BigInt(t)},mul:function(t,e){return BigInt(t)*BigInt(e)},square:function(t){return BigInt(t)*BigInt(t)},pow:function(t,e){return BigInt(t)**BigInt(e)},exp:function(t,e){return BigInt(t)**BigInt(e)},abs:function(t){return BigInt(t)>=0?BigInt(t):-BigInt(t)},div:function(t,e){return BigInt(t)/BigInt(e)},mod:function(t,e){return BigInt(t)%BigInt(e)},eq:function(t,e){return BigInt(t)==BigInt(e)},neq:function(t,e){return BigInt(t)!=BigInt(e)},lt:function(t,e){return BigInt(t)<BigInt(e)},gt:function(t,e){return BigInt(t)>BigInt(e)},leq:function(t,e){return BigInt(t)<=BigInt(e)},geq:function(t,e){return BigInt(t)>=BigInt(e)},band:function(t,e){return BigInt(t)&BigInt(e)},bor:function(t,e){return BigInt(t)|BigInt(e)},bxor:function(t,e){return BigInt(t)^BigInt(e)},land:function(t,e){return BigInt(t)&&BigInt(e)},lor:function(t,e){return BigInt(t)||BigInt(e)},lnot:function(t){return!BigInt(t)}}),s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function d(t){var e={exports:{}};return t(e,e.exports),e.exports}function u(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.')}var f=d((function(t){var e=function(t){var a=1e7,i=9007199254740992,o=f(i),n="0123456789abcdefghijklmnopqrstuvwxyz",r="function"==typeof BigInt;function c(t,e,a,i){return void 0===t?c[0]:void 0!==e&&(10!=+e||a)?j(t,e,a,i):Z(t)}function l(t,e){this.value=t,this.sign=e,this.isSmall=!1}function s(t){this.value=t,this.sign=t<0,this.isSmall=!0}function d(t){this.value=t}function u(t){return-i<t&&t<i}function f(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function g(t){_(t);var e=t.length;if(e<4&&S(t,o)<0)switch(e){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*a;default:return t[0]+(t[1]+t[2]*a)*a}return t}function _(t){for(var e=t.length;0===t[--e];);t.length=e+1}function p(t){for(var e=new Array(t),a=-1;++a<t;)e[a]=0;return e}function h(t){return t>0?Math.floor(t):Math.ceil(t)}function m(t,e){var i,o,n=t.length,r=e.length,c=new Array(n),l=0,s=a;for(o=0;o<r;o++)l=(i=t[o]+e[o]+l)>=s?1:0,c[o]=i-l*s;for(;o<n;)l=(i=t[o]+l)===s?1:0,c[o++]=i-l*s;return l>0&&c.push(l),c}function L(t,e){return t.length>=e.length?m(t,e):m(e,t)}function w(t,e){var i,o,n=t.length,r=new Array(n),c=a;for(o=0;o<n;o++)i=t[o]-c+e,e=Math.floor(i/c),r[o]=i-e*c,e+=1;for(;e>0;)r[o++]=e%c,e=Math.floor(e/c);return r}function b(t,e){var i,o,n=t.length,r=e.length,c=new Array(n),l=0,s=a;for(i=0;i<r;i++)(o=t[i]-l-e[i])<0?(o+=s,l=1):l=0,c[i]=o;for(i=r;i<n;i++){if(!((o=t[i]-l)<0)){c[i++]=o;break}o+=s,c[i]=o}for(;i<n;i++)c[i]=t[i];return _(c),c}function y(t,e,i){var o,n,r=t.length,c=new Array(r),d=-e,u=a;for(o=0;o<r;o++)n=t[o]+d,d=Math.floor(n/u),n%=u,c[o]=n<0?n+u:n;return"number"==typeof(c=g(c))?(i&&(c=-c),new s(c)):new l(c,i)}function A(t,e){var i,o,n,r,c=t.length,l=e.length,s=p(c+l),d=a;for(n=0;n<c;++n){r=t[n];for(var u=0;u<l;++u)i=r*e[u]+s[n+u],o=Math.floor(i/d),s[n+u]=i-o*d,s[n+u+1]+=o}return _(s),s}function I(t,e){var i,o,n=t.length,r=new Array(n),c=a,l=0;for(o=0;o<n;o++)i=t[o]*e+l,l=Math.floor(i/c),r[o]=i-l*c;for(;l>0;)r[o++]=l%c,l=Math.floor(l/c);return r}function C(t,e){for(var a=[];e-- >0;)a.push(0);return a.concat(t)}function v(t,e){var a=Math.max(t.length,e.length);if(a<=30)return A(t,e);a=Math.ceil(a/2);var i=t.slice(a),o=t.slice(0,a),n=e.slice(a),r=e.slice(0,a),c=v(o,r),l=v(i,n),s=v(L(o,i),L(r,n)),d=L(L(c,C(b(b(s,c),l),a)),C(l,2*a));return _(d),d}function F(t,e,i){return new l(t<a?I(e,t):A(e,f(t)),i)}function x(t){var e,i,o,n,r=t.length,c=p(r+r),l=a;for(o=0;o<r;o++){i=0-(n=t[o])*n;for(var s=o;s<r;s++)e=n*t[s]*2+c[o+s]+i,i=Math.floor(e/l),c[o+s]=e-i*l;c[o+r]=i}return _(c),c}function E(t,e){var a,i,o,n,r=t.length,c=p(r);for(o=0,a=r-1;a>=0;--a)o=(n=1e7*o+t[a])-(i=h(n/e))*e,c[a]=0|i;return[c,0|o]}function B(t,e){var i,o=Z(e);if(r)return[new d(t.value/o.value),new d(t.value%o.value)];var n,u=t.value,m=o.value;if(0===m)throw new Error("Cannot divide by zero");if(t.isSmall)return o.isSmall?[new s(h(u/m)),new s(u%m)]:[c[0],t];if(o.isSmall){if(1===m)return[t,c[0]];if(-1==m)return[t.negate(),c[0]];var L=Math.abs(m);if(L<a){n=g((i=E(u,L))[0]);var w=i[1];return t.sign&&(w=-w),"number"==typeof n?(t.sign!==o.sign&&(n=-n),[new s(n),new s(w)]):[new l(n,t.sign!==o.sign),new s(w)]}m=f(L)}var y=S(u,m);if(-1===y)return[c[0],t];if(0===y)return[c[t.sign===o.sign?1:-1],c[0]];i=u.length+m.length<=200?function(t,e){var i,o,n,r,c,l,s,d=t.length,u=e.length,f=a,_=p(e.length),h=e[u-1],m=Math.ceil(f/(2*h)),L=I(t,m),w=I(e,m);for(L.length<=d&&L.push(0),w.push(0),h=w[u-1],o=d-u;o>=0;o--){for(i=f-1,L[o+u]!==h&&(i=Math.floor((L[o+u]*f+L[o+u-1])/h)),n=0,r=0,l=w.length,c=0;c<l;c++)n+=i*w[c],s=Math.floor(n/f),r+=L[o+c]-(n-s*f),n=s,r<0?(L[o+c]=r+f,r=-1):(L[o+c]=r,r=0);for(;0!==r;){for(i-=1,n=0,c=0;c<l;c++)(n+=L[o+c]-f+w[c])<0?(L[o+c]=n+f,n=0):(L[o+c]=n,n=1);r+=n}_[o]=i}return L=E(L,m)[0],[g(_),g(L)]}(u,m):function(t,e){for(var i,o,n,r,c,l=t.length,s=e.length,d=[],u=[],f=a;l;)if(u.unshift(t[--l]),_(u),S(u,e)<0)d.push(0);else{n=u[(o=u.length)-1]*f+u[o-2],r=e[s-1]*f+e[s-2],o>s&&(n=(n+1)*f),i=Math.ceil(n/r);do{if(S(c=I(e,i),u)<=0)break;i--}while(i);d.push(i),u=b(u,c)}return d.reverse(),[g(d),g(u)]}(u,m),n=i[0];var A=t.sign!==o.sign,C=i[1],v=t.sign;return"number"==typeof n?(A&&(n=-n),n=new s(n)):n=new l(n,A),"number"==typeof C?(v&&(C=-C),C=new s(C)):C=new l(C,v),[n,C]}function S(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var a=t.length-1;a>=0;a--)if(t[a]!==e[a])return t[a]>e[a]?1:-1;return 0}function G(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function P(t,a){for(var i,o,n,r=t.prev(),c=r,l=0;c.isEven();)c=c.divide(2),l++;t:for(o=0;o<a.length;o++)if(!t.lesser(a[o])&&!(n=e(a[o]).modPow(c,t)).isUnit()&&!n.equals(r)){for(i=l-1;0!=i;i--){if((n=n.square().mod(t)).isUnit())return!1;if(n.equals(r))continue t}return!1}return!0}l.prototype=Object.create(c.prototype),s.prototype=Object.create(c.prototype),d.prototype=Object.create(c.prototype),l.prototype.add=function(t){var e=Z(t);if(this.sign!==e.sign)return this.subtract(e.negate());var a=this.value,i=e.value;return e.isSmall?new l(w(a,Math.abs(i)),this.sign):new l(L(a,i),this.sign)},l.prototype.plus=l.prototype.add,s.prototype.add=function(t){var e=Z(t),a=this.value;if(a<0!==e.sign)return this.subtract(e.negate());var i=e.value;if(e.isSmall){if(u(a+i))return new s(a+i);i=f(Math.abs(i))}return new l(w(i,Math.abs(a)),a<0)},s.prototype.plus=s.prototype.add,d.prototype.add=function(t){return new d(this.value+Z(t).value)},d.prototype.plus=d.prototype.add,l.prototype.subtract=function(t){var e=Z(t);if(this.sign!==e.sign)return this.add(e.negate());var a=this.value,i=e.value;return e.isSmall?y(a,Math.abs(i),this.sign):function(t,e,a){var i;return S(t,e)>=0?i=b(t,e):(i=b(e,t),a=!a),"number"==typeof(i=g(i))?(a&&(i=-i),new s(i)):new l(i,a)}(a,i,this.sign)},l.prototype.minus=l.prototype.subtract,s.prototype.subtract=function(t){var e=Z(t),a=this.value;if(a<0!==e.sign)return this.add(e.negate());var i=e.value;return e.isSmall?new s(a-i):y(i,Math.abs(a),a>=0)},s.prototype.minus=s.prototype.subtract,d.prototype.subtract=function(t){return new d(this.value-Z(t).value)},d.prototype.minus=d.prototype.subtract,l.prototype.negate=function(){return new l(this.value,!this.sign)},s.prototype.negate=function(){var t=this.sign,e=new s(-this.value);return e.sign=!t,e},d.prototype.negate=function(){return new d(-this.value)},l.prototype.abs=function(){return new l(this.value,!1)},s.prototype.abs=function(){return new s(Math.abs(this.value))},d.prototype.abs=function(){return new d(this.value>=0?this.value:-this.value)},l.prototype.multiply=function(t){var e,i,o,n=Z(t),r=this.value,s=n.value,d=this.sign!==n.sign;if(n.isSmall){if(0===s)return c[0];if(1===s)return this;if(-1===s)return this.negate();if((e=Math.abs(s))<a)return new l(I(r,e),d);s=f(e)}return i=r.length,o=s.length,new l(-.012*i-.012*o+15e-6*i*o>0?v(r,s):A(r,s),d)},l.prototype.times=l.prototype.multiply,s.prototype._multiplyBySmall=function(t){return u(t.value*this.value)?new s(t.value*this.value):F(Math.abs(t.value),f(Math.abs(this.value)),this.sign!==t.sign)},l.prototype._multiplyBySmall=function(t){return 0===t.value?c[0]:1===t.value?this:-1===t.value?this.negate():F(Math.abs(t.value),this.value,this.sign!==t.sign)},s.prototype.multiply=function(t){return Z(t)._multiplyBySmall(this)},s.prototype.times=s.prototype.multiply,d.prototype.multiply=function(t){return new d(this.value*Z(t).value)},d.prototype.times=d.prototype.multiply,l.prototype.square=function(){return new l(x(this.value),!1)},s.prototype.square=function(){var t=this.value*this.value;return u(t)?new s(t):new l(x(f(Math.abs(this.value))),!1)},d.prototype.square=function(t){return new d(this.value*this.value)},l.prototype.divmod=function(t){var e=B(this,t);return{quotient:e[0],remainder:e[1]}},d.prototype.divmod=s.prototype.divmod=l.prototype.divmod,l.prototype.divide=function(t){return B(this,t)[0]},d.prototype.over=d.prototype.divide=function(t){return new d(this.value/Z(t).value)},s.prototype.over=s.prototype.divide=l.prototype.over=l.prototype.divide,l.prototype.mod=function(t){return B(this,t)[1]},d.prototype.mod=d.prototype.remainder=function(t){return new d(this.value%Z(t).value)},s.prototype.remainder=s.prototype.mod=l.prototype.remainder=l.prototype.mod,l.prototype.pow=function(t){var e,a,i,o=Z(t),n=this.value,r=o.value;if(0===r)return c[1];if(0===n)return c[0];if(1===n)return c[1];if(-1===n)return o.isEven()?c[1]:c[-1];if(o.sign)return c[0];if(!o.isSmall)throw new Error("The exponent "+o.toString()+" is too large.");if(this.isSmall&&u(e=Math.pow(n,r)))return new s(h(e));for(a=this,i=c[1];!0&r&&(i=i.times(a),--r),0!==r;)r/=2,a=a.square();return i},s.prototype.pow=l.prototype.pow,d.prototype.pow=function(t){var e=Z(t),a=this.value,i=e.value,o=BigInt(0),n=BigInt(1),r=BigInt(2);if(i===o)return c[1];if(a===o)return c[0];if(a===n)return c[1];if(a===BigInt(-1))return e.isEven()?c[1]:c[-1];if(e.isNegative())return new d(o);for(var l=this,s=c[1];(i&n)===n&&(s=s.times(l),--i),i!==o;)i/=r,l=l.square();return s},l.prototype.modPow=function(t,e){if(t=Z(t),(e=Z(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var a=c[1],i=this.mod(e);for(t.isNegative()&&(t=t.multiply(c[-1]),i=i.modInv(e));t.isPositive();){if(i.isZero())return c[0];t.isOdd()&&(a=a.multiply(i).mod(e)),t=t.divide(2),i=i.square().mod(e)}return a},d.prototype.modPow=s.prototype.modPow=l.prototype.modPow,l.prototype.compareAbs=function(t){var e=Z(t),a=this.value,i=e.value;return e.isSmall?1:S(a,i)},s.prototype.compareAbs=function(t){var e=Z(t),a=Math.abs(this.value),i=e.value;return e.isSmall?a===(i=Math.abs(i))?0:a>i?1:-1:-1},d.prototype.compareAbs=function(t){var e=this.value,a=Z(t).value;return(e=e>=0?e:-e)===(a=a>=0?a:-a)?0:e>a?1:-1},l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Z(t),a=this.value,i=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:S(a,i)*(this.sign?-1:1)},l.prototype.compareTo=l.prototype.compare,s.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Z(t),a=this.value,i=e.value;return e.isSmall?a==i?0:a>i?1:-1:a<0!==e.sign?a<0?-1:1:a<0?1:-1},s.prototype.compareTo=s.prototype.compare,d.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,a=Z(t).value;return e===a?0:e>a?1:-1},d.prototype.compareTo=d.prototype.compare,l.prototype.equals=function(t){return 0===this.compare(t)},d.prototype.eq=d.prototype.equals=s.prototype.eq=s.prototype.equals=l.prototype.eq=l.prototype.equals,l.prototype.notEquals=function(t){return 0!==this.compare(t)},d.prototype.neq=d.prototype.notEquals=s.prototype.neq=s.prototype.notEquals=l.prototype.neq=l.prototype.notEquals,l.prototype.greater=function(t){return this.compare(t)>0},d.prototype.gt=d.prototype.greater=s.prototype.gt=s.prototype.greater=l.prototype.gt=l.prototype.greater,l.prototype.lesser=function(t){return this.compare(t)<0},d.prototype.lt=d.prototype.lesser=s.prototype.lt=s.prototype.lesser=l.prototype.lt=l.prototype.lesser,l.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},d.prototype.geq=d.prototype.greaterOrEquals=s.prototype.geq=s.prototype.greaterOrEquals=l.prototype.geq=l.prototype.greaterOrEquals,l.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},d.prototype.leq=d.prototype.lesserOrEquals=s.prototype.leq=s.prototype.lesserOrEquals=l.prototype.leq=l.prototype.lesserOrEquals,l.prototype.isEven=function(){return 0==(1&this.value[0])},s.prototype.isEven=function(){return 0==(1&this.value)},d.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},l.prototype.isOdd=function(){return 1==(1&this.value[0])},s.prototype.isOdd=function(){return 1==(1&this.value)},d.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},l.prototype.isPositive=function(){return!this.sign},s.prototype.isPositive=function(){return this.value>0},d.prototype.isPositive=s.prototype.isPositive,l.prototype.isNegative=function(){return this.sign},s.prototype.isNegative=function(){return this.value<0},d.prototype.isNegative=s.prototype.isNegative,l.prototype.isUnit=function(){return!1},s.prototype.isUnit=function(){return 1===Math.abs(this.value)},d.prototype.isUnit=function(){return this.abs().value===BigInt(1)},l.prototype.isZero=function(){return!1},s.prototype.isZero=function(){return 0===this.value},d.prototype.isZero=function(){return this.value===BigInt(0)},l.prototype.isDivisibleBy=function(t){var e=Z(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},d.prototype.isDivisibleBy=s.prototype.isDivisibleBy=l.prototype.isDivisibleBy,l.prototype.isPrime=function(a){var i=G(this);if(i!==t)return i;var o=this.abs(),n=o.bitLength();if(n<=64)return P(o,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var r=Math.log(2)*n.toJSNumber(),c=Math.ceil(!0===a?2*Math.pow(r,2):r),l=[],s=0;s<c;s++)l.push(e(s+2));return P(o,l)},d.prototype.isPrime=s.prototype.isPrime=l.prototype.isPrime,l.prototype.isProbablePrime=function(a,i){var o=G(this);if(o!==t)return o;for(var n=this.abs(),r=a===t?5:a,c=[],l=0;l<r;l++)c.push(e.randBetween(2,n.minus(2),i));return P(n,c)},d.prototype.isProbablePrime=s.prototype.isProbablePrime=l.prototype.isProbablePrime,l.prototype.modInv=function(t){for(var a,i,o,n=e.zero,r=e.one,c=Z(t),l=this.abs();!l.isZero();)a=c.divide(l),i=n,o=c,n=r,c=l,r=i.subtract(a.multiply(r)),l=o.subtract(a.multiply(l));if(!c.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===n.compare(0)&&(n=n.add(t)),this.isNegative()?n.negate():n},d.prototype.modInv=s.prototype.modInv=l.prototype.modInv,l.prototype.next=function(){var t=this.value;return this.sign?y(t,1,this.sign):new l(w(t,1),this.sign)},s.prototype.next=function(){var t=this.value;return t+1<i?new s(t+1):new l(o,!1)},d.prototype.next=function(){return new d(this.value+BigInt(1))},l.prototype.prev=function(){var t=this.value;return this.sign?new l(w(t,1),!0):y(t,1,this.sign)},s.prototype.prev=function(){var t=this.value;return t-1>-i?new s(t-1):new l(o,!0)},d.prototype.prev=function(){return new d(this.value-BigInt(1))};for(var O=[1];2*O[O.length-1]<=a;)O.push(2*O[O.length-1]);var U=O.length,z=O[U-1];function q(t){return Math.abs(t)<=a}function Q(t,a,i){a=Z(a);for(var o=t.isNegative(),n=a.isNegative(),r=o?t.not():t,c=n?a.not():a,l=0,s=0,d=null,u=null,f=[];!r.isZero()||!c.isZero();)l=(d=B(r,z))[1].toJSNumber(),o&&(l=z-1-l),s=(u=B(c,z))[1].toJSNumber(),n&&(s=z-1-s),r=d[0],c=u[0],f.push(i(l,s));for(var g=0!==i(o?1:0,n?1:0)?e(-1):e(0),_=f.length-1;_>=0;_-=1)g=g.multiply(z).add(e(f[_]));return g}l.prototype.shiftLeft=function(t){var e=Z(t).toJSNumber();if(!q(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var a=this;if(a.isZero())return a;for(;e>=U;)a=a.multiply(z),e-=U-1;return a.multiply(O[e])},d.prototype.shiftLeft=s.prototype.shiftLeft=l.prototype.shiftLeft,l.prototype.shiftRight=function(t){var e,a=Z(t).toJSNumber();if(!q(a))throw new Error(String(a)+" is too large for shifting.");if(a<0)return this.shiftLeft(-a);for(var i=this;a>=U;){if(i.isZero()||i.isNegative()&&i.isUnit())return i;i=(e=B(i,z))[1].isNegative()?e[0].prev():e[0],a-=U-1}return(e=B(i,O[a]))[1].isNegative()?e[0].prev():e[0]},d.prototype.shiftRight=s.prototype.shiftRight=l.prototype.shiftRight,l.prototype.not=function(){return this.negate().prev()},d.prototype.not=s.prototype.not=l.prototype.not,l.prototype.and=function(t){return Q(this,t,(function(t,e){return t&e}))},d.prototype.and=s.prototype.and=l.prototype.and,l.prototype.or=function(t){return Q(this,t,(function(t,e){return t|e}))},d.prototype.or=s.prototype.or=l.prototype.or,l.prototype.xor=function(t){return Q(this,t,(function(t,e){return t^e}))},d.prototype.xor=s.prototype.xor=l.prototype.xor;var M=1<<30;function k(t){var e=t.value,i="number"==typeof e?e|M:"bigint"==typeof e?e|BigInt(M):e[0]+e[1]*a|1073758208;return i&-i}function R(t,a){if(a.compareTo(t)<=0){var i=R(t,a.square(a)),o=i.p,n=i.e,r=o.multiply(a);return r.compareTo(t)<=0?{p:r,e:2*n+1}:{p:o,e:2*n}}return{p:e(1),e:0}}function N(t,e){return t=Z(t),e=Z(e),t.greater(e)?t:e}function T(t,e){return t=Z(t),e=Z(e),t.lesser(e)?t:e}function D(t,e){if(t=Z(t).abs(),e=Z(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var a,i,o=c[1];t.isEven()&&e.isEven();)a=T(k(t),k(e)),t=t.divide(a),e=e.divide(a),o=o.multiply(a);for(;t.isEven();)t=t.divide(k(t));do{for(;e.isEven();)e=e.divide(k(e));t.greater(e)&&(i=e,e=t,t=i),e=e.subtract(t)}while(!e.isZero());return o.isUnit()?t:t.multiply(o)}l.prototype.bitLength=function(){var t=this;return t.compareTo(e(0))<0&&(t=t.negate().subtract(e(1))),0===t.compareTo(e(0))?e(0):e(R(t,e(2)).e).add(e(1))},d.prototype.bitLength=s.prototype.bitLength=l.prototype.bitLength;var j=function(t,e,a,i){a=a||n,t=String(t),i||(t=t.toLowerCase(),a=a.toLowerCase());var o,r=t.length,c=Math.abs(e),l={};for(o=0;o<a.length;o++)l[a[o]]=o;for(o=0;o<r;o++){if("-"!==(u=t[o])&&(u in l&&l[u]>=c)){if("1"===u&&1===c)continue;throw new Error(u+" is not a valid digit in base "+e+".")}}e=Z(e);var s=[],d="-"===t[0];for(o=d?1:0;o<t.length;o++){var u;if((u=t[o])in l)s.push(Z(l[u]));else{if("<"!==u)throw new Error(u+" is not a valid character");var f=o;do{o++}while(">"!==t[o]&&o<t.length);s.push(Z(t.slice(f+1,o)))}}return K(s,e,d)};function K(t,e,a){var i,o=c[0],n=c[1];for(i=t.length-1;i>=0;i--)o=o.add(t[i].times(n)),n=n.times(e);return a?o.negate():o}function V(t,a){if((a=e(a)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(a.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var i=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return i.unshift([1]),{value:[].concat.apply([],i),isNegative:!1}}var o=!1;if(t.isNegative()&&a.isPositive()&&(o=!0,t=t.abs()),a.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:o};for(var n,r=[],c=t;c.isNegative()||c.compareAbs(a)>=0;){n=c.divmod(a),c=n.quotient;var l=n.remainder;l.isNegative()&&(l=a.minus(l).abs(),c=c.next()),r.push(l.toJSNumber())}return r.push(c.toJSNumber()),{value:r.reverse(),isNegative:o}}function H(t,e,a){var i=V(t,e);return(i.isNegative?"-":"")+i.value.map((function(t){return function(t,e){return t<(e=e||n).length?e[t]:"<"+t+">"}(t,a)})).join("")}function $(t){if(u(+t)){var e=+t;if(e===h(e))return r?new d(BigInt(e)):new s(e);throw new Error("Invalid integer: "+t)}var a="-"===t[0];a&&(t=t.slice(1));var i=t.split(/e/i);if(i.length>2)throw new Error("Invalid integer: "+i.join("e"));if(2===i.length){var o=i[1];if("+"===o[0]&&(o=o.slice(1)),(o=+o)!==h(o)||!u(o))throw new Error("Invalid integer: "+o+" is not a valid exponent.");var n=i[0],c=n.indexOf(".");if(c>=0&&(o-=n.length-c-1,n=n.slice(0,c)+n.slice(c+1)),o<0)throw new Error("Cannot include negative exponent part for integers");t=n+=new Array(o+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(r)return new d(BigInt(a?"-"+t:t));for(var f=[],g=t.length,p=g-7;g>0;)f.push(+t.slice(p,g)),(p-=7)<0&&(p=0),g-=7;return _(f),new l(f,a)}function Z(t){return"number"==typeof t?function(t){if(r)return new d(BigInt(t));if(u(t)){if(t!==h(t))throw new Error(t+" is not an integer.");return new s(t)}return $(t.toString())}(t):"string"==typeof t?$(t):"bigint"==typeof t?new d(t):t}l.prototype.toArray=function(t){return V(this,t)},s.prototype.toArray=function(t){return V(this,t)},d.prototype.toArray=function(t){return V(this,t)},l.prototype.toString=function(e,a){if(e===t&&(e=10),10!==e)return H(this,e,a);for(var i,o=this.value,n=o.length,r=String(o[--n]);--n>=0;)i=String(o[n]),r+="0000000".slice(i.length)+i;return(this.sign?"-":"")+r},s.prototype.toString=function(e,a){return e===t&&(e=10),10!=e?H(this,e,a):String(this.value)},d.prototype.toString=s.prototype.toString,d.prototype.toJSON=l.prototype.toJSON=s.prototype.toJSON=function(){return this.toString()},l.prototype.valueOf=function(){return parseInt(this.toString(),10)},l.prototype.toJSNumber=l.prototype.valueOf,s.prototype.valueOf=function(){return this.value},s.prototype.toJSNumber=s.prototype.valueOf,d.prototype.valueOf=d.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var J=0;J<1e3;J++)c[J]=Z(J),J>0&&(c[-J]=Z(-J));return c.one=c[1],c.zero=c[0],c.minusOne=c[-1],c.max=N,c.min=T,c.gcd=D,c.lcm=function(t,e){return t=Z(t).abs(),e=Z(e).abs(),t.divide(D(t,e)).multiply(e)},c.isInstance=function(t){return t instanceof l||t instanceof s||t instanceof d},c.randBetween=function(t,e,i){t=Z(t),e=Z(e);var o=i||Math.random,n=T(t,e),r=N(t,e).subtract(n).add(1);if(r.isSmall)return n.add(Math.floor(o()*r));for(var l=V(r,a).value,s=[],d=!0,u=0;u<l.length;u++){var f=d?l[u]+(u+1<l.length?l[u+1]/a:0):a,g=h(o()*f);s.push(g),g<l[u]&&(d=!1)}return n.add(c.fromArray(s,a,!1))},c.fromArray=function(t,e,a){return K(t.map(Z),Z(e||10),a)},c}();t.hasOwnProperty("exports")&&(t.exports=e)}));function g(t,e){return"string"==typeof t&&"0x"==t.slice(0,2)?f(t.slice(2),16):f(t,e)}const _=g;function p(t,e){return f(t).shiftLeft(e)}function h(t,e){return f(t).shiftRight(e)}const m=p,L=h;var w=Object.freeze({__proto__:null,fromString:g,e:_,fromArray:function(t,e){return f.fromArray(t,e)},bitLength:function(t){return f(t).bitLength()},isNegative:function(t){return f(t).isNegative()},isZero:function(t){return f(t).isZero()},shiftLeft:p,shiftRight:h,shl:m,shr:L,isOdd:function(t){return f(t).isOdd()},naf:function(t){let e=f(t);const a=[];for(;e.gt(f.zero);){if(e.isOdd()){const t=2-e.mod(4).toJSNumber();a.push(t),e=e.minus(t)}else a.push(0);e=e.shiftRight(1)}return a},bits:function(t){let e=f(t);const a=[];for(;e.gt(f.zero);)e.isOdd()?a.push(1):a.push(0),e=e.shiftRight(1);return a},toNumber:function(t){if(!t.lt(f("9007199254740992",10)))throw new Error("Number too big");return t.toJSNumber()},toArray:function(t,e){return f(t).toArray(e)},add:function(t,e){return f(t).add(f(e))},sub:function(t,e){return f(t).minus(f(e))},neg:function(t){return f.zero.minus(f(t))},mul:function(t,e){return f(t).times(f(e))},square:function(t){return f(t).square()},pow:function(t,e){return f(t).pow(f(e))},exp:function(t,e){return f(t).pow(f(e))},abs:function(t){return f(t).abs()},div:function(t,e){return f(t).divide(f(e))},mod:function(t,e){return f(t).mod(f(e))},eq:function(t,e){return f(t).eq(f(e))},neq:function(t,e){return f(t).neq(f(e))},lt:function(t,e){return f(t).lt(f(e))},gt:function(t,e){return f(t).gt(f(e))},leq:function(t,e){return f(t).leq(f(e))},geq:function(t,e){return f(t).geq(f(e))},band:function(t,e){return f(t).and(f(e))},bor:function(t,e){return f(t).or(f(e))},bxor:function(t,e){return f(t).xor(f(e))},land:function(t,e){return!f(t).isZero()&&!f(e).isZero()},lor:function(t,e){return!f(t).isZero()||!f(e).isZero()},lnot:function(t){return f(t).isZero()}});const b="function"==typeof BigInt;let y={};b?Object.assign(y,l):Object.assign(y,w),y.toRprLE=function(t,e,a,i){const o="0000000"+a.toString(16),n=new Uint32Array(t.buffer,e,i/4),r=1+(4*(o.length-7)-1>>5);for(let t=0;t<r;t++)n[t]=parseInt(o.substring(o.length-8*t-8,o.length-8*t),16);for(let t=r;t<n.length;t++)n[t]=0;for(let e=4*n.length;e<i;e++)t[e]=y.toNumber(y.band(y.shiftRight(a,8*e),255))},y.toRprBE=function(t,e,a,i){const o="0000000"+a.toString(16),n=new DataView(t.buffer,t.byteOffset+e,i),r=1+(4*(o.length-7)-1>>5);for(let t=0;t<r;t++)n.setUint32(i-4*t-4,parseInt(o.substring(o.length-8*t-8,o.length-8*t),16),!1);for(let t=0;t<i/4-r;t++)n[t]=0},y.fromRprLE=function(t,e,a){a=a||t.byteLength,e=e||0;const i=new Uint32Array(t.buffer,e,a/4),o=new Array(a/4);return i.forEach(((t,e)=>o[o.length-e-1]=t.toString(16).padStart(8,"0"))),y.fromString(o.join(""),16)},y.fromRprBE=function(t,e,a){a=a||t.byteLength,e=e||0;const i=new DataView(t.buffer,t.byteOffset+e,a),o=new Array(a/4);for(let t=0;t<a/4;t++)o[t]=i.getUint32(4*t,!1).toString(16).padStart(8,"0");return y.fromString(o.join(""),16)},y.toString=function(t,e){return t.toString(e)},y.toLEBuff=function(t){const e=new Uint8Array(Math.floor((y.bitLength(t)-1)/8)+1);return y.toRprLE(e,0,t,e.byteLength),e},y.zero=y.e(0),y.one=y.e(1);let{toRprLE:A,toRprBE:I,fromRprLE:C,fromRprBE:v,toString:F,toLEBuff:x,zero:E,one:B,fromString:S,e:G,fromArray:P,bitLength:O,isNegative:U,isZero:z,shiftLeft:q,shiftRight:Q,shl:M,shr:k,isOdd:R,naf:N,bits:T,toNumber:D,toArray:j,add:K,sub:V,neg:H,mul:$,square:Z,pow:J,exp:Y,abs:W,div:X,mod:tt,eq:et,neq:at,lt:it,gt:ot,leq:nt,geq:rt,band:ct,bor:lt,bxor:st,land:dt,lor:ut,lnot:ft}=y;var gt=Object.freeze({__proto__:null,toRprLE:A,toRprBE:I,fromRprLE:C,fromRprBE:v,toString:F,toLEBuff:x,zero:E,one:B,fromString:S,e:G,fromArray:P,bitLength:O,isNegative:U,isZero:z,shiftLeft:q,shiftRight:Q,shl:M,shr:k,isOdd:R,naf:N,bits:T,toNumber:D,toArray:j,add:K,sub:V,neg:H,mul:$,square:Z,pow:J,exp:Y,abs:W,div:X,mod:tt,eq:et,neq:at,lt:it,gt:ot,leq:nt,geq:rt,band:ct,bor:lt,bxor:st,land:dt,lor:ut,lnot:ft});const _t=[];for(let t=0;t<256;t++)_t[t]=pt(t,8);function pt(t,e){let a=0,i=t;for(let t=0;t<e;t++)a<<=1,a|=1&i,i>>=1;return a}function ht(t,e,a){if(z(a))return t.one;const i=T(a);if(0==i.legth)return t.one;let o=e;for(let a=i.length-2;a>=0;a--)o=t.square(o),i[a]&&(o=t.mul(o,e));return o}function mt(t){if(t.m%2==1)if(et(tt(t.p,4),1))if(et(tt(t.p,8),1))if(et(tt(t.p,16),1))!function(t){t.sqrt_q=J(t.p,t.m),t.sqrt_s=0,t.sqrt_t=V(t.sqrt_q,1);for(;!R(t.sqrt_t);)t.sqrt_s=t.sqrt_s+1,t.sqrt_t=X(t.sqrt_t,2);let e=t.one;for(;t.eq(e,t.one);){const a=t.random();t.sqrt_z=t.pow(a,t.sqrt_t),e=t.pow(t.sqrt_z,2**(t.sqrt_s-1))}t.sqrt_tm1d2=X(V(t.sqrt_t,1),2),t.sqrt=function(t){const e=this;if(e.isZero(t))return e.zero;let a=e.pow(t,e.sqrt_tm1d2);const i=e.pow(e.mul(e.square(a),t),2**(e.sqrt_s-1));if(e.eq(i,e.negone))return null;let o=e.sqrt_s,n=e.mul(t,a),r=e.mul(n,a),c=e.sqrt_z;for(;!e.eq(r,e.one);){let t=e.square(r),i=1;for(;!e.eq(t,e.one);)t=e.square(t),i++;a=c;for(let t=0;t<o-i-1;t++)a=e.square(a);c=e.square(a),r=e.mul(r,c),n=e.mul(n,a),o=i}return e.geq(n,e.zero)?n:e.neg(n)}}(t);else{if(!et(tt(t.p,16),9))throw new Error("Field withot sqrt");!function(t){t.sqrt=function(){throw new Error("Sqrt alg 4 not implemented")}}(t)}else{if(!et(tt(t.p,8),5))throw new Error("Field withot sqrt");!function(t){t.sqrt=function(){throw new Error("Sqrt alg 3 not implemented")}}(t)}else et(tt(t.p,4),3)&&function(t){t.sqrt_q=J(t.p,t.m),t.sqrt_e1=X(V(t.sqrt_q,3),4),t.sqrt=function(e){if(this.isZero(e))return this.zero;const a=this.pow(e,this.sqrt_e1),i=this.mul(this.square(a),e);if(this.eq(i,this.negone))return null;const o=this.mul(a,e);return t.geq(o,t.zero)?o:t.neg(o)}}(t);else{const e=tt(J(t.p,t.m/2),4);1==e?function(t){t.sqrt=function(){throw new Error("Sqrt alg 10 not implemented")}}(t):3==e?function(t){t.sqrt_q=J(t.p,t.m/2),t.sqrt_e34=X(V(t.sqrt_q,3),4),t.sqrt_e12=X(V(t.sqrt_q,1),2),t.frobenius=function(e,a){return e%2==1?t.conjugate(a):a},t.sqrt=function(t){const e=this,a=e.pow(t,e.sqrt_e34),i=e.mul(e.square(a),t),o=e.mul(e.frobenius(1,i),i);if(e.eq(o,e.negone))return null;const n=e.mul(a,t);let r;if(e.eq(i,e.negone))r=e.mul(n,[e.F.zero,e.F.one]);else{const t=e.pow(e.add(e.one,i),e.sqrt_e12);r=e.mul(t,n)}return e.geq(r,e.zero)?r:e.neg(r)}}(t):function(t){t.sqrt=function(){throw new Error("Sqrt alg 8 not implemented")}}(t)}}function Lt(t,e,a,i,o){t[e]=t[e]+t[a]>>>0,t[o]=(t[o]^t[e])>>>0,t[o]=(t[o]<<16|t[o]>>>16&65535)>>>0,t[i]=t[i]+t[o]>>>0,t[a]=(t[a]^t[i])>>>0,t[a]=(t[a]<<12|t[a]>>>20&4095)>>>0,t[e]=t[e]+t[a]>>>0,t[o]=(t[o]^t[e])>>>0,t[o]=(t[o]<<8|t[o]>>>24&255)>>>0,t[i]=t[i]+t[o]>>>0,t[a]=(t[a]^t[i])>>>0,t[a]=(t[a]<<7|t[a]>>>25&127)>>>0}class wt{constructor(t){t=t||[0,0,0,0,0,0,0,0],this.state=[1634760805,857760878,2036477234,1797285236,t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],0,0,0,0],this.idx=16,this.buff=new Array(16)}nextU32(){return 16==this.idx&&this.update(),this.buff[this.idx++]}nextU64(){return K($(this.nextU32(),4294967296),this.nextU32())}nextBool(){return 1==(1&this.nextU32())}update(){for(let t=0;t<16;t++)this.buff[t]=this.state[t];for(let e=0;e<10;e++)Lt(t=this.buff,0,4,8,12),Lt(t,1,5,9,13),Lt(t,2,6,10,14),Lt(t,3,7,11,15),Lt(t,0,5,10,15),Lt(t,1,6,11,12),Lt(t,2,7,8,13),Lt(t,3,4,9,14);var t;for(let t=0;t<16;t++)this.buff[t]=this.buff[t]+this.state[t]>>>0;this.idx=0,this.state[12]=this.state[12]+1>>>0,0==this.state[12]&&(this.state[13]=this.state[13]+1>>>0,0==this.state[13]&&(this.state[14]=this.state[14]+1>>>0,0==this.state[14]&&(this.state[15]=this.state[15]+1>>>0)))}}var bt={};function yt(t){let e=new Uint8Array(t);if(void 0!==globalThis.crypto)globalThis.crypto.getRandomValues(e);else for(let a=0;a<t;a++)e[a]=4294967296*Math.random()>>>0;return e}let At=null;function It(){return At||(At=new wt(function(){const t=yt(32),e=new Uint32Array(t.buffer),a=[];for(let t=0;t<8;t++)a.push(e[t]);return a}()),At)}class Ct{constructor(t){this.type="F1",this.one=BigInt(1),this.zero=BigInt(0),this.p=BigInt(t),this.m=1,this.negone=this.p-this.one,this.two=BigInt(2),this.half=this.p>>this.one,this.bitLength=O(this.p),this.mask=(this.one<<BigInt(this.bitLength))-this.one,this.n64=Math.floor((this.bitLength-1)/64)+1,this.n32=2*this.n64,this.n8=8*this.n64,this.R=this.e(this.one<<BigInt(64*this.n64)),this.Ri=this.inv(this.R);const e=this.negone>>this.one;this.nqr=this.two;let a=this.pow(this.nqr,e);for(;!this.eq(a,this.negone);)this.nqr=this.nqr+this.one,a=this.pow(this.nqr,e);for(this.s=0,this.t=this.negone;(this.t&this.one)==this.zero;)this.s=this.s+1,this.t=this.t>>this.one;this.nqr_to_t=this.pow(this.nqr,this.t),mt(this)}e(t,e){let a;if(e?16==e&&(a=BigInt("0x"+t)):a=BigInt(t),a<0){let t=-a;return t>=this.p&&(t%=this.p),this.p-t}return a>=this.p?a%this.p:a}add(t,e){const a=t+e;return a>=this.p?a-this.p:a}sub(t,e){return t>=e?t-e:this.p-e+t}neg(t){return t?this.p-t:t}mul(t,e){return t*e%this.p}mulScalar(t,e){return t*this.e(e)%this.p}square(t){return t*t%this.p}eq(t,e){return t==e}neq(t,e){return t!=e}lt(t,e){return(t>this.half?t-this.p:t)<(e>this.half?e-this.p:e)}gt(t,e){return(t>this.half?t-this.p:t)>(e>this.half?e-this.p:e)}leq(t,e){return(t>this.half?t-this.p:t)<=(e>this.half?e-this.p:e)}geq(t,e){return(t>this.half?t-this.p:t)>=(e>this.half?e-this.p:e)}div(t,e){return this.mul(t,this.inv(e))}idiv(t,e){if(!e)throw new Error("Division by zero");return t/e}inv(t){if(!t)throw new Error("Division by zero");let e=this.zero,a=this.p,i=this.one,o=t%this.p;for(;o;){let t=a/o;[e,i]=[i,e-t*i],[a,o]=[o,a-t*o]}return e<this.zero&&(e+=this.p),e}mod(t,e){return t%e}pow(t,e){return ht(this,t,e)}exp(t,e){return ht(this,t,e)}band(t,e){const a=t&e&this.mask;return a>=this.p?a-this.p:a}bor(t,e){const a=(t|e)&this.mask;return a>=this.p?a-this.p:a}bxor(t,e){const a=(t^e)&this.mask;return a>=this.p?a-this.p:a}bnot(t){const e=t^this.mask;return e>=this.p?e-this.p:e}shl(t,e){if(Number(e)<this.bitLength){const a=t<<e&this.mask;return a>=this.p?a-this.p:a}{const a=this.p-e;return Number(a)<this.bitLength?t>>a:this.zero}}shr(t,e){if(Number(e)<this.bitLength)return t>>e;{const a=this.p-e;if(Number(a)<this.bitLength){const e=t<<a&this.mask;return e>=this.p?e-this.p:e}return 0}}land(t,e){return t&&e?this.one:this.zero}lor(t,e){return t||e?this.one:this.zero}lnot(t){return t?this.zero:this.one}sqrt_old(t){if(t==this.zero)return this.zero;if(this.pow(t,this.negone>>this.one)!=this.one)return null;let e=this.s,a=this.nqr_to_t,i=this.pow(t,this.t),o=this.pow(t,this.add(this.t,this.one)>>this.one);for(;i!=this.one;){let t=this.square(i),n=1;for(;t!=this.one;)n++,t=this.square(t);let r=a;for(let t=0;t<e-n-1;t++)r=this.square(r);e=n,a=this.square(r),i=this.mul(i,a),o=this.mul(o,r)}return o>this.p>>this.one&&(o=this.neg(o)),o}normalize(t,e){if((t=BigInt(t,e))<0){let e=-t;return e>=this.p&&(e%=this.p),this.p-e}return t>=this.p?t%this.p:t}random(){const t=2*this.bitLength/8;let e=this.zero;for(let a=0;a<t;a++)e=(e<<BigInt(8))+BigInt(yt(1)[0]);return e%this.p}toString(t,e){let a;if(t>this.half){a="-"+(this.p-t).toString(e)}else a=t.toString(e);return a}isZero(t){return t==this.zero}fromRng(t){let e;do{e=this.zero;for(let a=0;a<this.n64;a++)e+=t.nextU64()<<BigInt(64*a);e&=this.mask}while(e>=this.p);return e=e*this.Ri%this.p,e}}class vt{constructor(t){this.type="F1",this.one=f.one,this.zero=f.zero,this.p=f(t),this.m=1,this.negone=this.p.minus(f.one),this.two=f(2),this.half=this.p.shiftRight(1),this.bitLength=this.p.bitLength(),this.mask=f.one.shiftLeft(this.bitLength).minus(f.one),this.n64=Math.floor((this.bitLength-1)/64)+1,this.n32=2*this.n64,this.n8=8*this.n64,this.R=f.one.shiftLeft(64*this.n64),this.Ri=this.inv(this.R);const e=this.negone.shiftRight(this.one);this.nqr=this.two;let a=this.pow(this.nqr,e);for(;!a.equals(this.negone);)this.nqr=this.nqr.add(this.one),a=this.pow(this.nqr,e);for(this.s=this.zero,this.t=this.negone;!this.t.isOdd();)this.s=this.s.add(this.one),this.t=this.t.shiftRight(this.one);this.nqr_to_t=this.pow(this.nqr,this.t),mt(this)}e(t,e){const a=f(t,e);return this.normalize(a)}add(t,e){let a=t.add(e);return a.geq(this.p)&&(a=a.minus(this.p)),a}sub(t,e){return t.geq(e)?t.minus(e):this.p.minus(e.minus(t))}neg(t){return t.isZero()?t:this.p.minus(t)}mul(t,e){return t.times(e).mod(this.p)}mulScalar(t,e){return t.times(f(e)).mod(this.p)}square(t){return t.square().mod(this.p)}eq(t,e){return t.eq(e)}neq(t,e){return t.neq(e)}lt(t,e){const a=t.gt(this.half)?t.minus(this.p):t,i=e.gt(this.half)?e.minus(this.p):e;return a.lt(i)}gt(t,e){const a=t.gt(this.half)?t.minus(this.p):t,i=e.gt(this.half)?e.minus(this.p):e;return a.gt(i)}leq(t,e){const a=t.gt(this.half)?t.minus(this.p):t,i=e.gt(this.half)?e.minus(this.p):e;return a.leq(i)}geq(t,e){const a=t.gt(this.half)?t.minus(this.p):t,i=e.gt(this.half)?e.minus(this.p):e;return a.geq(i)}div(t,e){if(e.isZero())throw new Error("Division by zero");return t.times(e.modInv(this.p)).mod(this.p)}idiv(t,e){if(e.isZero())throw new Error("Division by zero");return t.divide(e)}inv(t){if(t.isZero())throw new Error("Division by zero");return t.modInv(this.p)}mod(t,e){return t.mod(e)}pow(t,e){return t.modPow(e,this.p)}exp(t,e){return t.modPow(e,this.p)}band(t,e){return t.and(e).and(this.mask).mod(this.p)}bor(t,e){return t.or(e).and(this.mask).mod(this.p)}bxor(t,e){return t.xor(e).and(this.mask).mod(this.p)}bnot(t){return t.xor(this.mask).mod(this.p)}shl(t,e){if(e.lt(this.bitLength))return t.shiftLeft(e).and(this.mask).mod(this.p);{const a=this.p.minus(e);return a.lt(this.bitLength)?this.shr(t,a):f.zero}}shr(t,e){if(e.lt(this.bitLength))return t.shiftRight(e);{const a=this.p.minus(e);return a.lt(this.bitLength)?this.shl(t,a):f.zero}}land(t,e){return t.isZero()||e.isZero()?f.zero:f.one}lor(t,e){return t.isZero()&&e.isZero()?f.zero:f.one}lnot(t){return t.isZero()?f.one:f.zero}sqrt_old(t){if(t.equals(this.zero))return this.zero;if(!this.pow(t,this.negone.shiftRight(this.one)).equals(this.one))return null;let e=parseInt(this.s),a=this.nqr_to_t,i=this.pow(t,this.t),o=this.pow(t,this.add(this.t,this.one).shiftRight(this.one));for(;!i.equals(this.one);){let t=this.square(i),n=1;for(;!t.equals(this.one);)n++,t=this.square(t);let r=a;for(let t=0;t<e-n-1;t++)r=this.square(r);e=n,a=this.square(r),i=this.mul(i,a),o=this.mul(o,r)}return o.greater(this.p.shiftRight(this.one))&&(o=this.neg(o)),o}normalize(t){return(t=f(t)).isNegative()?this.p.minus(t.abs().mod(this.p)):t.mod(this.p)}random(){let t=f(0),e=f(this.p.square());for(;!e.isZero();)t=t.shiftLeft(8).add(f(yt(1)[0])),e=e.shiftRight(8);return t.mod(this.p)}toString(t,e){let a;if(t.lesserOrEquals(this.p.shiftRight(f(1))))a=t.toString(e);else{a="-"+this.p.minus(t).toString(e)}return a}isZero(t){return t.isZero()}fromRng(t){let e;do{e=f(0);for(let a=0;a<this.n64;a++)e=e.add(e,t.nextU64().shiftLeft(64*a));e=e.and(this.mask)}while(e.geq(this.p));return e=e.times(this.Ri).mod(this.q),e}}const Ft="function"==typeof BigInt;let xt;xt=Ft?Ct:vt;class Et extends xt{toRprLE(t,e,a){A(t,e,a,8*this.n64)}toRprBE(t,e,a){I(t,e,a,8*this.n64)}toRprBEM(t,e,a){return this.toRprBE(t,e,this.mul(this.R,a))}toRprLEM(t,e,a){return this.toRprLE(t,e,this.mul(this.R,a))}fromRprLE(t,e){return C(t,e,this.n8)}fromRprBE(t,e){return v(t,e,this.n8)}fromRprLEM(t,e){return this.mul(this.fromRprLE(t,e),this.Ri)}fromRprBEM(t,e){return this.mul(this.fromRprBE(t,e),this.Ri)}}var Bt=function(t,e){const a=Array(e);let i=f(t);for(let t=0;t<e;t++)a[t]=i.and(255).toJSNumber(),i=i.shiftRight(8);return a},St=function(t,e,a){const i=a||"int";if(t.modules[i])return i;t.modules[i]={};const o=2*e,n=8*e;return t.alloc(n,Bt(1,n)),function(){const a=t.addFunction(i+"_copy");a.addParam("px","i32"),a.addParam("pr","i32");const o=a.getCodeBuilder();for(let t=0;t<e;t++)a.addCode(o.i64_store(o.getLocal("pr"),8*t,o.i64_load(o.getLocal("px"),8*t)))}(),function(){const a=t.addFunction(i+"_zero");a.addParam("pr","i32");const o=a.getCodeBuilder();for(let t=0;t<e;t++)a.addCode(o.i64_store(o.getLocal("pr"),8*t,o.i64_const(0)))}(),function(){const a=t.addFunction(i+"_isZero");a.addParam("px","i32"),a.setReturnType("i32");const o=a.getCodeBuilder();a.addCode(function t(e){return 0==e?o.ret(o.i64_eqz(o.i64_load(o.getLocal("px")))):o.if(o.i64_eqz(o.i64_load(o.getLocal("px"),8*e)),t(e-1),o.ret(o.i32_const(0)))}(e-1)),a.addCode(o.ret(o.i32_const(0)))}(),function(){const a=t.addFunction(i+"_one");a.addParam("pr","i32");const o=a.getCodeBuilder();a.addCode(o.i64_store(o.getLocal("pr"),0,o.i64_const(1)));for(let t=1;t<e;t++)a.addCode(o.i64_store(o.getLocal("pr"),8*t,o.i64_const(0)))}(),function(){const a=t.addFunction(i+"_eq");a.addParam("px","i32"),a.addParam("py","i32"),a.setReturnType("i32");const o=a.getCodeBuilder();a.addCode(function t(e){return 0==e?o.ret(o.i64_eq(o.i64_load(o.getLocal("px")),o.i64_load(o.getLocal("py")))):o.if(o.i64_eq(o.i64_load(o.getLocal("px"),8*e),o.i64_load(o.getLocal("py"),8*e)),t(e-1),o.ret(o.i32_const(0)))}(e-1)),a.addCode(o.ret(o.i32_const(0)))}(),function(){const a=t.addFunction(i+"_gte");a.addParam("px","i32"),a.addParam("py","i32"),a.setReturnType("i32");const o=a.getCodeBuilder();a.addCode(function t(e){return 0==e?o.ret(o.i64_ge_u(o.i64_load(o.getLocal("px")),o.i64_load(o.getLocal("py")))):o.if(o.i64_lt_u(o.i64_load(o.getLocal("px"),8*e),o.i64_load(o.getLocal("py"),8*e)),o.ret(o.i32_const(0)),o.if(o.i64_gt_u(o.i64_load(o.getLocal("px"),8*e),o.i64_load(o.getLocal("py"),8*e)),o.ret(o.i32_const(1)),t(e-1)))}(e-1)),a.addCode(o.ret(o.i32_const(0)))}(),function(){const e=t.addFunction(i+"_add");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32"),e.setReturnType("i32"),e.addLocal("c","i64");const a=e.getCodeBuilder();e.addCode(a.setLocal("c",a.i64_add(a.i64_load32_u(a.getLocal("x")),a.i64_load32_u(a.getLocal("y"))))),e.addCode(a.i64_store32(a.getLocal("r"),a.getLocal("c")));for(let t=1;t<o;t++)e.addCode(a.setLocal("c",a.i64_add(a.i64_add(a.i64_load32_u(a.getLocal("x"),4*t),a.i64_load32_u(a.getLocal("y"),4*t)),a.i64_shr_u(a.getLocal("c"),a.i64_const(32))))),e.addCode(a.i64_store32(a.getLocal("r"),4*t,a.getLocal("c")));e.addCode(a.i32_wrap_i64(a.i64_shr_u(a.getLocal("c"),a.i64_const(32))))}(),function(){const e=t.addFunction(i+"_sub");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32"),e.setReturnType("i32"),e.addLocal("c","i64");const a=e.getCodeBuilder();e.addCode(a.setLocal("c",a.i64_sub(a.i64_load32_u(a.getLocal("x")),a.i64_load32_u(a.getLocal("y"))))),e.addCode(a.i64_store32(a.getLocal("r"),a.i64_and(a.getLocal("c"),a.i64_const("0xFFFFFFFF"))));for(let t=1;t<o;t++)e.addCode(a.setLocal("c",a.i64_add(a.i64_sub(a.i64_load32_u(a.getLocal("x"),4*t),a.i64_load32_u(a.getLocal("y"),4*t)),a.i64_shr_s(a.getLocal("c"),a.i64_const(32))))),e.addCode(a.i64_store32(a.getLocal("r"),4*t,a.i64_and(a.getLocal("c"),a.i64_const("0xFFFFFFFF"))));e.addCode(a.i32_wrap_i64(a.i64_shr_s(a.getLocal("c"),a.i64_const(32))))}(),function(){const e=t.addFunction(i+"_mul");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32"),e.addLocal("c0","i64"),e.addLocal("c1","i64");for(let t=0;t<o;t++)e.addLocal("x"+t,"i64"),e.addLocal("y"+t,"i64");const a=e.getCodeBuilder(),n=[],r=[];function c(t,e){let i,o;return n[t]?i=a.getLocal("x"+t):(i=a.teeLocal("x"+t,a.i64_load32_u(a.getLocal("x"),4*t)),n[t]=!0),r[e]?o=a.getLocal("y"+e):(o=a.teeLocal("y"+e,a.i64_load32_u(a.getLocal("y"),4*e)),r[e]=!0),a.i64_mul(i,o)}let l="c0",s="c1";for(let t=0;t<2*o-1;t++){for(let i=Math.max(0,t-o+1);i<=t&&i<o;i++){const o=t-i;e.addCode(a.setLocal(l,a.i64_add(a.i64_and(a.getLocal(l),a.i64_const(4294967295)),c(i,o)))),e.addCode(a.setLocal(s,a.i64_add(a.getLocal(s),a.i64_shr_u(a.getLocal(l),a.i64_const(32)))))}e.addCode(a.i64_store32(a.getLocal("r"),4*t,a.getLocal(l))),[l,s]=[s,l],e.addCode(a.setLocal(s,a.i64_shr_u(a.getLocal(l),a.i64_const(32))))}e.addCode(a.i64_store32(a.getLocal("r"),4*o*2-4,a.getLocal(l)))}(),function(){const e=t.addFunction(i+"_square");e.addParam("x","i32"),e.addParam("r","i32"),e.addLocal("c0","i64"),e.addLocal("c1","i64"),e.addLocal("c0_old","i64"),e.addLocal("c1_old","i64");for(let t=0;t<o;t++)e.addLocal("x"+t,"i64");const a=e.getCodeBuilder(),n=[];function r(t,e){let i,o;return n[t]?i=a.getLocal("x"+t):(i=a.teeLocal("x"+t,a.i64_load32_u(a.getLocal("x"),4*t)),n[t]=!0),n[e]?o=a.getLocal("x"+e):(o=a.teeLocal("x"+e,a.i64_load32_u(a.getLocal("x"),4*e)),n[e]=!0),a.i64_mul(i,o)}let c="c0",l="c1",s="c0_old",d="c1_old";for(let t=0;t<2*o-1;t++){e.addCode(a.setLocal(c,a.i64_const(0)),a.setLocal(l,a.i64_const(0)));for(let i=Math.max(0,t-o+1);i<t+1>>1&&i<o;i++){const o=t-i;e.addCode(a.setLocal(c,a.i64_add(a.i64_and(a.getLocal(c),a.i64_const(4294967295)),r(i,o)))),e.addCode(a.setLocal(l,a.i64_add(a.getLocal(l),a.i64_shr_u(a.getLocal(c),a.i64_const(32)))))}e.addCode(a.setLocal(c,a.i64_shl(a.i64_and(a.getLocal(c),a.i64_const(4294967295)),a.i64_const(1)))),e.addCode(a.setLocal(l,a.i64_add(a.i64_shl(a.getLocal(l),a.i64_const(1)),a.i64_shr_u(a.getLocal(c),a.i64_const(32))))),t%2==0&&(e.addCode(a.setLocal(c,a.i64_add(a.i64_and(a.getLocal(c),a.i64_const(4294967295)),r(t>>1,t>>1)))),e.addCode(a.setLocal(l,a.i64_add(a.getLocal(l),a.i64_shr_u(a.getLocal(c),a.i64_const(32)))))),t>0&&(e.addCode(a.setLocal(c,a.i64_add(a.i64_and(a.getLocal(c),a.i64_const(4294967295)),a.i64_and(a.getLocal(s),a.i64_const(4294967295))))),e.addCode(a.setLocal(l,a.i64_add(a.i64_add(a.getLocal(l),a.i64_shr_u(a.getLocal(c),a.i64_const(32))),a.getLocal(d))))),e.addCode(a.i64_store32(a.getLocal("r"),4*t,a.getLocal(c))),e.addCode(a.setLocal(s,a.getLocal(l)),a.setLocal(d,a.i64_shr_u(a.getLocal(s),a.i64_const(32))))}e.addCode(a.i64_store32(a.getLocal("r"),4*o*2-4,a.getLocal(s)))}(),function(){const e=t.addFunction(i+"_squareOld");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(i+"_mul",a.getLocal("x"),a.getLocal("x"),a.getLocal("r")))}(),function(){!function(){const e=t.addFunction(i+"__mul1");e.addParam("px","i32"),e.addParam("y","i64"),e.addParam("pr","i32"),e.addLocal("c","i64");const a=e.getCodeBuilder();e.addCode(a.setLocal("c",a.i64_mul(a.i64_load32_u(a.getLocal("px"),0,0),a.getLocal("y")))),e.addCode(a.i64_store32(a.getLocal("pr"),0,0,a.getLocal("c")));for(let t=1;t<o;t++)e.addCode(a.setLocal("c",a.i64_add(a.i64_mul(a.i64_load32_u(a.getLocal("px"),4*t,0),a.getLocal("y")),a.i64_shr_u(a.getLocal("c"),a.i64_const(32))))),e.addCode(a.i64_store32(a.getLocal("pr"),4*t,0,a.getLocal("c")))}(),function(){const e=t.addFunction(i+"__add1");e.addParam("x","i32"),e.addParam("y","i64"),e.addLocal("c","i64"),e.addLocal("px","i32");const a=e.getCodeBuilder();e.addCode(a.setLocal("px",a.getLocal("x"))),e.addCode(a.setLocal("c",a.i64_add(a.i64_load32_u(a.getLocal("px"),0,0),a.getLocal("y")))),e.addCode(a.i64_store32(a.getLocal("px"),0,0,a.getLocal("c"))),e.addCode(a.setLocal("c",a.i64_shr_u(a.getLocal("c"),a.i64_const(32)))),e.addCode(a.block(a.loop(a.br_if(1,a.i64_eqz(a.getLocal("c"))),a.setLocal("px",a.i32_add(a.getLocal("px"),a.i32_const(4))),a.setLocal("c",a.i64_add(a.i64_load32_u(a.getLocal("px"),0,0),a.getLocal("c"))),a.i64_store32(a.getLocal("px"),0,0,a.getLocal("c")),a.setLocal("c",a.i64_shr_u(a.getLocal("c"),a.i64_const(32))),a.br(0))))}();const e=t.addFunction(i+"_div");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("c","i32"),e.addParam("r","i32"),e.addLocal("rr","i32"),e.addLocal("cc","i32"),e.addLocal("eX","i32"),e.addLocal("eY","i32"),e.addLocal("sy","i64"),e.addLocal("sx","i64"),e.addLocal("ec","i32");const a=e.getCodeBuilder(),r=a.i32_const(t.alloc(n)),c=a.i32_const(t.alloc(n)),l=a.i32_const(t.alloc(n)),s=a.getLocal("cc"),d=a.getLocal("rr"),u=t.alloc(2*n),f=a.i32_const(u),g=a.i32_const(u+n);e.addCode(a.if(a.getLocal("c"),a.setLocal("cc",a.getLocal("c")),a.setLocal("cc",c))),e.addCode(a.if(a.getLocal("r"),a.setLocal("rr",a.getLocal("r")),a.setLocal("rr",l))),e.addCode(a.call(i+"_copy",a.getLocal("x"),d)),e.addCode(a.call(i+"_copy",a.getLocal("y"),r)),e.addCode(a.call(i+"_zero",s)),e.addCode(a.call(i+"_zero",f)),e.addCode(a.setLocal("eX",a.i32_const(n-1))),e.addCode(a.setLocal("eY",a.i32_const(n-1))),e.addCode(a.block(a.loop(a.br_if(1,a.i32_or(a.i32_load8_u(a.i32_add(r,a.getLocal("eY")),0,0),a.i32_eq(a.getLocal("eY"),a.i32_const(3)))),a.setLocal("eY",a.i32_sub(a.getLocal("eY"),a.i32_const(1))),a.br(0)))),e.addCode(a.setLocal("sy",a.i64_add(a.i64_load32_u(a.i32_sub(a.i32_add(r,a.getLocal("eY")),a.i32_const(3)),0,0),a.i64_const(1)))),e.addCode(a.if(a.i64_eq(a.getLocal("sy"),a.i64_const(1)),a.drop(a.i64_div_u(a.i64_const(0),a.i64_const(0))))),e.addCode(a.block(a.loop(a.block(a.loop(a.br_if(1,a.i32_or(a.i32_load8_u(a.i32_add(d,a.getLocal("eX")),0,0),a.i32_eq(a.getLocal("eX"),a.i32_const(7)))),a.setLocal("eX",a.i32_sub(a.getLocal("eX"),a.i32_const(1))),a.br(0))),a.setLocal("sx",a.i64_load(a.i32_sub(a.i32_add(d,a.getLocal("eX")),a.i32_const(7)),0,0)),a.setLocal("sx",a.i64_div_u(a.getLocal("sx"),a.getLocal("sy"))),a.setLocal("ec",a.i32_sub(a.i32_sub(a.getLocal("eX"),a.getLocal("eY")),a.i32_const(4))),a.block(a.loop(a.br_if(1,a.i32_and(a.i64_eqz(a.i64_and(a.getLocal("sx"),a.i64_const("0xFFFFFFFF00000000"))),a.i32_ge_s(a.getLocal("ec"),a.i32_const(0)))),a.setLocal("sx",a.i64_shr_u(a.getLocal("sx"),a.i64_const(8))),a.setLocal("ec",a.i32_add(a.getLocal("ec"),a.i32_const(1))),a.br(0))),a.if(a.i64_eqz(a.getLocal("sx")),[...a.br_if(2,a.i32_eqz(a.call(i+"_gte",d,r))),...a.setLocal("sx",a.i64_const(1)),...a.setLocal("ec",a.i32_const(0))]),a.call(i+"__mul1",r,a.getLocal("sx"),g),a.drop(a.call(i+"_sub",d,a.i32_sub(g,a.getLocal("ec")),d)),a.call(i+"__add1",a.i32_add(s,a.getLocal("ec")),a.getLocal("sx")),a.br(0))))}(),function(){const e=t.addFunction(i+"_inverseMod");e.addParam("px","i32"),e.addParam("pm","i32"),e.addParam("pr","i32"),e.addLocal("t","i32"),e.addLocal("newt","i32"),e.addLocal("r","i32"),e.addLocal("qq","i32"),e.addLocal("qr","i32"),e.addLocal("newr","i32"),e.addLocal("swp","i32"),e.addLocal("x","i32"),e.addLocal("signt","i32"),e.addLocal("signnewt","i32"),e.addLocal("signx","i32");const a=e.getCodeBuilder(),o=a.i32_const(t.alloc(n)),r=a.i32_const(t.alloc(n)),c=a.i32_const(t.alloc(n)),l=a.i32_const(t.alloc(n)),s=a.i32_const(t.alloc(n)),d=a.i32_const(t.alloc(n)),u=a.i32_const(t.alloc(2*n)),f=a.i32_const(t.alloc(n));e.addCode(a.setLocal("t",o),a.call(i+"_zero",o),a.setLocal("signt",a.i32_const(0))),e.addCode(a.setLocal("r",r),a.call(i+"_copy",a.getLocal("pm"),r)),e.addCode(a.setLocal("newt",c),a.call(i+"_one",c),a.setLocal("signnewt",a.i32_const(0))),e.addCode(a.setLocal("newr",l),a.call(i+"_copy",a.getLocal("px"),l)),e.addCode(a.setLocal("qq",s)),e.addCode(a.setLocal("qr",d)),e.addCode(a.setLocal("x",f)),e.addCode(a.block(a.loop(a.br_if(1,a.call(i+"_isZero",a.getLocal("newr"))),a.call(i+"_div",a.getLocal("r"),a.getLocal("newr"),a.getLocal("qq"),a.getLocal("qr")),a.call(i+"_mul",a.getLocal("qq"),a.getLocal("newt"),u),a.if(a.getLocal("signt"),a.if(a.getLocal("signnewt"),a.if(a.call(i+"_gte",u,a.getLocal("t")),[...a.drop(a.call(i+"_sub",u,a.getLocal("t"),a.getLocal("x"))),...a.setLocal("signx",a.i32_const(0))],[...a.drop(a.call(i+"_sub",a.getLocal("t"),u,a.getLocal("x"))),...a.setLocal("signx",a.i32_const(1))]),[...a.drop(a.call(i+"_add",u,a.getLocal("t"),a.getLocal("x"))),...a.setLocal("signx",a.i32_const(1))]),a.if(a.getLocal("signnewt"),[...a.drop(a.call(i+"_add",u,a.getLocal("t"),a.getLocal("x"))),...a.setLocal("signx",a.i32_const(0))],a.if(a.call(i+"_gte",a.getLocal("t"),u),[...a.drop(a.call(i+"_sub",a.getLocal("t"),u,a.getLocal("x"))),...a.setLocal("signx",a.i32_const(0))],[...a.drop(a.call(i+"_sub",u,a.getLocal("t"),a.getLocal("x"))),...a.setLocal("signx",a.i32_const(1))]))),a.setLocal("swp",a.getLocal("t")),a.setLocal("t",a.getLocal("newt")),a.setLocal("newt",a.getLocal("x")),a.setLocal("x",a.getLocal("swp")),a.setLocal("signt",a.getLocal("signnewt")),a.setLocal("signnewt",a.getLocal("signx")),a.setLocal("swp",a.getLocal("r")),a.setLocal("r",a.getLocal("newr")),a.setLocal("newr",a.getLocal("qr")),a.setLocal("qr",a.getLocal("swp")),a.br(0)))),e.addCode(a.if(a.getLocal("signt"),a.drop(a.call(i+"_sub",a.getLocal("pm"),a.getLocal("t"),a.getLocal("pr"))),a.call(i+"_copy",a.getLocal("t"),a.getLocal("pr"))))}(),t.exportFunction(i+"_copy"),t.exportFunction(i+"_zero"),t.exportFunction(i+"_one"),t.exportFunction(i+"_isZero"),t.exportFunction(i+"_eq"),t.exportFunction(i+"_gte"),t.exportFunction(i+"_add"),t.exportFunction(i+"_sub"),t.exportFunction(i+"_mul"),t.exportFunction(i+"_square"),t.exportFunction(i+"_squareOld"),t.exportFunction(i+"_div"),t.exportFunction(i+"_inverseMod"),i},Gt=function(t,e,a,i,o,n,r){const c=t.addFunction(e);c.addParam("base","i32"),c.addParam("scalar","i32"),c.addParam("scalarLength","i32"),c.addParam("r","i32"),c.addLocal("i","i32"),c.addLocal("b","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(a));c.addCode(l.if(l.i32_eqz(l.getLocal("scalarLength")),[...l.call(r,l.getLocal("r")),...l.ret([])])),c.addCode(l.call(n,l.getLocal("base"),s)),c.addCode(l.call(r,l.getLocal("r"))),c.addCode(l.setLocal("i",l.getLocal("scalarLength"))),c.addCode(l.block(l.loop(l.setLocal("i",l.i32_sub(l.getLocal("i"),l.i32_const(1))),l.setLocal("b",l.i32_load8_u(l.i32_add(l.getLocal("scalar"),l.getLocal("i")))),...function(){const t=[];for(let e=0;e<8;e++)t.push(...l.call(o,l.getLocal("r"),l.getLocal("r")),...l.if(l.i32_ge_u(l.getLocal("b"),l.i32_const(128>>e)),[...l.setLocal("b",l.i32_sub(l.getLocal("b"),l.i32_const(128>>e))),...l.call(i,l.getLocal("r"),s,l.getLocal("r"))]));return t}(),l.br_if(1,l.i32_eqz(l.getLocal("i"))),l.br(0))))},Pt=function(t,e){const a=8*t.modules[e].n64,i=t.addFunction(e+"_batchInverse");i.addParam("pIn","i32"),i.addParam("inStep","i32"),i.addParam("n","i32"),i.addParam("pOut","i32"),i.addParam("outStep","i32"),i.addLocal("itAux","i32"),i.addLocal("itIn","i32"),i.addLocal("itOut","i32"),i.addLocal("i","i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(a));i.addCode(o.setLocal("itAux",o.i32_load(o.i32_const(0))),o.i32_store(o.i32_const(0),o.i32_add(o.getLocal("itAux"),o.i32_mul(o.i32_add(o.getLocal("n"),o.i32_const(1)),o.i32_const(a))))),i.addCode(o.call(e+"_one",o.getLocal("itAux")),o.setLocal("itIn",o.getLocal("pIn")),o.setLocal("itAux",o.i32_add(o.getLocal("itAux"),o.i32_const(a))),o.setLocal("i",o.i32_const(0)),o.block(o.loop(o.br_if(1,o.i32_eq(o.getLocal("i"),o.getLocal("n"))),o.if(o.call(e+"_isZero",o.getLocal("itIn")),o.call(e+"_copy",o.i32_sub(o.getLocal("itAux"),o.i32_const(a)),o.getLocal("itAux")),o.call(e+"_mul",o.getLocal("itIn"),o.i32_sub(o.getLocal("itAux"),o.i32_const(a)),o.getLocal("itAux"))),o.setLocal("itIn",o.i32_add(o.getLocal("itIn"),o.getLocal("inStep"))),o.setLocal("itAux",o.i32_add(o.getLocal("itAux"),o.i32_const(a))),o.setLocal("i",o.i32_add(o.getLocal("i"),o.i32_const(1))),o.br(0))),o.setLocal("itIn",o.i32_sub(o.getLocal("itIn"),o.getLocal("inStep"))),o.setLocal("itAux",o.i32_sub(o.getLocal("itAux"),o.i32_const(a))),o.setLocal("itOut",o.i32_add(o.getLocal("pOut"),o.i32_mul(o.i32_sub(o.getLocal("n"),o.i32_const(1)),o.getLocal("outStep")))),o.call(e+"_inverse",o.getLocal("itAux"),o.getLocal("itAux")),o.block(o.loop(o.br_if(1,o.i32_eqz(o.getLocal("i"))),o.if(o.call(e+"_isZero",o.getLocal("itIn")),[...o.call(e+"_copy",o.getLocal("itAux"),o.i32_sub(o.getLocal("itAux"),o.i32_const(a))),...o.call(e+"_zero",o.getLocal("itOut"))],[...o.call(e+"_copy",o.i32_sub(o.getLocal("itAux"),o.i32_const(a)),n),...o.call(e+"_mul",o.getLocal("itAux"),o.getLocal("itIn"),o.i32_sub(o.getLocal("itAux"),o.i32_const(a))),...o.call(e+"_mul",o.getLocal("itAux"),n,o.getLocal("itOut"))]),o.setLocal("itIn",o.i32_sub(o.getLocal("itIn"),o.getLocal("inStep"))),o.setLocal("itOut",o.i32_sub(o.getLocal("itOut"),o.getLocal("outStep"))),o.setLocal("itAux",o.i32_sub(o.getLocal("itAux"),o.i32_const(a))),o.setLocal("i",o.i32_sub(o.getLocal("i"),o.i32_const(1))),o.br(0)))),i.addCode(o.i32_store(o.i32_const(0),o.getLocal("itAux")))};var Ot=function(t,e,a,i,o,n){void 0===n&&(n=i<o);const r=t.addFunction(e);r.addParam("pIn","i32"),r.addParam("n","i32"),r.addParam("pOut","i32"),r.addLocal("i","i32"),r.addLocal("itIn","i32"),r.addLocal("itOut","i32");const c=r.getCodeBuilder();n?r.addCode(c.setLocal("itIn",c.i32_add(c.getLocal("pIn"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.i32_const(1)),c.i32_const(i)))),c.setLocal("itOut",c.i32_add(c.getLocal("pOut"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.i32_const(1)),c.i32_const(o)))),c.setLocal("i",c.i32_const(0)),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("i"),c.getLocal("n"))),c.call(a,c.getLocal("itIn"),c.getLocal("itOut")),c.setLocal("itIn",c.i32_sub(c.getLocal("itIn"),c.i32_const(i))),c.setLocal("itOut",c.i32_sub(c.getLocal("itOut"),c.i32_const(o))),c.setLocal("i",c.i32_add(c.getLocal("i"),c.i32_const(1))),c.br(0)))):r.addCode(c.setLocal("itIn",c.getLocal("pIn")),c.setLocal("itOut",c.getLocal("pOut")),c.setLocal("i",c.i32_const(0)),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("i"),c.getLocal("n"))),c.call(a,c.getLocal("itIn"),c.getLocal("itOut")),c.setLocal("itIn",c.i32_add(c.getLocal("itIn"),c.i32_const(i))),c.setLocal("itOut",c.i32_add(c.getLocal("itOut"),c.i32_const(o))),c.setLocal("i",c.i32_add(c.getLocal("i"),c.i32_const(1))),c.br(0))))};var Ut=function(t,e,a,i,o,n){void 0===n&&(n=i<o);const r=t.addFunction(e);r.addParam("pIn1","i32"),r.addParam("pIn2","i32"),r.addParam("n","i32"),r.addParam("pOut","i32"),r.addLocal("i","i32"),r.addLocal("itIn1","i32"),r.addLocal("itIn2","i32"),r.addLocal("itOut","i32");const c=r.getCodeBuilder();n?r.addCode(c.setLocal("itIn1",c.i32_add(c.getLocal("pIn1"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.i32_const(1)),c.i32_const(i)))),c.setLocal("itIn2",c.i32_add(c.getLocal("pIn2"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.i32_const(1)),c.i32_const(i)))),c.setLocal("itOut",c.i32_add(c.getLocal("pOut"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.i32_const(1)),c.i32_const(o)))),c.setLocal("i",c.i32_const(0)),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("i"),c.getLocal("n"))),c.call(a,c.getLocal("itIn1"),c.getLocal("itIn2"),c.getLocal("itOut")),c.setLocal("itIn1",c.i32_sub(c.getLocal("itIn1"),c.i32_const(i))),c.setLocal("itIn2",c.i32_sub(c.getLocal("itIn2"),c.i32_const(i))),c.setLocal("itOut",c.i32_sub(c.getLocal("itOut"),c.i32_const(o))),c.setLocal("i",c.i32_add(c.getLocal("i"),c.i32_const(1))),c.br(0)))):r.addCode(c.setLocal("itIn1",c.getLocal("pIn1")),c.setLocal("itIn2",c.getLocal("pIn2")),c.setLocal("itOut",c.getLocal("pOut")),c.setLocal("i",c.i32_const(0)),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("i"),c.getLocal("n"))),c.call(a,c.getLocal("itIn1"),c.getLocal("itIn2"),c.getLocal("itOut")),c.setLocal("itIn1",c.i32_add(c.getLocal("itIn1"),c.i32_const(i))),c.setLocal("itIn2",c.i32_add(c.getLocal("itIn2"),c.i32_const(i))),c.setLocal("itOut",c.i32_add(c.getLocal("itOut"),c.i32_const(o))),c.setLocal("i",c.i32_add(c.getLocal("i"),c.i32_const(1))),c.br(0))))};var zt=function(t,e,a,i){const o=f(e),n=Math.floor((o.minus(1).bitLength()-1)/64)+1,r=2*n,c=8*n,l=a||"f1m";if(t.modules[l])return l;const s=St(t,n,i),d=t.alloc(c,Bt(o,c));t.alloc(Bt(f.one.shiftLeft(64*n).mod(o),c));const u=t.alloc(Bt(f.one.shiftLeft(64*n).square().mod(o),c)),g=t.alloc(Bt(f.one.shiftLeft(64*n).mod(o),c)),_=t.alloc(Bt(f.zero,c)),p=o.minus(f.one),h=p.shiftRight(1),m=t.alloc(c,Bt(h,c)),L=h.add(f.one),w=t.alloc(c,Bt(L,c));t.modules[l]={pq:d,pR2:u,n64:n,q:o,pOne:g,pZero:_,pePlusOne:w};let b=f(2);if(o.isPrime())for(;!b.modPow(h,o).equals(p);)b=b.add(f.one);t.alloc(Bt(b.shiftLeft(64*n).mod(o),c));let y=0,A=p;for(;!A.isOdd()&&!A.isZero();)y++,A=A.shiftRight(1);const I=t.alloc(c,Bt(A,c)),C=b.modPow(A,o),v=t.alloc(Bt(C.shiftLeft(64*n).mod(o),c)),F=A.add(1).shiftRight(1),x=t.alloc(c,Bt(F,c));return t.exportFunction(s+"_copy",l+"_copy"),t.exportFunction(s+"_zero",l+"_zero"),t.exportFunction(s+"_isZero",l+"_isZero"),t.exportFunction(s+"_eq",l+"_eq"),function(){const e=t.addFunction(l+"_isOne");e.addParam("x","i32"),e.setReturnType("i32");const a=e.getCodeBuilder();e.addCode(a.ret(a.call(s+"_eq",a.getLocal("x"),a.i32_const(g))))}(),function(){const e=t.addFunction(l+"_add");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.if(a.call(s+"_add",a.getLocal("x"),a.getLocal("y"),a.getLocal("r")),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))),a.if(a.call(s+"_gte",a.getLocal("r"),a.i32_const(d)),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))))))}(),function(){const e=t.addFunction(l+"_sub");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.if(a.call(s+"_sub",a.getLocal("x"),a.getLocal("y"),a.getLocal("r")),a.drop(a.call(s+"_add",a.getLocal("r"),a.i32_const(d),a.getLocal("r")))))}(),function(){const e=t.addFunction(l+"_neg");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(l+"_sub",a.i32_const(_),a.getLocal("x"),a.getLocal("r")))}(),function(){const e=t.alloc(r*r*8),a=t.addFunction(l+"_mReduct");a.addParam("t","i32"),a.addParam("r","i32"),a.addLocal("np32","i64"),a.addLocal("c","i64"),a.addLocal("m","i64");const i=a.getCodeBuilder(),n=f("100000000",16).minus(o.modInv(f("100000000",16))).toJSNumber();a.addCode(i.setLocal("np32",i.i64_const(n)));for(let t=0;t<r;t++){a.addCode(i.setLocal("c",i.i64_const(0))),a.addCode(i.setLocal("m",i.i64_and(i.i64_mul(i.i64_load32_u(i.getLocal("t"),4*t),i.getLocal("np32")),i.i64_const("0xFFFFFFFF"))));for(let e=0;e<r;e++)a.addCode(i.setLocal("c",i.i64_add(i.i64_add(i.i64_load32_u(i.getLocal("t"),4*(t+e)),i.i64_shr_u(i.getLocal("c"),i.i64_const(32))),i.i64_mul(i.i64_load32_u(i.i32_const(d),4*e),i.getLocal("m"))))),a.addCode(i.i64_store32(i.getLocal("t"),4*(t+e),i.getLocal("c")));a.addCode(i.i64_store32(i.i32_const(e),4*t,i.i64_shr_u(i.getLocal("c"),i.i64_const(32))))}a.addCode(i.call(l+"_add",i.i32_const(e),i.i32_add(i.getLocal("t"),i.i32_const(4*r)),i.getLocal("r")))}(),function(){const e=t.addFunction(l+"_mul");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32"),e.addLocal("c0","i64"),e.addLocal("c1","i64"),e.addLocal("np32","i64");for(let t=0;t<r;t++)e.addLocal("x"+t,"i64"),e.addLocal("y"+t,"i64"),e.addLocal("m"+t,"i64"),e.addLocal("q"+t,"i64");const a=e.getCodeBuilder(),i=f("100000000",16).minus(o.modInv(f("100000000",16))).toJSNumber();e.addCode(a.setLocal("np32",a.i64_const(i)));const n=[],c=[],u=[];function g(t,e){let i,o;return n[t]?i=a.getLocal("x"+t):(i=a.teeLocal("x"+t,a.i64_load32_u(a.getLocal("x"),4*t)),n[t]=!0),c[e]?o=a.getLocal("y"+e):(o=a.teeLocal("y"+e,a.i64_load32_u(a.getLocal("y"),4*e)),c[e]=!0),a.i64_mul(i,o)}function _(t,e){let i,o;return u[t]?i=a.getLocal("q"+t):(i=a.teeLocal("q"+t,a.i64_load32_u(a.i32_const(0),d+4*t)),u[t]=!0),o=a.getLocal("m"+e),a.i64_mul(i,o)}let p="c0",h="c1";for(let t=0;t<2*r-1;t++){for(let i=Math.max(0,t-r+1);i<=t&&i<r;i++){const o=t-i;e.addCode(a.setLocal(p,a.i64_add(a.i64_and(a.getLocal(p),a.i64_const(4294967295)),g(i,o)))),e.addCode(a.setLocal(h,a.i64_add(a.getLocal(h),a.i64_shr_u(a.getLocal(p),a.i64_const(32)))))}for(let i=Math.max(1,t-r+1);i<=t&&i<r;i++){const o=t-i;e.addCode(a.setLocal(p,a.i64_add(a.i64_and(a.getLocal(p),a.i64_const(4294967295)),_(i,o)))),e.addCode(a.setLocal(h,a.i64_add(a.getLocal(h),a.i64_shr_u(a.getLocal(p),a.i64_const(32)))))}t<r&&(e.addCode(a.setLocal("m"+t,a.i64_and(a.i64_mul(a.i64_and(a.getLocal(p),a.i64_const(4294967295)),a.getLocal("np32")),a.i64_const("0xFFFFFFFF")))),e.addCode(a.setLocal(p,a.i64_add(a.i64_and(a.getLocal(p),a.i64_const(4294967295)),_(0,t)))),e.addCode(a.setLocal(h,a.i64_add(a.getLocal(h),a.i64_shr_u(a.getLocal(p),a.i64_const(32)))))),t>=r&&e.addCode(a.i64_store32(a.getLocal("r"),4*(t-r),a.getLocal(p))),[p,h]=[h,p],e.addCode(a.setLocal(h,a.i64_shr_u(a.getLocal(p),a.i64_const(32))))}e.addCode(a.i64_store32(a.getLocal("r"),4*r-4,a.getLocal(p))),e.addCode(a.if(a.i32_wrap_i64(a.getLocal(h)),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))),a.if(a.call(s+"_gte",a.getLocal("r"),a.i32_const(d)),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))))))}(),function(){const e=t.addFunction(l+"_square");e.addParam("x","i32"),e.addParam("r","i32"),e.addLocal("c0","i64"),e.addLocal("c1","i64"),e.addLocal("c0_old","i64"),e.addLocal("c1_old","i64"),e.addLocal("np32","i64");for(let t=0;t<r;t++)e.addLocal("x"+t,"i64"),e.addLocal("m"+t,"i64"),e.addLocal("q"+t,"i64");const a=e.getCodeBuilder(),i=f("100000000",16).minus(o.modInv(f("100000000",16))).toJSNumber();e.addCode(a.setLocal("np32",a.i64_const(i)));const n=[],c=[];function u(t,e){let i,o;return n[t]?i=a.getLocal("x"+t):(i=a.teeLocal("x"+t,a.i64_load32_u(a.getLocal("x"),4*t)),n[t]=!0),n[e]?o=a.getLocal("x"+e):(o=a.teeLocal("x"+e,a.i64_load32_u(a.getLocal("x"),4*e)),n[e]=!0),a.i64_mul(i,o)}function g(t,e){let i,o;return c[t]?i=a.getLocal("q"+t):(i=a.teeLocal("q"+t,a.i64_load32_u(a.i32_const(0),d+4*t)),c[t]=!0),o=a.getLocal("m"+e),a.i64_mul(i,o)}let _="c0",p="c1",h="c0_old",m="c1_old";for(let t=0;t<2*r-1;t++){e.addCode(a.setLocal(_,a.i64_const(0)),a.setLocal(p,a.i64_const(0)));for(let i=Math.max(0,t-r+1);i<t+1>>1&&i<r;i++){const o=t-i;e.addCode(a.setLocal(_,a.i64_add(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),u(i,o)))),e.addCode(a.setLocal(p,a.i64_add(a.getLocal(p),a.i64_shr_u(a.getLocal(_),a.i64_const(32)))))}e.addCode(a.setLocal(_,a.i64_shl(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),a.i64_const(1)))),e.addCode(a.setLocal(p,a.i64_add(a.i64_shl(a.getLocal(p),a.i64_const(1)),a.i64_shr_u(a.getLocal(_),a.i64_const(32))))),t%2==0&&(e.addCode(a.setLocal(_,a.i64_add(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),u(t>>1,t>>1)))),e.addCode(a.setLocal(p,a.i64_add(a.getLocal(p),a.i64_shr_u(a.getLocal(_),a.i64_const(32)))))),t>0&&(e.addCode(a.setLocal(_,a.i64_add(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),a.i64_and(a.getLocal(h),a.i64_const(4294967295))))),e.addCode(a.setLocal(p,a.i64_add(a.i64_add(a.getLocal(p),a.i64_shr_u(a.getLocal(_),a.i64_const(32))),a.getLocal(m)))));for(let i=Math.max(1,t-r+1);i<=t&&i<r;i++){const o=t-i;e.addCode(a.setLocal(_,a.i64_add(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),g(i,o)))),e.addCode(a.setLocal(p,a.i64_add(a.getLocal(p),a.i64_shr_u(a.getLocal(_),a.i64_const(32)))))}t<r&&(e.addCode(a.setLocal("m"+t,a.i64_and(a.i64_mul(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),a.getLocal("np32")),a.i64_const("0xFFFFFFFF")))),e.addCode(a.setLocal(_,a.i64_add(a.i64_and(a.getLocal(_),a.i64_const(4294967295)),g(0,t)))),e.addCode(a.setLocal(p,a.i64_add(a.getLocal(p),a.i64_shr_u(a.getLocal(_),a.i64_const(32)))))),t>=r&&e.addCode(a.i64_store32(a.getLocal("r"),4*(t-r),a.getLocal(_))),e.addCode(a.setLocal(h,a.getLocal(p)),a.setLocal(m,a.i64_shr_u(a.getLocal(h),a.i64_const(32))))}e.addCode(a.i64_store32(a.getLocal("r"),4*r-4,a.getLocal(h))),e.addCode(a.if(a.i32_wrap_i64(a.getLocal(m)),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))),a.if(a.call(s+"_gte",a.getLocal("r"),a.i32_const(d)),a.drop(a.call(s+"_sub",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))))))}(),function(){const e=t.addFunction(l+"_squareOld");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(l+"_mul",a.getLocal("x"),a.getLocal("x"),a.getLocal("r")))}(),function(){const e=t.addFunction(l+"_toMontgomery");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(l+"_mul",a.getLocal("x"),a.i32_const(u),a.getLocal("r")))}(),function(){const e=t.alloc(2*c),a=t.addFunction(l+"_fromMontgomery");a.addParam("x","i32"),a.addParam("r","i32");const i=a.getCodeBuilder();a.addCode(i.call(s+"_copy",i.getLocal("x"),i.i32_const(e))),a.addCode(i.call(s+"_zero",i.i32_const(e+c))),a.addCode(i.call(l+"_mReduct",i.i32_const(e),i.getLocal("r")))}(),function(){const e=t.addFunction(l+"_isNegative");e.addParam("x","i32"),e.setReturnType("i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(c));e.addCode(a.call(l+"_fromMontgomery",a.getLocal("x"),i),a.call(s+"_gte",i,a.i32_const(w)))}(),function(){const e=t.addFunction(l+"_sign");e.addParam("x","i32"),e.setReturnType("i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(c));e.addCode(a.if(a.call(s+"_isZero",a.getLocal("x")),a.ret(a.i32_const(0))),a.call(l+"_fromMontgomery",a.getLocal("x"),i),a.if(a.call(s+"_gte",i,a.i32_const(w)),a.ret(a.i32_const(-1))),a.ret(a.i32_const(1)))}(),function(){const e=t.addFunction(l+"_inverse");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(l+"_fromMontgomery",a.getLocal("x"),a.getLocal("r"))),e.addCode(a.call(s+"_inverseMod",a.getLocal("r"),a.i32_const(d),a.getLocal("r"))),e.addCode(a.call(l+"_toMontgomery",a.getLocal("r"),a.getLocal("r")))}(),function(){const e=t.addFunction(l+"_one");e.addParam("pr","i32");const a=e.getCodeBuilder();e.addCode(a.call(s+"_copy",a.i32_const(g),a.getLocal("pr")))}(),function(){const e=t.addFunction(l+"_load");e.addParam("scalar","i32"),e.addParam("scalarLen","i32"),e.addParam("r","i32"),e.addLocal("p","i32"),e.addLocal("l","i32"),e.addLocal("i","i32"),e.addLocal("j","i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(c)),o=t.alloc(c),n=a.i32_const(o);e.addCode(a.call(s+"_zero",a.getLocal("r")),a.setLocal("i",a.i32_const(c)),a.setLocal("p",a.getLocal("scalar")),a.block(a.loop(a.br_if(1,a.i32_gt_u(a.getLocal("i"),a.getLocal("scalarLen"))),a.if(a.i32_eq(a.getLocal("i"),a.i32_const(c)),a.call(l+"_one",i),a.call(l+"_mul",i,a.i32_const(u),i)),a.call(l+"_mul",a.getLocal("p"),i,n),a.call(l+"_add",a.getLocal("r"),n,a.getLocal("r")),a.setLocal("p",a.i32_add(a.getLocal("p"),a.i32_const(c))),a.setLocal("i",a.i32_add(a.getLocal("i"),a.i32_const(c))),a.br(0))),a.setLocal("l",a.i32_rem_u(a.getLocal("scalarLen"),a.i32_const(c))),a.if(a.i32_eqz(a.getLocal("l")),a.ret([])),a.call(s+"_zero",n),a.setLocal("j",a.i32_const(0)),a.block(a.loop(a.br_if(1,a.i32_eq(a.getLocal("j"),a.getLocal("l"))),a.i32_store8(a.getLocal("j"),o,a.i32_load8_u(a.getLocal("p"))),a.setLocal("p",a.i32_add(a.getLocal("p"),a.i32_const(1))),a.setLocal("j",a.i32_add(a.getLocal("j"),a.i32_const(1))),a.br(0))),a.if(a.i32_eq(a.getLocal("i"),a.i32_const(c)),a.call(l+"_one",i),a.call(l+"_mul",i,a.i32_const(u),i)),a.call(l+"_mul",n,i,n),a.call(l+"_add",a.getLocal("r"),n,a.getLocal("r")))}(),function(){const e=t.addFunction(l+"_timesScalar");e.addParam("x","i32"),e.addParam("scalar","i32"),e.addParam("scalarLen","i32"),e.addParam("r","i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(c));e.addCode(a.call(l+"_load",a.getLocal("scalar"),a.getLocal("scalarLen"),i),a.call(l+"_toMontgomery",i,i),a.call(l+"_mul",a.getLocal("x"),i,a.getLocal("r")))}(),Pt(t,l),Ot(t,l+"_batchToMontgomery",l+"_toMontgomery",c,c),Ot(t,l+"_batchFromMontgomery",l+"_fromMontgomery",c,c),Ot(t,l+"_batchNeg",l+"_neg",c,c),Ut(t,l+"_batchAdd",l+"_add",c,c),Ut(t,l+"_batchSub",l+"_sub",c,c),Ut(t,l+"_batchMul",l+"_mul",c,c),t.exportFunction(l+"_add"),t.exportFunction(l+"_sub"),t.exportFunction(l+"_neg"),t.exportFunction(l+"_isNegative"),t.exportFunction(l+"_isOne"),t.exportFunction(l+"_sign"),t.exportFunction(l+"_mReduct"),t.exportFunction(l+"_mul"),t.exportFunction(l+"_square"),t.exportFunction(l+"_squareOld"),t.exportFunction(l+"_fromMontgomery"),t.exportFunction(l+"_toMontgomery"),t.exportFunction(l+"_inverse"),t.exportFunction(l+"_one"),t.exportFunction(l+"_load"),t.exportFunction(l+"_timesScalar"),Gt(t,l+"_exp",c,l+"_mul",l+"_square",s+"_copy",l+"_one"),t.exportFunction(l+"_exp"),t.exportFunction(l+"_batchInverse"),o.isPrime()&&(!function(){const e=t.addFunction(l+"_sqrt");e.addParam("n","i32"),e.addParam("r","i32"),e.addLocal("m","i32"),e.addLocal("i","i32"),e.addLocal("j","i32");const a=e.getCodeBuilder(),i=a.i32_const(g),o=a.i32_const(t.alloc(c)),n=a.i32_const(t.alloc(c)),r=a.i32_const(t.alloc(c)),s=a.i32_const(t.alloc(c)),d=a.i32_const(t.alloc(c));e.addCode(a.if(a.call(l+"_isZero",a.getLocal("n")),a.ret(a.call(l+"_zero",a.getLocal("r")))),a.setLocal("m",a.i32_const(y)),a.call(l+"_copy",a.i32_const(v),o),a.call(l+"_exp",a.getLocal("n"),a.i32_const(I),a.i32_const(c),n),a.call(l+"_exp",a.getLocal("n"),a.i32_const(x),a.i32_const(c),r),a.block(a.loop(a.br_if(1,a.call(l+"_eq",n,i)),a.call(l+"_square",n,s),a.setLocal("i",a.i32_const(1)),a.block(a.loop(a.br_if(1,a.call(l+"_eq",s,i)),a.call(l+"_square",s,s),a.setLocal("i",a.i32_add(a.getLocal("i"),a.i32_const(1))),a.br(0))),a.call(l+"_copy",o,d),a.setLocal("j",a.i32_sub(a.i32_sub(a.getLocal("m"),a.getLocal("i")),a.i32_const(1))),a.block(a.loop(a.br_if(1,a.i32_eqz(a.getLocal("j"))),a.call(l+"_square",d,d),a.setLocal("j",a.i32_sub(a.getLocal("j"),a.i32_const(1))),a.br(0))),a.setLocal("m",a.getLocal("i")),a.call(l+"_square",d,o),a.call(l+"_mul",n,o,n),a.call(l+"_mul",r,d,r),a.br(0))),a.if(a.call(l+"_isNegative",r),a.call(l+"_neg",r,a.getLocal("r")),a.call(l+"_copy",r,a.getLocal("r"))))}(),function(){const e=t.addFunction(l+"_isSquare");e.addParam("n","i32"),e.setReturnType("i32");const a=e.getCodeBuilder(),i=a.i32_const(g),o=a.i32_const(t.alloc(c));e.addCode(a.if(a.call(l+"_isZero",a.getLocal("n")),a.ret(a.i32_const(1))),a.call(l+"_exp",a.getLocal("n"),a.i32_const(m),a.i32_const(c),o),a.call(l+"_eq",o,i))}(),t.exportFunction(l+"_sqrt"),t.exportFunction(l+"_isSquare")),t.exportFunction(l+"_batchToMontgomery"),t.exportFunction(l+"_batchFromMontgomery"),l},qt=function(t,e,a,i,o){const n=f(e),r=Math.floor((n.minus(1).bitLength()-1)/64)+1,c=8*r,l=a||"f1";if(t.modules[l])return l;t.modules[l]={n64:r};const s=o||"int",d=zt(t,n,i,s),u=t.modules[d].pR2,g=t.modules[d].pq,_=t.modules[d].pePlusOne;return function(){const e=t.alloc(c),a=t.addFunction(l+"_mul");a.addParam("x","i32"),a.addParam("y","i32"),a.addParam("r","i32");const i=a.getCodeBuilder();a.addCode(i.call(d+"_mul",i.getLocal("x"),i.getLocal("y"),i.i32_const(e))),a.addCode(i.call(d+"_mul",i.i32_const(e),i.i32_const(u),i.getLocal("r")))}(),function(){const e=t.addFunction(l+"_square");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(l+"_mul",a.getLocal("x"),a.getLocal("x"),a.getLocal("r")))}(),function(){const e=t.addFunction(l+"_inverse");e.addParam("x","i32"),e.addParam("r","i32");const a=e.getCodeBuilder();e.addCode(a.call(s+"_inverseMod",a.getLocal("x"),a.i32_const(g),a.getLocal("r")))}(),function(){const e=t.addFunction(l+"_isNegative");e.addParam("x","i32"),e.setReturnType("i32");const a=e.getCodeBuilder();e.addCode(a.call(s+"_gte",a.getLocal("x"),a.i32_const(_)))}(),t.exportFunction(d+"_add",l+"_add"),t.exportFunction(d+"_sub",l+"_sub"),t.exportFunction(d+"_neg",l+"_neg"),t.exportFunction(l+"_mul"),t.exportFunction(l+"_square"),t.exportFunction(l+"_inverse"),t.exportFunction(l+"_isNegative"),t.exportFunction(d+"_copy",l+"_copy"),t.exportFunction(d+"_zero",l+"_zero"),t.exportFunction(d+"_one",l+"_one"),t.exportFunction(d+"_isZero",l+"_isZero"),t.exportFunction(d+"_eq",l+"_eq"),l},Qt=function(t,e,a,i){if(t.modules[a])return a;const o=8*t.modules[i].n64,n=t.modules[i].q;return t.modules[a]={n64:2*t.modules[i].n64},function(){const e=t.addFunction(a+"_isZero");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.i32_and(n.call(i+"_isZero",r),n.call(i+"_isZero",c)))}(),function(){const e=t.addFunction(a+"_isOne");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.ret(n.i32_and(n.call(i+"_isOne",r),n.call(i+"_isZero",c))))}(),function(){const e=t.addFunction(a+"_zero");e.addParam("x","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.call(i+"_zero",r),n.call(i+"_zero",c))}(),function(){const e=t.addFunction(a+"_one");e.addParam("x","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.call(i+"_one",r),n.call(i+"_zero",c))}(),function(){const e=t.addFunction(a+"_copy");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_copy",r,l),n.call(i+"_copy",c,s))}(),function(){const n=t.addFunction(a+"_mul");n.addParam("x","i32"),n.addParam("y","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.getLocal("y"),d=r.i32_add(r.getLocal("y"),r.i32_const(o)),u=r.getLocal("r"),f=r.i32_add(r.getLocal("r"),r.i32_const(o)),g=r.i32_const(t.alloc(o)),_=r.i32_const(t.alloc(o)),p=r.i32_const(t.alloc(o)),h=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_mul",c,s,g),r.call(i+"_mul",l,d,_),r.call(i+"_add",c,l,p),r.call(i+"_add",s,d,h),r.call(i+"_mul",p,h,p),r.call(e,_,u),r.call(i+"_add",g,u,u),r.call(i+"_add",g,_,f),r.call(i+"_sub",p,f,f))}(),function(){const e=t.addFunction(a+"_mul1");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("y"),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_mul",r,l,s),n.call(i+"_mul",c,l,d))}(),function(){const n=t.addFunction(a+"_square");n.addParam("x","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.getLocal("r"),d=r.i32_add(r.getLocal("r"),r.i32_const(o)),u=r.i32_const(t.alloc(o)),f=r.i32_const(t.alloc(o)),g=r.i32_const(t.alloc(o)),_=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_mul",c,l,u),r.call(i+"_add",c,l,f),r.call(e,l,g),r.call(i+"_add",c,g,g),r.call(e,u,_),r.call(i+"_add",_,u,_),r.call(i+"_mul",f,g,s),r.call(i+"_sub",s,_,s),r.call(i+"_add",u,u,d))}(),function(){const e=t.addFunction(a+"_add");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("y"),s=n.i32_add(n.getLocal("y"),n.i32_const(o)),d=n.getLocal("r"),u=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_add",r,l,d),n.call(i+"_add",c,s,u))}(),function(){const e=t.addFunction(a+"_sub");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("y"),s=n.i32_add(n.getLocal("y"),n.i32_const(o)),d=n.getLocal("r"),u=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_sub",r,l,d),n.call(i+"_sub",c,s,u))}(),function(){const e=t.addFunction(a+"_neg");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_neg",r,l),n.call(i+"_neg",c,s))}(),function(){const e=t.addFunction(a+"_conjugate");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_copy",r,l),n.call(i+"_neg",c,s))}(),function(){const e=t.addFunction(a+"_toMontgomery");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_toMontgomery",r,l),n.call(i+"_toMontgomery",c,s))}(),function(){const e=t.addFunction(a+"_fromMontgomery");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_fromMontgomery",r,l),n.call(i+"_fromMontgomery",c,s))}(),function(){const e=t.addFunction(a+"_eq");e.addParam("x","i32"),e.addParam("y","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("y"),s=n.i32_add(n.getLocal("y"),n.i32_const(o));e.addCode(n.i32_and(n.call(i+"_eq",r,l),n.call(i+"_eq",c,s)))}(),function(){const n=t.addFunction(a+"_inverse");n.addParam("x","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.getLocal("r"),d=r.i32_add(r.getLocal("r"),r.i32_const(o)),u=r.i32_const(t.alloc(o)),f=r.i32_const(t.alloc(o)),g=r.i32_const(t.alloc(o)),_=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_square",c,u),r.call(i+"_square",l,f),r.call(e,f,g),r.call(i+"_sub",u,g,g),r.call(i+"_inverse",g,_),r.call(i+"_mul",c,_,s),r.call(i+"_mul",l,_,d),r.call(i+"_neg",d,d))}(),function(){const e=t.addFunction(a+"_timesScalar");e.addParam("x","i32"),e.addParam("scalar","i32"),e.addParam("scalarLen","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.getLocal("r"),s=n.i32_add(n.getLocal("r"),n.i32_const(o));e.addCode(n.call(i+"_timesScalar",r,n.getLocal("scalar"),n.getLocal("scalarLen"),l),n.call(i+"_timesScalar",c,n.getLocal("scalar"),n.getLocal("scalarLen"),s))}(),function(){const e=t.addFunction(a+"_sign");e.addParam("x","i32"),e.addLocal("s","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.setLocal("s",n.call(i+"_sign",c)),n.if(n.getLocal("s"),n.ret(n.getLocal("s"))),n.ret(n.call(i+"_sign",r)))}(),function(){const e=t.addFunction(a+"_isNegative");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o));e.addCode(n.if(n.call(i+"_isZero",c),n.ret(n.call(i+"_isNegative",r))),n.ret(n.call(i+"_isNegative",c)))}(),t.exportFunction(a+"_isZero"),t.exportFunction(a+"_isOne"),t.exportFunction(a+"_zero"),t.exportFunction(a+"_one"),t.exportFunction(a+"_copy"),t.exportFunction(a+"_mul"),t.exportFunction(a+"_mul1"),t.exportFunction(a+"_square"),t.exportFunction(a+"_add"),t.exportFunction(a+"_sub"),t.exportFunction(a+"_neg"),t.exportFunction(a+"_sign"),t.exportFunction(a+"_conjugate"),t.exportFunction(a+"_fromMontgomery"),t.exportFunction(a+"_toMontgomery"),t.exportFunction(a+"_eq"),t.exportFunction(a+"_inverse"),Pt(t,a),Gt(t,a+"_exp",2*o,a+"_mul",a+"_square",a+"_copy",a+"_one"),function(){const e=t.addFunction(a+"_sqrt");e.addParam("a","i32"),e.addParam("pr","i32");const r=e.getCodeBuilder(),c=r.i32_const(t.alloc(Bt(f(n).minus(f(3)).divide(4),o))),l=r.i32_const(t.alloc(Bt(f(n).minus(f(1)).divide(2),o))),s=r.getLocal("a"),d=r.i32_const(t.alloc(2*o)),u=r.i32_const(t.alloc(2*o)),g=r.i32_const(t.alloc(2*o)),_=t.alloc(2*o),p=r.i32_const(_),h=r.i32_const(_),m=r.i32_const(_+o),L=r.i32_const(t.alloc(2*o)),w=r.i32_const(t.alloc(2*o));e.addCode(r.call(a+"_one",p),r.call(a+"_neg",p,p),r.call(a+"_exp",s,c,r.i32_const(o),d),r.call(a+"_square",d,u),r.call(a+"_mul",s,u,u),r.call(a+"_conjugate",u,g),r.call(a+"_mul",g,u,g),r.if(r.call(a+"_eq",g,p),r.unreachable()),r.call(a+"_mul",d,s,L),r.if(r.call(a+"_eq",u,p),[...r.call(i+"_zero",h),...r.call(i+"_one",m),...r.call(a+"_mul",p,L,r.getLocal("pr"))],[...r.call(a+"_one",w),...r.call(a+"_add",w,u,w),...r.call(a+"_exp",w,l,r.i32_const(o),w),...r.call(a+"_mul",w,L,r.getLocal("pr"))]))}(),function(){const e=t.addFunction(a+"_isSquare");e.addParam("a","i32"),e.setReturnType("i32");const i=e.getCodeBuilder(),r=i.i32_const(t.alloc(Bt(f(n).minus(f(3)).divide(4),o))),c=i.getLocal("a"),l=i.i32_const(t.alloc(2*o)),s=i.i32_const(t.alloc(2*o)),d=i.i32_const(t.alloc(2*o)),u=t.alloc(2*o),g=i.i32_const(u);e.addCode(i.call(a+"_one",g),i.call(a+"_neg",g,g),i.call(a+"_exp",c,r,i.i32_const(o),l),i.call(a+"_square",l,s),i.call(a+"_mul",c,s,s),i.call(a+"_conjugate",s,d),i.call(a+"_mul",d,s,d),i.if(i.call(a+"_eq",d,g),i.ret(i.i32_const(0))),i.ret(i.i32_const(1)))}(),t.exportFunction(a+"_exp"),t.exportFunction(a+"_timesScalar"),t.exportFunction(a+"_batchInverse"),t.exportFunction(a+"_sqrt"),t.exportFunction(a+"_isSquare"),t.exportFunction(a+"_isNegative"),a},Mt=function(t,e,a,i){if(t.modules[a])return a;const o=8*t.modules[i].n64;return t.modules[a]={n64:3*t.modules[i].n64},function(){const e=t.addFunction(a+"_isZero");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.i32_and(n.i32_and(n.call(i+"_isZero",r),n.call(i+"_isZero",c)),n.call(i+"_isZero",l)))}(),function(){const e=t.addFunction(a+"_isOne");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.ret(n.i32_and(n.i32_and(n.call(i+"_isOne",r),n.call(i+"_isZero",c)),n.call(i+"_isZero",l))))}(),function(){const e=t.addFunction(a+"_zero");e.addParam("x","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.call(i+"_zero",r),n.call(i+"_zero",c),n.call(i+"_zero",l))}(),function(){const e=t.addFunction(a+"_one");e.addParam("x","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.call(i+"_one",r),n.call(i+"_zero",c),n.call(i+"_zero",l))}(),function(){const e=t.addFunction(a+"_copy");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o)),u=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_copy",r,s),n.call(i+"_copy",c,d),n.call(i+"_copy",l,u))}(),function(){const n=t.addFunction(a+"_mul");n.addParam("x","i32"),n.addParam("y","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.i32_add(r.getLocal("x"),r.i32_const(2*o)),d=r.getLocal("y"),u=r.i32_add(r.getLocal("y"),r.i32_const(o)),f=r.i32_add(r.getLocal("y"),r.i32_const(2*o)),g=r.getLocal("r"),_=r.i32_add(r.getLocal("r"),r.i32_const(o)),p=r.i32_add(r.getLocal("r"),r.i32_const(2*o)),h=r.i32_const(t.alloc(o)),m=r.i32_const(t.alloc(o)),L=r.i32_const(t.alloc(o)),w=r.i32_const(t.alloc(o)),b=r.i32_const(t.alloc(o)),y=r.i32_const(t.alloc(o)),A=r.i32_const(t.alloc(o)),I=r.i32_const(t.alloc(o)),C=r.i32_const(t.alloc(o)),v=r.i32_const(t.alloc(o)),F=r.i32_const(t.alloc(o)),x=r.i32_const(t.alloc(o)),E=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_mul",c,d,h),r.call(i+"_mul",l,u,m),r.call(i+"_mul",s,f,L),r.call(i+"_add",c,l,w),r.call(i+"_add",d,u,b),r.call(i+"_add",c,s,y),r.call(i+"_add",d,f,A),r.call(i+"_add",l,s,I),r.call(i+"_add",u,f,C),r.call(i+"_add",h,m,v),r.call(i+"_add",h,L,F),r.call(i+"_add",m,L,x),r.call(i+"_mul",I,C,g),r.call(i+"_sub",g,x,g),r.call(e,g,g),r.call(i+"_add",h,g,g),r.call(i+"_mul",w,b,_),r.call(i+"_sub",_,v,_),r.call(e,L,E),r.call(i+"_add",_,E,_),r.call(i+"_mul",y,A,p),r.call(i+"_sub",p,F,p),r.call(i+"_add",p,m,p))}(),function(){const n=t.addFunction(a+"_square");n.addParam("x","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.i32_add(r.getLocal("x"),r.i32_const(2*o)),d=r.getLocal("r"),u=r.i32_add(r.getLocal("r"),r.i32_const(o)),f=r.i32_add(r.getLocal("r"),r.i32_const(2*o)),g=r.i32_const(t.alloc(o)),_=r.i32_const(t.alloc(o)),p=r.i32_const(t.alloc(o)),h=r.i32_const(t.alloc(o)),m=r.i32_const(t.alloc(o)),L=r.i32_const(t.alloc(o)),w=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_square",c,g),r.call(i+"_mul",c,l,_),r.call(i+"_add",_,_,p),r.call(i+"_sub",c,l,h),r.call(i+"_add",h,s,h),r.call(i+"_square",h,h),r.call(i+"_mul",l,s,m),r.call(i+"_add",m,m,L),r.call(i+"_square",s,w),r.call(e,L,d),r.call(i+"_add",g,d,d),r.call(e,w,u),r.call(i+"_add",p,u,u),r.call(i+"_add",g,w,f),r.call(i+"_sub",L,f,f),r.call(i+"_add",h,f,f),r.call(i+"_add",p,f,f))}(),function(){const e=t.addFunction(a+"_add");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("y"),d=n.i32_add(n.getLocal("y"),n.i32_const(o)),u=n.i32_add(n.getLocal("y"),n.i32_const(2*o)),f=n.getLocal("r"),g=n.i32_add(n.getLocal("r"),n.i32_const(o)),_=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_add",r,s,f),n.call(i+"_add",c,d,g),n.call(i+"_add",l,u,_))}(),function(){const e=t.addFunction(a+"_sub");e.addParam("x","i32"),e.addParam("y","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("y"),d=n.i32_add(n.getLocal("y"),n.i32_const(o)),u=n.i32_add(n.getLocal("y"),n.i32_const(2*o)),f=n.getLocal("r"),g=n.i32_add(n.getLocal("r"),n.i32_const(o)),_=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_sub",r,s,f),n.call(i+"_sub",c,d,g),n.call(i+"_sub",l,u,_))}(),function(){const e=t.addFunction(a+"_neg");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o)),u=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_neg",r,s),n.call(i+"_neg",c,d),n.call(i+"_neg",l,u))}(),function(){const e=t.addFunction(a+"_sign");e.addParam("x","i32"),e.addLocal("s","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.setLocal("s",n.call(i+"_sign",l)),n.if(n.getLocal("s"),n.ret(n.getLocal("s"))),n.setLocal("s",n.call(i+"_sign",c)),n.if(n.getLocal("s"),n.ret(n.getLocal("s"))),n.ret(n.call(i+"_sign",r)))}(),function(){const e=t.addFunction(a+"_toMontgomery");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o)),u=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_toMontgomery",r,s),n.call(i+"_toMontgomery",c,d),n.call(i+"_toMontgomery",l,u))}(),function(){const e=t.addFunction(a+"_fromMontgomery");e.addParam("x","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o)),u=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_fromMontgomery",r,s),n.call(i+"_fromMontgomery",c,d),n.call(i+"_fromMontgomery",l,u))}(),function(){const e=t.addFunction(a+"_eq");e.addParam("x","i32"),e.addParam("y","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("y"),d=n.i32_add(n.getLocal("y"),n.i32_const(o)),u=n.i32_add(n.getLocal("y"),n.i32_const(2*o));e.addCode(n.i32_and(n.i32_and(n.call(i+"_eq",r,s),n.call(i+"_eq",c,d)),n.call(i+"_eq",l,u)))}(),function(){const n=t.addFunction(a+"_inverse");n.addParam("x","i32"),n.addParam("r","i32");const r=n.getCodeBuilder(),c=r.getLocal("x"),l=r.i32_add(r.getLocal("x"),r.i32_const(o)),s=r.i32_add(r.getLocal("x"),r.i32_const(2*o)),d=r.getLocal("r"),u=r.i32_add(r.getLocal("r"),r.i32_const(o)),f=r.i32_add(r.getLocal("r"),r.i32_const(2*o)),g=r.i32_const(t.alloc(o)),_=r.i32_const(t.alloc(o)),p=r.i32_const(t.alloc(o)),h=r.i32_const(t.alloc(o)),m=r.i32_const(t.alloc(o)),L=r.i32_const(t.alloc(o)),w=r.i32_const(t.alloc(o)),b=r.i32_const(t.alloc(o)),y=r.i32_const(t.alloc(o)),A=r.i32_const(t.alloc(o)),I=r.i32_const(t.alloc(o));n.addCode(r.call(i+"_square",c,g),r.call(i+"_square",l,_),r.call(i+"_square",s,p),r.call(i+"_mul",c,l,h),r.call(i+"_mul",c,s,m),r.call(i+"_mul",l,s,L),r.call(e,L,w),r.call(i+"_sub",g,w,w),r.call(e,p,b),r.call(i+"_sub",b,h,b),r.call(i+"_sub",_,m,y),r.call(i+"_mul",s,b,A),r.call(i+"_mul",l,y,I),r.call(i+"_add",A,I,A),r.call(e,A,A),r.call(i+"_mul",c,w,I),r.call(i+"_add",I,A,A),r.call(i+"_inverse",A,A),r.call(i+"_mul",A,w,d),r.call(i+"_mul",A,b,u),r.call(i+"_mul",A,y,f))}(),function(){const e=t.addFunction(a+"_timesScalar");e.addParam("x","i32"),e.addParam("scalar","i32"),e.addParam("scalarLen","i32"),e.addParam("r","i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o)),s=n.getLocal("r"),d=n.i32_add(n.getLocal("r"),n.i32_const(o)),u=n.i32_add(n.getLocal("r"),n.i32_const(2*o));e.addCode(n.call(i+"_timesScalar",r,n.getLocal("scalar"),n.getLocal("scalarLen"),s),n.call(i+"_timesScalar",c,n.getLocal("scalar"),n.getLocal("scalarLen"),d),n.call(i+"_timesScalar",l,n.getLocal("scalar"),n.getLocal("scalarLen"),u))}(),function(){const e=t.addFunction(a+"_isNegative");e.addParam("x","i32"),e.setReturnType("i32");const n=e.getCodeBuilder(),r=n.getLocal("x"),c=n.i32_add(n.getLocal("x"),n.i32_const(o)),l=n.i32_add(n.getLocal("x"),n.i32_const(2*o));e.addCode(n.if(n.call(i+"_isZero",l),n.if(n.call(i+"_isZero",c),n.ret(n.call(i+"_isNegative",r)),n.ret(n.call(i+"_isNegative",c)))),n.ret(n.call(i+"_isNegative",l)))}(),t.exportFunction(a+"_isZero"),t.exportFunction(a+"_isOne"),t.exportFunction(a+"_zero"),t.exportFunction(a+"_one"),t.exportFunction(a+"_copy"),t.exportFunction(a+"_mul"),t.exportFunction(a+"_square"),t.exportFunction(a+"_add"),t.exportFunction(a+"_sub"),t.exportFunction(a+"_neg"),t.exportFunction(a+"_sign"),t.exportFunction(a+"_fromMontgomery"),t.exportFunction(a+"_toMontgomery"),t.exportFunction(a+"_eq"),t.exportFunction(a+"_inverse"),Pt(t,a),Gt(t,a+"_exp",3*o,a+"_mul",a+"_square",a+"_copy",a+"_one"),t.exportFunction(a+"_exp"),t.exportFunction(a+"_timesScalar"),t.exportFunction(a+"_batchInverse"),t.exportFunction(a+"_isNegative"),a},kt=function(t,e,a,i,o,n,r,c){const l=t.addFunction(e);l.addParam("base","i32"),l.addParam("scalar","i32"),l.addParam("scalarLength","i32"),l.addParam("r","i32"),l.addLocal("old0","i32"),l.addLocal("nbits","i32"),l.addLocal("i","i32"),l.addLocal("last","i32"),l.addLocal("cur","i32"),l.addLocal("carry","i32"),l.addLocal("p","i32");const s=l.getCodeBuilder(),d=s.i32_const(t.alloc(a));function u(t){return s.i32_and(s.i32_shr_u(s.i32_load(s.i32_add(s.getLocal("scalar"),s.i32_and(s.i32_shr_u(t,s.i32_const(3)),s.i32_const(4294967292)))),s.i32_and(t,s.i32_const(31))),s.i32_const(1))}function f(t){return[...s.i32_store8(s.getLocal("p"),s.i32_const(t)),...s.setLocal("p",s.i32_add(s.getLocal("p"),s.i32_const(1)))]}l.addCode(s.if(s.i32_eqz(s.getLocal("scalarLength")),[...s.call(c,s.getLocal("r")),...s.ret([])]),s.setLocal("nbits",s.i32_shl(s.getLocal("scalarLength"),s.i32_const(3))),s.setLocal("old0",s.i32_load(s.i32_const(0))),s.setLocal("p",s.getLocal("old0")),s.i32_store(s.i32_const(0),s.i32_and(s.i32_add(s.i32_add(s.getLocal("old0"),s.i32_const(32)),s.getLocal("nbits")),s.i32_const(4294967288))),s.setLocal("i",s.i32_const(1)),s.setLocal("last",u(s.i32_const(0))),s.setLocal("carry",s.i32_const(0)),s.block(s.loop(s.br_if(1,s.i32_eq(s.getLocal("i"),s.getLocal("nbits"))),s.setLocal("cur",u(s.getLocal("i"))),s.if(s.getLocal("last"),s.if(s.getLocal("cur"),s.if(s.getLocal("carry"),[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(1)),...f(1)],[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(1)),...f(255)]),s.if(s.getLocal("carry"),[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(1)),...f(255)],[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(0)),...f(1)])),s.if(s.getLocal("cur"),s.if(s.getLocal("carry"),[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(1)),...f(0)],[...s.setLocal("last",s.i32_const(1)),...s.setLocal("carry",s.i32_const(0)),...f(0)]),s.if(s.getLocal("carry"),[...s.setLocal("last",s.i32_const(1)),...s.setLocal("carry",s.i32_const(0)),...f(0)],[...s.setLocal("last",s.i32_const(0)),...s.setLocal("carry",s.i32_const(0)),...f(0)]))),s.setLocal("i",s.i32_add(s.getLocal("i"),s.i32_const(1))),s.br(0))),s.if(s.getLocal("last"),s.if(s.getLocal("carry"),[...f(255),...f(0),...f(1)],[...f(1)]),s.if(s.getLocal("carry"),[...f(0),...f(1)])),s.setLocal("p",s.i32_sub(s.getLocal("p"),s.i32_const(1))),s.call(r,s.getLocal("base"),d),s.call(c,s.getLocal("r")),s.block(s.loop(s.call(o,s.getLocal("r"),s.getLocal("r")),s.setLocal("cur",s.i32_load8_u(s.getLocal("p"))),s.if(s.getLocal("cur"),s.if(s.i32_eq(s.getLocal("cur"),s.i32_const(1)),s.call(i,s.getLocal("r"),d,s.getLocal("r")),s.call(n,s.getLocal("r"),d,s.getLocal("r")))),s.br_if(1,s.i32_eq(s.getLocal("old0"),s.getLocal("p"))),s.setLocal("p",s.i32_sub(s.getLocal("p"),s.i32_const(1))),s.br(0))),s.i32_store(s.i32_const(0),s.getLocal("old0")))},Rt=function(t,e,a,i,o){const n=8*t.modules[e].n64;function r(){const i=t.addFunction(a);i.addParam("pBases","i32"),i.addParam("pScalars","i32"),i.addParam("scalarSize","i32"),i.addParam("n","i32"),i.addParam("pr","i32"),i.addLocal("chunkSize","i32"),i.addLocal("nChunks","i32"),i.addLocal("itScalar","i32"),i.addLocal("endScalar","i32"),i.addLocal("itBase","i32"),i.addLocal("itBit","i32"),i.addLocal("i","i32"),i.addLocal("j","i32"),i.addLocal("nTable","i32"),i.addLocal("pTable","i32"),i.addLocal("idx","i32"),i.addLocal("pIdxTable","i32");const o=i.getCodeBuilder(),r=o.i32_const(t.alloc(n)),c=t.alloc([17,17,17,17,17,17,17,17,17,17,16,16,15,14,13,13,12,11,10,9,8,7,7,6,5,4,3,2,1,1,1,1]);i.addCode(o.call(e+"_zero",o.getLocal("pr")),o.if(o.i32_eqz(o.getLocal("n")),o.ret([])),o.setLocal("chunkSize",o.i32_load8_u(o.i32_clz(o.getLocal("n")),c)),o.setLocal("nChunks",o.i32_add(o.i32_div_u(o.i32_sub(o.i32_shl(o.getLocal("scalarSize"),o.i32_const(3)),o.i32_const(1)),o.getLocal("chunkSize")),o.i32_const(1))),o.setLocal("itBit",o.i32_mul(o.i32_sub(o.getLocal("nChunks"),o.i32_const(1)),o.getLocal("chunkSize"))),o.block(o.loop(o.br_if(1,o.i32_lt_s(o.getLocal("itBit"),o.i32_const(0))),o.if(o.i32_eqz(o.call(e+"_isZero",o.getLocal("pr"))),[...o.setLocal("j",o.i32_const(0)),...o.block(o.loop(o.br_if(1,o.i32_eq(o.getLocal("j"),o.getLocal("chunkSize"))),o.call(e+"_double",o.getLocal("pr"),o.getLocal("pr")),o.setLocal("j",o.i32_add(o.getLocal("j"),o.i32_const(1))),o.br(0)))]),o.call(a+"_chunk",o.getLocal("pBases"),o.getLocal("pScalars"),o.getLocal("scalarSize"),o.getLocal("n"),o.getLocal("itBit"),o.getLocal("chunkSize"),r),o.call(e+"_add",o.getLocal("pr"),r,o.getLocal("pr")),o.setLocal("itBit",o.i32_sub(o.getLocal("itBit"),o.getLocal("chunkSize"))),o.br(0))))}!function(){const e=t.addFunction(a+"_getChunk");e.addParam("pScalar","i32"),e.addParam("scalarSize","i32"),e.addParam("startBit","i32"),e.addParam("chunkSize","i32"),e.addLocal("bitsToEnd","i32"),e.addLocal("mask","i32"),e.setReturnType("i32");const i=e.getCodeBuilder();e.addCode(i.setLocal("bitsToEnd",i.i32_sub(i.i32_mul(i.getLocal("scalarSize"),i.i32_const(8)),i.getLocal("startBit"))),i.if(i.i32_gt_s(i.getLocal("chunkSize"),i.getLocal("bitsToEnd")),i.setLocal("mask",i.i32_sub(i.i32_shl(i.i32_const(1),i.getLocal("bitsToEnd")),i.i32_const(1))),i.setLocal("mask",i.i32_sub(i.i32_shl(i.i32_const(1),i.getLocal("chunkSize")),i.i32_const(1)))),i.i32_and(i.i32_shr_u(i.i32_load(i.i32_add(i.getLocal("pScalar"),i.i32_shr_u(i.getLocal("startBit"),i.i32_const(3))),0,0),i.i32_and(i.getLocal("startBit"),i.i32_const(7))),i.getLocal("mask")))}(),function(){const i=t.addFunction(a+"_reduceTable");i.addParam("pTable","i32"),i.addParam("p","i32"),i.addLocal("half","i32"),i.addLocal("it1","i32"),i.addLocal("it2","i32"),i.addLocal("pAcc","i32");const o=i.getCodeBuilder();i.addCode(o.if(o.i32_eq(o.getLocal("p"),o.i32_const(1)),o.ret([])),o.setLocal("half",o.i32_shl(o.i32_const(1),o.i32_sub(o.getLocal("p"),o.i32_const(1)))),o.setLocal("it1",o.getLocal("pTable")),o.setLocal("it2",o.i32_add(o.getLocal("pTable"),o.i32_mul(o.getLocal("half"),o.i32_const(n)))),o.setLocal("pAcc",o.i32_sub(o.getLocal("it2"),o.i32_const(n))),o.block(o.loop(o.br_if(1,o.i32_eq(o.getLocal("it1"),o.getLocal("pAcc"))),o.call(e+"_add",o.getLocal("it1"),o.getLocal("it2"),o.getLocal("it1")),o.call(e+"_add",o.getLocal("pAcc"),o.getLocal("it2"),o.getLocal("pAcc")),o.setLocal("it1",o.i32_add(o.getLocal("it1"),o.i32_const(n))),o.setLocal("it2",o.i32_add(o.getLocal("it2"),o.i32_const(n))),o.br(0))),o.call(a+"_reduceTable",o.getLocal("pTable"),o.i32_sub(o.getLocal("p"),o.i32_const(1))),o.setLocal("p",o.i32_sub(o.getLocal("p"),o.i32_const(1))),o.block(o.loop(o.br_if(1,o.i32_eqz(o.getLocal("p"))),o.call(e+"_double",o.getLocal("pAcc"),o.getLocal("pAcc")),o.setLocal("p",o.i32_sub(o.getLocal("p"),o.i32_const(1))),o.br(0))),o.call(e+"_add",o.getLocal("pTable"),o.getLocal("pAcc"),o.getLocal("pTable")))}(),function(){const r=t.addFunction(a+"_chunk");r.addParam("pBases","i32"),r.addParam("pScalars","i32"),r.addParam("scalarSize","i32"),r.addParam("n","i32"),r.addParam("startBit","i32"),r.addParam("chunkSize","i32"),r.addParam("pr","i32"),r.addLocal("nChunks","i32"),r.addLocal("itScalar","i32"),r.addLocal("endScalar","i32"),r.addLocal("itBase","i32"),r.addLocal("i","i32"),r.addLocal("j","i32"),r.addLocal("nTable","i32"),r.addLocal("pTable","i32"),r.addLocal("idx","i32"),r.addLocal("pIdxTable","i32");const c=r.getCodeBuilder();r.addCode(c.if(c.i32_eqz(c.getLocal("n")),[...c.call(e+"_zero",c.getLocal("pr")),...c.ret([])]),c.setLocal("nTable",c.i32_shl(c.i32_const(1),c.getLocal("chunkSize"))),c.setLocal("pTable",c.i32_load(c.i32_const(0))),c.i32_store(c.i32_const(0),c.i32_add(c.getLocal("pTable"),c.i32_mul(c.getLocal("nTable"),c.i32_const(n)))),c.setLocal("j",c.i32_const(0)),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("j"),c.getLocal("nTable"))),c.call(e+"_zero",c.i32_add(c.getLocal("pTable"),c.i32_mul(c.getLocal("j"),c.i32_const(n)))),c.setLocal("j",c.i32_add(c.getLocal("j"),c.i32_const(1))),c.br(0))),c.setLocal("itBase",c.getLocal("pBases")),c.setLocal("itScalar",c.getLocal("pScalars")),c.setLocal("endScalar",c.i32_add(c.getLocal("pScalars"),c.i32_mul(c.getLocal("n"),c.getLocal("scalarSize")))),c.block(c.loop(c.br_if(1,c.i32_eq(c.getLocal("itScalar"),c.getLocal("endScalar"))),c.setLocal("idx",c.call(a+"_getChunk",c.getLocal("itScalar"),c.getLocal("scalarSize"),c.getLocal("startBit"),c.getLocal("chunkSize"))),c.if(c.getLocal("idx"),[...c.setLocal("pIdxTable",c.i32_add(c.getLocal("pTable"),c.i32_mul(c.i32_sub(c.getLocal("idx"),c.i32_const(1)),c.i32_const(n)))),...c.call(i,c.getLocal("pIdxTable"),c.getLocal("itBase"),c.getLocal("pIdxTable"))]),c.setLocal("itScalar",c.i32_add(c.getLocal("itScalar"),c.getLocal("scalarSize"))),c.setLocal("itBase",c.i32_add(c.getLocal("itBase"),c.i32_const(o))),c.br(0))),c.call(a+"_reduceTable",c.getLocal("pTable"),c.getLocal("chunkSize")),c.call(e+"_copy",c.getLocal("pTable"),c.getLocal("pr")),c.i32_store(c.i32_const(0),c.getLocal("pTable")))}(),r(),t.exportFunction(a),t.exportFunction(a+"_chunk")},Nt=function(t,e,a,i){const o=t.modules[a].n64,n=8*o;if(t.modules[e])return e;return t.modules[e]={n64:3*o},function(){const i=t.addFunction(e+"_isZeroAffine");i.addParam("p1","i32"),i.setReturnType("i32");const o=i.getCodeBuilder();i.addCode(o.i32_and(o.call(a+"_isZero",o.getLocal("p1")),o.call(a+"_isZero",o.i32_add(o.getLocal("p1"),o.i32_const(n)))))}(),function(){const i=t.addFunction(e+"_isZero");i.addParam("p1","i32"),i.setReturnType("i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_isZero",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))))}(),function(){const i=t.addFunction(e+"_zeroAffine");i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_zero",o.getLocal("pr"))),i.addCode(o.call(a+"_zero",o.i32_add(o.getLocal("pr"),o.i32_const(n))))}(),function(){const i=t.addFunction(e+"_zero");i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_zero",o.getLocal("pr"))),i.addCode(o.call(a+"_one",o.i32_add(o.getLocal("pr"),o.i32_const(n)))),i.addCode(o.call(a+"_zero",o.i32_add(o.getLocal("pr"),o.i32_const(2*n))))}(),function(){const a=t.addFunction(e+"_copyAffine");a.addParam("ps","i32"),a.addParam("pd","i32");const i=a.getCodeBuilder();for(let t=0;t<2*o;t++)a.addCode(i.i64_store(i.getLocal("pd"),8*t,i.i64_load(i.getLocal("ps"),8*t)))}(),function(){const a=t.addFunction(e+"_copy");a.addParam("ps","i32"),a.addParam("pd","i32");const i=a.getCodeBuilder();for(let t=0;t<3*o;t++)a.addCode(i.i64_store(i.getLocal("pd"),8*t,i.i64_load(i.getLocal("ps"),8*t)))}(),function(){const i=t.addFunction(e+"_toJacobian");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.getLocal("pr"),s=o.i32_add(o.getLocal("pr"),o.i32_const(n)),d=o.i32_add(o.getLocal("pr"),o.i32_const(2*n));i.addCode(o.if(o.call(e+"_isZeroAffine",o.getLocal("p1")),o.call(e+"_zero",o.getLocal("pr")),[...o.call(a+"_one",d),...o.call(a+"_copy",c,s),...o.call(a+"_copy",r,l)]))}(),function(){const i=t.addFunction(e+"_eqAffine");i.addParam("p1","i32"),i.addParam("p2","i32"),i.setReturnType("i32"),i.addLocal("z1","i32");const o=i.getCodeBuilder();i.addCode(o.ret(o.i32_and(o.call(a+"_eq",o.getLocal("p1"),o.getLocal("p2")),o.call(a+"_eq",o.i32_add(o.getLocal("p1"),o.i32_const(n)),o.i32_add(o.getLocal("p2"),o.i32_const(n))))))}(),function(){const i=t.addFunction(e+"_eqMixed");i.addParam("p1","i32"),i.addParam("p2","i32"),i.setReturnType("i32"),i.addLocal("z1","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n));i.addCode(o.setLocal("z1",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))));const l=o.getLocal("z1"),s=o.getLocal("p2"),d=o.i32_add(o.getLocal("p2"),o.i32_const(n)),u=o.i32_const(t.alloc(n)),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),o.ret(o.call(e+"_isZeroAffine",o.getLocal("p2")))),o.if(o.call(e+"_isZeroAffine",o.getLocal("p2")),o.ret(o.i32_const(0))),o.if(o.call(a+"_isOne",l),o.ret(o.call(e+"_eqAffine",o.getLocal("p1"),o.getLocal("p2")))),o.call(a+"_square",l,u),o.call(a+"_mul",s,u,f),o.call(a+"_mul",l,u,g),o.call(a+"_mul",d,g,_),o.if(o.call(a+"_eq",r,f),o.if(o.call(a+"_eq",c,_),o.ret(o.i32_const(1)))),o.ret(o.i32_const(0)))}(),function(){const i=t.addFunction(e+"_eq");i.addParam("p1","i32"),i.addParam("p2","i32"),i.setReturnType("i32"),i.addLocal("z1","i32"),i.addLocal("z2","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n));i.addCode(o.setLocal("z1",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))));const l=o.getLocal("z1"),s=o.getLocal("p2"),d=o.i32_add(o.getLocal("p2"),o.i32_const(n));i.addCode(o.setLocal("z2",o.i32_add(o.getLocal("p2"),o.i32_const(2*n))));const u=o.getLocal("z2"),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n)),m=o.i32_const(t.alloc(n)),L=o.i32_const(t.alloc(n)),w=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),o.ret(o.call(e+"_isZero",o.getLocal("p2")))),o.if(o.call(e+"_isZero",o.getLocal("p2")),o.ret(o.i32_const(0))),o.if(o.call(a+"_isOne",l),o.ret(o.call(e+"_eqMixed",o.getLocal("p2"),o.getLocal("p1")))),o.if(o.call(a+"_isOne",u),o.ret(o.call(e+"_eqMixed",o.getLocal("p1"),o.getLocal("p2")))),o.call(a+"_square",l,f),o.call(a+"_square",u,g),o.call(a+"_mul",r,g,_),o.call(a+"_mul",s,f,p),o.call(a+"_mul",l,f,h),o.call(a+"_mul",u,g,m),o.call(a+"_mul",c,m,L),o.call(a+"_mul",d,h,w),o.if(o.call(a+"_eq",_,p),o.if(o.call(a+"_eq",L,w),o.ret(o.i32_const(1)))),o.ret(o.i32_const(0)))}(),function(){const i=t.addFunction(e+"_doubleAffine");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.getLocal("pr"),s=o.i32_add(o.getLocal("pr"),o.i32_const(n)),d=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),u=o.i32_const(t.alloc(n)),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZeroAffine",o.getLocal("p1")),[...o.call(e+"_toJacobian",o.getLocal("p1"),o.getLocal("pr")),...o.ret([])]),o.call(a+"_square",r,u),o.call(a+"_square",c,f),o.call(a+"_square",f,g),o.call(a+"_add",r,f,_),o.call(a+"_square",_,_),o.call(a+"_sub",_,u,_),o.call(a+"_sub",_,g,_),o.call(a+"_add",_,_,_),o.call(a+"_add",u,u,p),o.call(a+"_add",p,u,p),o.call(a+"_add",c,c,d),o.call(a+"_square",p,l),o.call(a+"_sub",l,_,l),o.call(a+"_sub",l,_,l),o.call(a+"_add",g,g,h),o.call(a+"_add",h,h,h),o.call(a+"_add",h,h,h),o.call(a+"_sub",_,l,s),o.call(a+"_mul",s,p,s),o.call(a+"_sub",s,h,s))}(),function(){const i=t.addFunction(e+"_double");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.i32_add(o.getLocal("p1"),o.i32_const(2*n)),s=o.getLocal("pr"),d=o.i32_add(o.getLocal("pr"),o.i32_const(n)),u=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n)),m=o.i32_const(t.alloc(n)),L=o.i32_const(t.alloc(n)),w=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),[...o.call(e+"_copy",o.getLocal("p1"),o.getLocal("pr")),...o.ret([])]),o.if(o.call(a+"_isOne",l),[...o.ret(o.call(e+"_doubleAffine",o.getLocal("p1"),o.getLocal("pr"))),...o.ret([])]),o.call(a+"_square",r,f),o.call(a+"_square",c,g),o.call(a+"_square",g,_),o.call(a+"_add",r,g,p),o.call(a+"_square",p,p),o.call(a+"_sub",p,f,p),o.call(a+"_sub",p,_,p),o.call(a+"_add",p,p,p),o.call(a+"_add",f,f,h),o.call(a+"_add",h,f,h),o.call(a+"_square",h,m),o.call(a+"_mul",c,l,L),o.call(a+"_add",p,p,s),o.call(a+"_sub",m,s,s),o.call(a+"_add",_,_,w),o.call(a+"_add",w,w,w),o.call(a+"_add",w,w,w),o.call(a+"_sub",p,s,d),o.call(a+"_mul",d,h,d),o.call(a+"_sub",d,w,d),o.call(a+"_add",L,L,u))}(),function(){const i=t.addFunction(e+"_addAffine");i.addParam("p1","i32"),i.addParam("p2","i32"),i.addParam("pr","i32"),i.addLocal("z1","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n));i.addCode(o.setLocal("z1",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))));const l=o.getLocal("p2"),s=o.i32_add(o.getLocal("p2"),o.i32_const(n)),d=o.getLocal("pr"),u=o.i32_add(o.getLocal("pr"),o.i32_const(n)),f=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n)),m=o.i32_const(t.alloc(n)),L=o.i32_const(t.alloc(n)),w=o.i32_const(t.alloc(n)),b=o.i32_const(t.alloc(n)),y=o.i32_const(t.alloc(n)),A=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZeroAffine",o.getLocal("p1")),[...o.call(e+"_copyAffine",o.getLocal("p2"),o.getLocal("pr")),...o.call(a+"_one",o.i32_add(o.getLocal("pr"),o.i32_const(2*n))),...o.ret([])]),o.if(o.call(e+"_isZeroAffine",o.getLocal("p2")),[...o.call(e+"_copyAffine",o.getLocal("p1"),o.getLocal("pr")),...o.call(a+"_one",o.i32_add(o.getLocal("pr"),o.i32_const(2*n))),...o.ret([])]),o.if(o.call(a+"_eq",r,l),o.if(o.call(a+"_eq",c,s),[...o.call(e+"_doubleAffine",o.getLocal("p2"),o.getLocal("pr")),...o.ret([])])),o.call(a+"_sub",l,r,g),o.call(a+"_sub",s,c,p),o.call(a+"_square",g,_),o.call(a+"_add",_,_,h),o.call(a+"_add",h,h,h),o.call(a+"_mul",g,h,m),o.call(a+"_add",p,p,L),o.call(a+"_mul",r,h,b),o.call(a+"_square",L,w),o.call(a+"_add",b,b,y),o.call(a+"_sub",w,m,d),o.call(a+"_sub",d,y,d),o.call(a+"_mul",c,m,A),o.call(a+"_add",A,A,A),o.call(a+"_sub",b,d,u),o.call(a+"_mul",u,L,u),o.call(a+"_sub",u,A,u),o.call(a+"_add",g,g,f))}(),function(){const i=t.addFunction(e+"_addMixed");i.addParam("p1","i32"),i.addParam("p2","i32"),i.addParam("pr","i32"),i.addLocal("z1","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n));i.addCode(o.setLocal("z1",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))));const l=o.getLocal("z1"),s=o.getLocal("p2"),d=o.i32_add(o.getLocal("p2"),o.i32_const(n)),u=o.getLocal("pr"),f=o.i32_add(o.getLocal("pr"),o.i32_const(n)),g=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),_=o.i32_const(t.alloc(n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n)),m=o.i32_const(t.alloc(n)),L=o.i32_const(t.alloc(n)),w=o.i32_const(t.alloc(n)),b=o.i32_const(t.alloc(n)),y=o.i32_const(t.alloc(n)),A=o.i32_const(t.alloc(n)),I=o.i32_const(t.alloc(n)),C=o.i32_const(t.alloc(n)),v=o.i32_const(t.alloc(n)),F=o.i32_const(t.alloc(n)),x=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),[...o.call(e+"_copyAffine",o.getLocal("p2"),o.getLocal("pr")),...o.call(a+"_one",o.i32_add(o.getLocal("pr"),o.i32_const(2*n))),...o.ret([])]),o.if(o.call(e+"_isZeroAffine",o.getLocal("p2")),[...o.call(e+"_copy",o.getLocal("p1"),o.getLocal("pr")),...o.ret([])]),o.if(o.call(a+"_isOne",l),[...o.call(e+"_addAffine",r,s,u),...o.ret([])]),o.call(a+"_square",l,_),o.call(a+"_mul",s,_,p),o.call(a+"_mul",l,_,h),o.call(a+"_mul",d,h,m),o.if(o.call(a+"_eq",r,p),o.if(o.call(a+"_eq",c,m),[...o.call(e+"_doubleAffine",o.getLocal("p2"),o.getLocal("pr")),...o.ret([])])),o.call(a+"_sub",p,r,L),o.call(a+"_sub",m,c,b),o.call(a+"_square",L,w),o.call(a+"_add",w,w,y),o.call(a+"_add",y,y,y),o.call(a+"_mul",L,y,A),o.call(a+"_add",b,b,I),o.call(a+"_mul",r,y,v),o.call(a+"_square",I,C),o.call(a+"_add",v,v,F),o.call(a+"_sub",C,A,u),o.call(a+"_sub",u,F,u),o.call(a+"_mul",c,A,x),o.call(a+"_add",x,x,x),o.call(a+"_sub",v,u,f),o.call(a+"_mul",f,I,f),o.call(a+"_sub",f,x,f),o.call(a+"_add",l,L,g),o.call(a+"_square",g,g),o.call(a+"_sub",g,_,g),o.call(a+"_sub",g,w,g))}(),function(){const i=t.addFunction(e+"_add");i.addParam("p1","i32"),i.addParam("p2","i32"),i.addParam("pr","i32"),i.addLocal("z1","i32"),i.addLocal("z2","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n));i.addCode(o.setLocal("z1",o.i32_add(o.getLocal("p1"),o.i32_const(2*n))));const l=o.getLocal("z1"),s=o.getLocal("p2"),d=o.i32_add(o.getLocal("p2"),o.i32_const(n));i.addCode(o.setLocal("z2",o.i32_add(o.getLocal("p2"),o.i32_const(2*n))));const u=o.getLocal("z2"),f=o.getLocal("pr"),g=o.i32_add(o.getLocal("pr"),o.i32_const(n)),_=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),p=o.i32_const(t.alloc(n)),h=o.i32_const(t.alloc(n)),m=o.i32_const(t.alloc(n)),L=o.i32_const(t.alloc(n)),w=o.i32_const(t.alloc(n)),b=o.i32_const(t.alloc(n)),y=o.i32_const(t.alloc(n)),A=o.i32_const(t.alloc(n)),I=o.i32_const(t.alloc(n)),C=o.i32_const(t.alloc(n)),v=o.i32_const(t.alloc(n)),F=o.i32_const(t.alloc(n)),x=o.i32_const(t.alloc(n)),E=o.i32_const(t.alloc(n)),B=o.i32_const(t.alloc(n)),S=o.i32_const(t.alloc(n)),G=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),[...o.call(e+"_copy",o.getLocal("p2"),o.getLocal("pr")),...o.ret([])]),o.if(o.call(e+"_isZero",o.getLocal("p2")),[...o.call(e+"_copy",o.getLocal("p1"),o.getLocal("pr")),...o.ret([])]),o.if(o.call(a+"_isOne",l),[...o.call(e+"_addMixed",s,r,f),...o.ret([])]),o.if(o.call(a+"_isOne",u),[...o.call(e+"_addMixed",r,s,f),...o.ret([])]),o.call(a+"_square",l,p),o.call(a+"_square",u,h),o.call(a+"_mul",r,h,m),o.call(a+"_mul",s,p,L),o.call(a+"_mul",l,p,w),o.call(a+"_mul",u,h,b),o.call(a+"_mul",c,b,y),o.call(a+"_mul",d,w,A),o.if(o.call(a+"_eq",m,L),o.if(o.call(a+"_eq",y,A),[...o.call(e+"_double",o.getLocal("p1"),o.getLocal("pr")),...o.ret([])])),o.call(a+"_sub",L,m,I),o.call(a+"_sub",A,y,C),o.call(a+"_add",I,I,v),o.call(a+"_square",v,v),o.call(a+"_mul",I,v,F),o.call(a+"_add",C,C,x),o.call(a+"_mul",m,v,B),o.call(a+"_square",x,E),o.call(a+"_add",B,B,S),o.call(a+"_sub",E,F,f),o.call(a+"_sub",f,S,f),o.call(a+"_mul",y,F,G),o.call(a+"_add",G,G,G),o.call(a+"_sub",B,f,g),o.call(a+"_mul",g,x,g),o.call(a+"_sub",g,G,g),o.call(a+"_add",l,u,_),o.call(a+"_square",_,_),o.call(a+"_sub",_,p,_),o.call(a+"_sub",_,h,_),o.call(a+"_mul",_,I,_))}(),function(){const i=t.addFunction(e+"_negAffine");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.getLocal("pr"),s=o.i32_add(o.getLocal("pr"),o.i32_const(n));i.addCode(o.call(a+"_copy",r,l),o.call(a+"_neg",c,s))}(),function(){const i=t.addFunction(e+"_neg");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.i32_add(o.getLocal("p1"),o.i32_const(2*n)),s=o.getLocal("pr"),d=o.i32_add(o.getLocal("pr"),o.i32_const(n)),u=o.i32_add(o.getLocal("pr"),o.i32_const(2*n));i.addCode(o.call(a+"_copy",r,s),o.call(a+"_neg",c,d),o.call(a+"_copy",l,u))}(),function(){const a=t.addFunction(e+"_subAffine");a.addParam("p1","i32"),a.addParam("p2","i32"),a.addParam("pr","i32");const i=a.getCodeBuilder(),o=i.i32_const(t.alloc(3*n));a.addCode(i.call(e+"_negAffine",i.getLocal("p2"),o),i.call(e+"_addAffine",i.getLocal("p1"),o,i.getLocal("pr")))}(),function(){const a=t.addFunction(e+"_subMixed");a.addParam("p1","i32"),a.addParam("p2","i32"),a.addParam("pr","i32");const i=a.getCodeBuilder(),o=i.i32_const(t.alloc(3*n));a.addCode(i.call(e+"_negAffine",i.getLocal("p2"),o),i.call(e+"_addMixed",i.getLocal("p1"),o,i.getLocal("pr")))}(),function(){const a=t.addFunction(e+"_sub");a.addParam("p1","i32"),a.addParam("p2","i32"),a.addParam("pr","i32");const i=a.getCodeBuilder(),o=i.i32_const(t.alloc(3*n));a.addCode(i.call(e+"_neg",i.getLocal("p2"),o),i.call(e+"_add",i.getLocal("p1"),o,i.getLocal("pr")))}(),function(){const i=t.addFunction(e+"_fromMontgomeryAffine");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_fromMontgomery",o.getLocal("p1"),o.getLocal("pr")));for(let t=1;t<2;t++)i.addCode(o.call(a+"_fromMontgomery",o.i32_add(o.getLocal("p1"),o.i32_const(t*n)),o.i32_add(o.getLocal("pr"),o.i32_const(t*n))))}(),function(){const i=t.addFunction(e+"_fromMontgomery");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_fromMontgomery",o.getLocal("p1"),o.getLocal("pr")));for(let t=1;t<3;t++)i.addCode(o.call(a+"_fromMontgomery",o.i32_add(o.getLocal("p1"),o.i32_const(t*n)),o.i32_add(o.getLocal("pr"),o.i32_const(t*n))))}(),function(){const i=t.addFunction(e+"_toMontgomeryAffine");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_toMontgomery",o.getLocal("p1"),o.getLocal("pr")));for(let t=1;t<2;t++)i.addCode(o.call(a+"_toMontgomery",o.i32_add(o.getLocal("p1"),o.i32_const(t*n)),o.i32_add(o.getLocal("pr"),o.i32_const(t*n))))}(),function(){const i=t.addFunction(e+"_toMontgomery");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder();i.addCode(o.call(a+"_toMontgomery",o.getLocal("p1"),o.getLocal("pr")));for(let t=1;t<3;t++)i.addCode(o.call(a+"_toMontgomery",o.i32_add(o.getLocal("p1"),o.i32_const(t*n)),o.i32_add(o.getLocal("pr"),o.i32_const(t*n))))}(),function(){const i=t.addFunction(e+"_toAffine");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.i32_add(o.getLocal("p1"),o.i32_const(2*n)),s=o.getLocal("pr"),d=o.i32_add(o.getLocal("pr"),o.i32_const(n)),u=o.i32_const(t.alloc(n)),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),[...o.call(a+"_zero",s),...o.call(a+"_zero",d)],[...o.call(a+"_inverse",l,u),...o.call(a+"_square",u,f),...o.call(a+"_mul",u,f,g),...o.call(a+"_mul",r,f,s),...o.call(a+"_mul",c,g,d)]))}(),function(){const o=t.addFunction(e+"_inCurveAffine");o.addParam("pIn","i32"),o.setReturnType("i32");const r=o.getCodeBuilder(),c=r.getLocal("pIn"),l=r.i32_add(r.getLocal("pIn"),r.i32_const(n)),s=r.i32_const(t.alloc(n)),d=r.i32_const(t.alloc(n));o.addCode(r.call(a+"_square",l,s),r.call(a+"_square",c,d),r.call(a+"_mul",c,d,d),r.call(a+"_add",d,r.i32_const(i),d),r.ret(r.call(a+"_eq",s,d)))}(),function(){const a=t.addFunction(e+"_inCurve");a.addParam("pIn","i32"),a.setReturnType("i32");const i=a.getCodeBuilder(),o=i.i32_const(t.alloc(2*n));a.addCode(i.call(e+"_toAffine",i.getLocal("pIn"),o),i.ret(i.call(e+"_inCurveAffine",o)))}(),function(){const i=t.addFunction(e+"_batchToAffine");i.addParam("pIn","i32"),i.addParam("n","i32"),i.addParam("pOut","i32"),i.addLocal("pAux","i32"),i.addLocal("itIn","i32"),i.addLocal("itAux","i32"),i.addLocal("itOut","i32"),i.addLocal("i","i32");const o=i.getCodeBuilder(),r=o.i32_const(t.alloc(n));i.addCode(o.setLocal("pAux",o.i32_load(o.i32_const(0))),o.i32_store(o.i32_const(0),o.i32_add(o.getLocal("pAux"),o.i32_mul(o.getLocal("n"),o.i32_const(n)))),o.call(a+"_batchInverse",o.i32_add(o.getLocal("pIn"),o.i32_const(2*n)),o.i32_const(3*n),o.getLocal("n"),o.getLocal("pAux"),o.i32_const(n)),o.setLocal("itIn",o.getLocal("pIn")),o.setLocal("itAux",o.getLocal("pAux")),o.setLocal("itOut",o.getLocal("pOut")),o.setLocal("i",o.i32_const(0)),o.block(o.loop(o.br_if(1,o.i32_eq(o.getLocal("i"),o.getLocal("n"))),o.if(o.call(a+"_isZero",o.getLocal("itAux")),[...o.call(a+"_zero",o.getLocal("itOut")),...o.call(a+"_zero",o.i32_add(o.getLocal("itOut"),o.i32_const(n)))],[...o.call(a+"_mul",o.getLocal("itAux"),o.i32_add(o.getLocal("itIn"),o.i32_const(n)),r),...o.call(a+"_square",o.getLocal("itAux"),o.getLocal("itAux")),...o.call(a+"_mul",o.getLocal("itAux"),o.getLocal("itIn"),o.getLocal("itOut")),...o.call(a+"_mul",o.getLocal("itAux"),r,o.i32_add(o.getLocal("itOut"),o.i32_const(n)))]),o.setLocal("itIn",o.i32_add(o.getLocal("itIn"),o.i32_const(3*n))),o.setLocal("itOut",o.i32_add(o.getLocal("itOut"),o.i32_const(2*n))),o.setLocal("itAux",o.i32_add(o.getLocal("itAux"),o.i32_const(n))),o.setLocal("i",o.i32_add(o.getLocal("i"),o.i32_const(1))),o.br(0))),o.i32_store(o.i32_const(0),o.getLocal("pAux")))}(),function(){const i=t.addFunction(e+"_normalize");i.addParam("p1","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),r=o.getLocal("p1"),c=o.i32_add(o.getLocal("p1"),o.i32_const(n)),l=o.i32_add(o.getLocal("p1"),o.i32_const(2*n)),s=o.getLocal("pr"),d=o.i32_add(o.getLocal("pr"),o.i32_const(n)),u=o.i32_add(o.getLocal("pr"),o.i32_const(2*n)),f=o.i32_const(t.alloc(n)),g=o.i32_const(t.alloc(n)),_=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("p1")),o.call(e+"_zero",o.getLocal("pr")),[...o.call(a+"_inverse",l,f),...o.call(a+"_square",f,g),...o.call(a+"_mul",f,g,_),...o.call(a+"_mul",r,g,s),...o.call(a+"_mul",c,_,d),...o.call(a+"_one",u)]))}(),function(){const a=t.addFunction(e+"__reverseBytes");a.addParam("pIn","i32"),a.addParam("n","i32"),a.addParam("pOut","i32"),a.addLocal("itOut","i32"),a.addLocal("itIn","i32");const i=a.getCodeBuilder();a.addCode(i.setLocal("itOut",i.i32_sub(i.i32_add(i.getLocal("pOut"),i.getLocal("n")),i.i32_const(1))),i.setLocal("itIn",i.getLocal("pIn")),i.block(i.loop(i.br_if(1,i.i32_lt_s(i.getLocal("itOut"),i.getLocal("pOut"))),i.i32_store8(i.getLocal("itOut"),i.i32_load8_u(i.getLocal("itIn"))),i.setLocal("itOut",i.i32_sub(i.getLocal("itOut"),i.i32_const(1))),i.setLocal("itIn",i.i32_add(i.getLocal("itIn"),i.i32_const(1))),i.br(0))))}(),function(){const a=t.addFunction(e+"_LEMtoU");a.addParam("pIn","i32"),a.addParam("pOut","i32");const i=a.getCodeBuilder(),o=t.alloc(2*n),r=i.i32_const(o),c=i.i32_const(o),l=i.i32_const(o+n);a.addCode(i.if(i.call(e+"_isZeroAffine",i.getLocal("pIn")),[...i.call(e+"_zeroAffine",i.getLocal("pOut")),...i.i32_store8(i.getLocal("pOut"),i.i32_const(64)),...i.ret([])]),i.call(e+"_fromMontgomeryAffine",i.getLocal("pIn"),r),i.call(e+"__reverseBytes",c,i.i32_const(n),i.getLocal("pOut")),i.call(e+"__reverseBytes",l,i.i32_const(n),i.i32_add(i.getLocal("pOut"),i.i32_const(n))))}(),function(){const i=t.addFunction(e+"_LEMtoC");i.addParam("pIn","i32"),i.addParam("pOut","i32");const o=i.getCodeBuilder(),r=o.i32_const(t.alloc(n));i.addCode(o.if(o.call(e+"_isZero",o.getLocal("pIn")),[...o.call(a+"_zero",o.getLocal("pOut")),...o.i32_store8(o.getLocal("pOut"),o.i32_const(64)),...o.ret([])]),o.call(a+"_fromMontgomery",o.getLocal("pIn"),r),o.call(e+"__reverseBytes",r,o.i32_const(n),o.getLocal("pOut")),o.if(o.i32_eq(o.call(a+"_sign",o.i32_add(o.getLocal("pIn"),o.i32_const(n))),o.i32_const(-1)),o.i32_store8(o.getLocal("pOut"),o.i32_or(o.i32_load8_u(o.getLocal("pOut")),o.i32_const(128)))))}(),function(){const a=t.addFunction(e+"_UtoLEM");a.addParam("pIn","i32"),a.addParam("pOut","i32");const i=a.getCodeBuilder(),o=t.alloc(2*n),r=i.i32_const(o),c=i.i32_const(o),l=i.i32_const(o+n);a.addCode(i.if(i.i32_and(i.i32_load8_u(i.getLocal("pIn")),i.i32_const(64)),[...i.call(e+"_zeroAffine",i.getLocal("pOut")),...i.ret([])]),i.call(e+"__reverseBytes",i.getLocal("pIn"),i.i32_const(n),c),i.call(e+"__reverseBytes",i.i32_add(i.getLocal("pIn"),i.i32_const(n)),i.i32_const(n),l),i.call(e+"_toMontgomeryAffine",r,i.getLocal("pOut")))}(),function(){const o=t.addFunction(e+"_CtoLEM");o.addParam("pIn","i32"),o.addParam("pOut","i32"),o.addLocal("firstByte","i32"),o.addLocal("greatest","i32");const r=o.getCodeBuilder(),c=t.alloc(2*n),l=r.i32_const(c),s=r.i32_const(c+n);o.addCode(r.setLocal("firstByte",r.i32_load8_u(r.getLocal("pIn"))),r.if(r.i32_and(r.getLocal("firstByte"),r.i32_const(64)),[...r.call(e+"_zeroAffine",r.getLocal("pOut")),...r.ret([])]),r.setLocal("greatest",r.i32_and(r.getLocal("firstByte"),r.i32_const(128))),r.call(a+"_copy",r.getLocal("pIn"),s),r.i32_store8(s,r.i32_and(r.getLocal("firstByte"),r.i32_const(63))),r.call(e+"__reverseBytes",s,r.i32_const(n),l),r.call(a+"_toMontgomery",l,r.getLocal("pOut")),r.call(a+"_square",r.getLocal("pOut"),s),r.call(a+"_mul",r.getLocal("pOut"),s,s),r.call(a+"_add",s,r.i32_const(i),s),r.call(a+"_sqrt",s,s),r.call(a+"_neg",s,l),r.if(r.i32_eq(r.call(a+"_sign",s),r.i32_const(-1)),r.if(r.getLocal("greatest"),r.call(a+"_copy",s,r.i32_add(r.getLocal("pOut"),r.i32_const(n))),r.call(a+"_neg",s,r.i32_add(r.getLocal("pOut"),r.i32_const(n)))),r.if(r.getLocal("greatest"),r.call(a+"_neg",s,r.i32_add(r.getLocal("pOut"),r.i32_const(n))),r.call(a+"_copy",s,r.i32_add(r.getLocal("pOut"),r.i32_const(n))))))}(),Ot(t,e+"_batchLEMtoU",e+"_LEMtoU",2*n,2*n),Ot(t,e+"_batchLEMtoC",e+"_LEMtoC",2*n,n),Ot(t,e+"_batchUtoLEM",e+"_UtoLEM",2*n,2*n),Ot(t,e+"_batchCtoLEM",e+"_CtoLEM",n,2*n,!0),Ot(t,e+"_batchToJacobian",e+"_toJacobian",2*n,3*n,!0),Rt(t,e,e+"_multiexp",e+"_add",3*n),Rt(t,e,e+"_multiexpAffine",e+"_addMixed",2*n),kt(t,e+"_timesScalar",3*n,e+"_add",e+"_double",e+"_sub",e+"_copy",e+"_zero"),kt(t,e+"_timesScalarAffine",2*n,e+"_addMixed",e+"_double",e+"_subMixed",e+"_copyAffine",e+"_zero"),t.exportFunction(e+"_isZero"),t.exportFunction(e+"_isZeroAffine"),t.exportFunction(e+"_eq"),t.exportFunction(e+"_eqMixed"),t.exportFunction(e+"_eqAffine"),t.exportFunction(e+"_copy"),t.exportFunction(e+"_copyAffine"),t.exportFunction(e+"_zero"),t.exportFunction(e+"_zeroAffine"),t.exportFunction(e+"_double"),t.exportFunction(e+"_doubleAffine"),t.exportFunction(e+"_add"),t.exportFunction(e+"_addMixed"),t.exportFunction(e+"_addAffine"),t.exportFunction(e+"_neg"),t.exportFunction(e+"_negAffine"),t.exportFunction(e+"_sub"),t.exportFunction(e+"_subMixed"),t.exportFunction(e+"_subAffine"),t.exportFunction(e+"_fromMontgomery"),t.exportFunction(e+"_fromMontgomeryAffine"),t.exportFunction(e+"_toMontgomery"),t.exportFunction(e+"_toMontgomeryAffine"),t.exportFunction(e+"_timesScalar"),t.exportFunction(e+"_timesScalarAffine"),t.exportFunction(e+"_normalize"),t.exportFunction(e+"_LEMtoU"),t.exportFunction(e+"_LEMtoC"),t.exportFunction(e+"_UtoLEM"),t.exportFunction(e+"_CtoLEM"),t.exportFunction(e+"_batchLEMtoU"),t.exportFunction(e+"_batchLEMtoC"),t.exportFunction(e+"_batchUtoLEM"),t.exportFunction(e+"_batchCtoLEM"),t.exportFunction(e+"_toAffine"),t.exportFunction(e+"_toJacobian"),t.exportFunction(e+"_batchToAffine"),t.exportFunction(e+"_batchToJacobian"),t.exportFunction(e+"_inCurve"),t.exportFunction(e+"_inCurveAffine"),e},Tt=function(t,e,a,i,o){const n=8*t.modules[i].n64,r=8*t.modules[a].n64,c=t.modules[i].q;let l=c.minus(f(1)),s=0;for(;!l.isOdd();)s++,l=l.shiftRight(1);let d=f(2);for(;d.modPow(c.shiftRight(1),c).equals(1);)d=d.add(1);const u=new Array(s+1);u[s]=d.modPow(l,c);let g=s-1;for(;g>=0;)u[g]=u[g+1].modPow(2,c),g--;const _=[],p=f(1).shiftLeft(8*n).mod(c);for(let t=0;t<u.length;t++){const e=u[t].times(p).mod(c);_.push(...Bt(e,n))}const h=t.alloc(_),m=new Array(s+1);m[0]=f(1);for(let t=1;t<=s;t++)m[t]=m[t-1].times(2);const L=[];for(let t=0;t<=s;t++){const e=m[t].modInv(c).times(p).mod(c);L.push(...Bt(e,n))}const w=t.alloc(L),b=d.modPow(2,c),y=[],A=[];for(let t=0;t<=s;t++){const e=b.modPow(f(2).pow(t),c),a=c.add(f.one).minus(e).modInv(c);y.push(...Bt(e.times(p).mod(c),n)),A.push(...Bt(a.times(p).mod(c),n))}const I=t.alloc(y),C=t.alloc(A);function v(t){let e=0;for(let a=0;a<8;a++)t&1<<a&&(e|=128>>a);return e}const F=Array(256);for(let t=0;t<256;t++)F[t]=v(t);const x=t.alloc(F);function E(){const a=t.addFunction(e+"_fft");a.addParam("px","i32"),a.addParam("n","i32"),a.addLocal("bits","i32");const o=a.getCodeBuilder(),r=o.i32_const(t.alloc(n));a.addCode(o.setLocal("bits",o.call(e+"__log2",o.getLocal("n"))),o.call(i+"_one",r),o.call(e+"_rawfft",o.getLocal("px"),o.getLocal("bits"),o.i32_const(0),r))}!function(){const a=t.addFunction(e+"__rev");a.addParam("x","i32"),a.addParam("bits","i32"),a.setReturnType("i32");const i=a.getCodeBuilder();a.addCode(i.i32_rotl(i.i32_add(i.i32_add(i.i32_shl(i.i32_load8_u(i.i32_and(i.getLocal("x"),i.i32_const(255)),x,0),i.i32_const(24)),i.i32_shl(i.i32_load8_u(i.i32_and(i.i32_shr_u(i.getLocal("x"),i.i32_const(8)),i.i32_const(255)),x,0),i.i32_const(16))),i.i32_add(i.i32_shl(i.i32_load8_u(i.i32_and(i.i32_shr_u(i.getLocal("x"),i.i32_const(16)),i.i32_const(255)),x,0),i.i32_const(8)),i.i32_load8_u(i.i32_and(i.i32_shr_u(i.getLocal("x"),i.i32_const(24)),i.i32_const(255)),x,0))),i.getLocal("bits")))}(),function(){const i=t.addFunction(e+"__reversePermutation");i.addParam("px","i32"),i.addParam("bits","i32"),i.addLocal("n","i32"),i.addLocal("i","i32"),i.addLocal("ri","i32"),i.addLocal("idx1","i32"),i.addLocal("idx2","i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(r));i.addCode(o.setLocal("n",o.i32_shl(o.i32_const(1),o.getLocal("bits"))),o.setLocal("i",o.i32_const(0)),o.block(o.loop(o.br_if(1,o.i32_eq(o.getLocal("i"),o.getLocal("n"))),o.setLocal("idx1",o.i32_add(o.getLocal("px"),o.i32_mul(o.getLocal("i"),o.i32_const(r)))),o.setLocal("ri",o.call(e+"__rev",o.getLocal("i"),o.getLocal("bits"))),o.setLocal("idx2",o.i32_add(o.getLocal("px"),o.i32_mul(o.getLocal("ri"),o.i32_const(r)))),o.if(o.i32_lt_u(o.getLocal("i"),o.getLocal("ri")),[...o.call(a+"_copy",o.getLocal("idx1"),n),...o.call(a+"_copy",o.getLocal("idx2"),o.getLocal("idx1")),...o.call(a+"_copy",n,o.getLocal("idx2"))]),o.setLocal("i",o.i32_add(o.getLocal("i"),o.i32_const(1))),o.br(0))))}(),function(){const n=t.addFunction(e+"__fftFinal");n.addParam("px","i32"),n.addParam("bits","i32"),n.addParam("reverse","i32"),n.addParam("mulFactor","i32"),n.addLocal("n","i32"),n.addLocal("ndiv2","i32"),n.addLocal("pInv2","i32"),n.addLocal("i","i32"),n.addLocal("mask","i32"),n.addLocal("idx1","i32"),n.addLocal("idx2","i32");const c=n.getCodeBuilder(),l=c.i32_const(t.alloc(r));n.addCode(c.if(c.i32_and(c.i32_eqz(c.getLocal("reverse")),c.call(i+"_isOne",c.getLocal("mulFactor"))),c.ret([])),c.setLocal("n",c.i32_shl(c.i32_const(1),c.getLocal("bits"))),c.setLocal("mask",c.i32_sub(c.getLocal("n"),c.i32_const(1))),c.setLocal("i",c.i32_const(1)),c.setLocal("ndiv2",c.i32_shr_u(c.getLocal("n"),c.i32_const(1))),c.block(c.loop(c.br_if(1,c.i32_ge_u(c.getLocal("i"),c.getLocal("ndiv2"))),c.setLocal("idx1",c.i32_add(c.getLocal("px"),c.i32_mul(c.getLocal("i"),c.i32_const(r)))),c.setLocal("idx2",c.i32_add(c.getLocal("px"),c.i32_mul(c.i32_sub(c.getLocal("n"),c.getLocal("i")),c.i32_const(r)))),c.if(c.getLocal("reverse"),c.if(c.call(i+"_isOne",c.getLocal("mulFactor")),[...c.call(a+"_copy",c.getLocal("idx1"),l),...c.call(a+"_copy",c.getLocal("idx2"),c.getLocal("idx1")),...c.call(a+"_copy",l,c.getLocal("idx2"))],[...c.call(a+"_copy",c.getLocal("idx1"),l),...c.call(o,c.getLocal("idx2"),c.getLocal("mulFactor"),c.getLocal("idx1")),...c.call(o,l,c.getLocal("mulFactor"),c.getLocal("idx2"))]),c.if(c.call(i+"_isOne",c.getLocal("mulFactor")),[],[...c.call(o,c.getLocal("idx1"),c.getLocal("mulFactor"),c.getLocal("idx1")),...c.call(o,c.getLocal("idx2"),c.getLocal("mulFactor"),c.getLocal("idx2"))])),c.setLocal("i",c.i32_add(c.getLocal("i"),c.i32_const(1))),c.br(0))),c.if(c.call(i+"_isOne",c.getLocal("mulFactor")),[],[...c.call(o,c.getLocal("px"),c.getLocal("mulFactor"),c.getLocal("px")),...c.setLocal("idx2",c.i32_add(c.getLocal("px"),c.i32_mul(c.getLocal("ndiv2"),c.i32_const(r)))),...c.call(o,c.getLocal("idx2"),c.getLocal("mulFactor"),c.getLocal("idx2"))]))}(),function(){const c=t.addFunction(e+"_rawfft");c.addParam("px","i32"),c.addParam("bits","i32"),c.addParam("reverse","i32"),c.addParam("mulFactor","i32"),c.addLocal("s","i32"),c.addLocal("k","i32"),c.addLocal("j","i32"),c.addLocal("m","i32"),c.addLocal("mdiv2","i32"),c.addLocal("n","i32"),c.addLocal("pwm","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r)),u=l.i32_const(t.alloc(r));c.addCode(l.call(e+"__reversePermutation",l.getLocal("px"),l.getLocal("bits")),l.setLocal("n",l.i32_shl(l.i32_const(1),l.getLocal("bits"))),l.setLocal("s",l.i32_const(1)),l.block(l.loop(l.br_if(1,l.i32_gt_u(l.getLocal("s"),l.getLocal("bits"))),l.setLocal("m",l.i32_shl(l.i32_const(1),l.getLocal("s"))),l.setLocal("pwm",l.i32_add(l.i32_const(h),l.i32_mul(l.getLocal("s"),l.i32_const(n)))),l.setLocal("k",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_ge_u(l.getLocal("k"),l.getLocal("n"))),l.call(i+"_one",s),l.setLocal("mdiv2",l.i32_shr_u(l.getLocal("m"),l.i32_const(1))),l.setLocal("j",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_ge_u(l.getLocal("j"),l.getLocal("mdiv2"))),l.setLocal("idx1",l.i32_add(l.getLocal("px"),l.i32_mul(l.i32_add(l.getLocal("k"),l.getLocal("j")),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("idx1"),l.i32_mul(l.getLocal("mdiv2"),l.i32_const(r)))),l.call(o,l.getLocal("idx2"),s,d),l.call(a+"_copy",l.getLocal("idx1"),u),l.call(a+"_add",u,d,l.getLocal("idx1")),l.call(a+"_sub",u,d,l.getLocal("idx2")),l.call(i+"_mul",s,l.getLocal("pwm"),s),l.setLocal("j",l.i32_add(l.getLocal("j"),l.i32_const(1))),l.br(0))),l.setLocal("k",l.i32_add(l.getLocal("k"),l.getLocal("m"))),l.br(0))),l.setLocal("s",l.i32_add(l.getLocal("s"),l.i32_const(1))),l.br(0))),l.call(e+"__fftFinal",l.getLocal("px"),l.getLocal("bits"),l.getLocal("reverse"),l.getLocal("mulFactor")))}(),function(){const a=t.addFunction(e+"__log2");a.addParam("n","i32"),a.setReturnType("i32"),a.addLocal("bits","i32"),a.addLocal("aux","i32");const i=a.getCodeBuilder();a.addCode(i.setLocal("aux",i.i32_shr_u(i.getLocal("n"),i.i32_const(1)))),a.addCode(i.setLocal("bits",i.i32_const(0))),a.addCode(i.block(i.loop(i.br_if(1,i.i32_eqz(i.getLocal("aux"))),i.setLocal("aux",i.i32_shr_u(i.getLocal("aux"),i.i32_const(1))),i.setLocal("bits",i.i32_add(i.getLocal("bits"),i.i32_const(1))),i.br(0)))),a.addCode(i.if(i.i32_ne(i.getLocal("n"),i.i32_shl(i.i32_const(1),i.getLocal("bits"))),i.unreachable())),a.addCode(i.if(i.i32_gt_u(i.getLocal("bits"),i.i32_const(s)),i.unreachable())),a.addCode(i.getLocal("bits"))}(),E(),function(){const a=t.addFunction(e+"_ifft");a.addParam("px","i32"),a.addParam("n","i32"),a.addLocal("bits","i32"),a.addLocal("pInv2","i32");const i=a.getCodeBuilder();a.addCode(i.setLocal("bits",i.call(e+"__log2",i.getLocal("n"))),i.setLocal("pInv2",i.i32_add(i.i32_const(w),i.i32_mul(i.getLocal("bits"),i.i32_const(n)))),i.call(e+"_rawfft",i.getLocal("px"),i.getLocal("bits"),i.i32_const(1),i.getLocal("pInv2")))}(),function(){const c=t.addFunction(e+"_fftJoin");c.addParam("pBuff1","i32"),c.addParam("pBuff2","i32"),c.addParam("n","i32"),c.addParam("first","i32"),c.addParam("inc","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32"),c.addLocal("i","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r)),u=l.i32_const(t.alloc(r));c.addCode(l.call(i+"_copy",l.getLocal("first"),s),l.setLocal("i",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("i"),l.getLocal("n"))),l.setLocal("idx1",l.i32_add(l.getLocal("pBuff1"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("pBuff2"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.call(o,l.getLocal("idx2"),s,d),l.call(a+"_copy",l.getLocal("idx1"),u),l.call(a+"_add",u,d,l.getLocal("idx1")),l.call(a+"_sub",u,d,l.getLocal("idx2")),l.call(i+"_mul",s,l.getLocal("inc"),s),l.setLocal("i",l.i32_add(l.getLocal("i"),l.i32_const(1))),l.br(0))))}(),function(){const c=t.addFunction(e+"_fftJoinExt");c.addParam("pBuff1","i32"),c.addParam("pBuff2","i32"),c.addParam("n","i32"),c.addParam("first","i32"),c.addParam("inc","i32"),c.addParam("totalBits","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32"),c.addLocal("i","i32"),c.addLocal("pShiftToM","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r));c.addCode(l.setLocal("pShiftToM",l.i32_add(l.i32_const(I),l.i32_mul(l.getLocal("totalBits"),l.i32_const(n)))),l.call(i+"_copy",l.getLocal("first"),s),l.setLocal("i",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("i"),l.getLocal("n"))),l.setLocal("idx1",l.i32_add(l.getLocal("pBuff1"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("pBuff2"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.call(a+"_add",l.getLocal("idx1"),l.getLocal("idx2"),d),l.call(o,l.getLocal("idx2"),l.getLocal("pShiftToM"),l.getLocal("idx2")),l.call(a+"_add",l.getLocal("idx1"),l.getLocal("idx2"),l.getLocal("idx2")),l.call(o,l.getLocal("idx2"),s,l.getLocal("idx2")),l.call(a+"_copy",d,l.getLocal("idx1")),l.call(i+"_mul",s,l.getLocal("inc"),s),l.setLocal("i",l.i32_add(l.getLocal("i"),l.i32_const(1))),l.br(0))))}(),function(){const c=t.addFunction(e+"_fftJoinExtInv");c.addParam("pBuff1","i32"),c.addParam("pBuff2","i32"),c.addParam("n","i32"),c.addParam("first","i32"),c.addParam("inc","i32"),c.addParam("totalBits","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32"),c.addLocal("i","i32"),c.addLocal("pShiftToM","i32"),c.addLocal("pSConst","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r));c.addCode(l.setLocal("pShiftToM",l.i32_add(l.i32_const(I),l.i32_mul(l.getLocal("totalBits"),l.i32_const(n)))),l.setLocal("pSConst",l.i32_add(l.i32_const(C),l.i32_mul(l.getLocal("totalBits"),l.i32_const(n)))),l.call(i+"_copy",l.getLocal("first"),s),l.setLocal("i",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("i"),l.getLocal("n"))),l.setLocal("idx1",l.i32_add(l.getLocal("pBuff1"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("pBuff2"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.call(o,l.getLocal("idx2"),s,d),l.call(a+"_sub",l.getLocal("idx1"),d,l.getLocal("idx2")),l.call(o,l.getLocal("idx2"),l.getLocal("pSConst"),l.getLocal("idx2")),l.call(o,l.getLocal("idx1"),l.getLocal("pShiftToM"),l.getLocal("idx1")),l.call(a+"_sub",d,l.getLocal("idx1"),l.getLocal("idx1")),l.call(o,l.getLocal("idx1"),l.getLocal("pSConst"),l.getLocal("idx1")),l.call(i+"_mul",s,l.getLocal("inc"),s),l.setLocal("i",l.i32_add(l.getLocal("i"),l.i32_const(1))),l.br(0))))}(),function(){const c=t.addFunction(e+"_fftMix");c.addParam("pBuff","i32"),c.addParam("n","i32"),c.addParam("exp","i32"),c.addLocal("nGroups","i32"),c.addLocal("nPerGroup","i32"),c.addLocal("nPerGroupDiv2","i32"),c.addLocal("pairOffset","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32"),c.addLocal("i","i32"),c.addLocal("j","i32"),c.addLocal("pwm","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r)),u=l.i32_const(t.alloc(r));c.addCode(l.setLocal("nPerGroup",l.i32_shl(l.i32_const(1),l.getLocal("exp"))),l.setLocal("nPerGroupDiv2",l.i32_shr_u(l.getLocal("nPerGroup"),l.i32_const(1))),l.setLocal("nGroups",l.i32_shr_u(l.getLocal("n"),l.getLocal("exp"))),l.setLocal("pairOffset",l.i32_mul(l.getLocal("nPerGroupDiv2"),l.i32_const(r))),l.setLocal("pwm",l.i32_add(l.i32_const(h),l.i32_mul(l.getLocal("exp"),l.i32_const(n)))),l.setLocal("i",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("i"),l.getLocal("nGroups"))),l.call(i+"_one",s),l.setLocal("j",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("j"),l.getLocal("nPerGroupDiv2"))),l.setLocal("idx1",l.i32_add(l.getLocal("pBuff"),l.i32_mul(l.i32_add(l.i32_mul(l.getLocal("i"),l.getLocal("nPerGroup")),l.getLocal("j")),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("idx1"),l.getLocal("pairOffset"))),l.call(o,l.getLocal("idx2"),s,d),l.call(a+"_copy",l.getLocal("idx1"),u),l.call(a+"_add",u,d,l.getLocal("idx1")),l.call(a+"_sub",u,d,l.getLocal("idx2")),l.call(i+"_mul",s,l.getLocal("pwm"),s),l.setLocal("j",l.i32_add(l.getLocal("j"),l.i32_const(1))),l.br(0))),l.setLocal("i",l.i32_add(l.getLocal("i"),l.i32_const(1))),l.br(0))))}(),function(){const i=t.addFunction(e+"_fftFinal");i.addParam("pBuff","i32"),i.addParam("n","i32"),i.addParam("factor","i32"),i.addLocal("idx1","i32"),i.addLocal("idx2","i32"),i.addLocal("i","i32"),i.addLocal("ndiv2","i32");const n=i.getCodeBuilder(),c=n.i32_const(t.alloc(r));i.addCode(n.setLocal("ndiv2",n.i32_shr_u(n.getLocal("n"),n.i32_const(1))),n.if(n.i32_and(n.getLocal("n"),n.i32_const(1)),n.call(o,n.i32_add(n.getLocal("pBuff"),n.i32_mul(n.getLocal("ndiv2"),n.i32_const(r))),n.getLocal("factor"),n.i32_add(n.getLocal("pBuff"),n.i32_mul(n.getLocal("ndiv2"),n.i32_const(r))))),n.setLocal("i",n.i32_const(0)),n.block(n.loop(n.br_if(1,n.i32_ge_u(n.getLocal("i"),n.getLocal("ndiv2"))),n.setLocal("idx1",n.i32_add(n.getLocal("pBuff"),n.i32_mul(n.getLocal("i"),n.i32_const(r)))),n.setLocal("idx2",n.i32_add(n.getLocal("pBuff"),n.i32_mul(n.i32_sub(n.i32_sub(n.getLocal("n"),n.i32_const(1)),n.getLocal("i")),n.i32_const(r)))),n.call(o,n.getLocal("idx2"),n.getLocal("factor"),c),n.call(o,n.getLocal("idx1"),n.getLocal("factor"),n.getLocal("idx2")),n.call(a+"_copy",c,n.getLocal("idx1")),n.setLocal("i",n.i32_add(n.getLocal("i"),n.i32_const(1))),n.br(0))))}(),function(){const c=t.addFunction(e+"_prepareLagrangeEvaluation");c.addParam("pBuff1","i32"),c.addParam("pBuff2","i32"),c.addParam("n","i32"),c.addParam("first","i32"),c.addParam("inc","i32"),c.addParam("totalBits","i32"),c.addLocal("idx1","i32"),c.addLocal("idx2","i32"),c.addLocal("i","i32"),c.addLocal("pShiftToM","i32"),c.addLocal("pSConst","i32");const l=c.getCodeBuilder(),s=l.i32_const(t.alloc(n)),d=l.i32_const(t.alloc(r));c.addCode(l.setLocal("pShiftToM",l.i32_add(l.i32_const(I),l.i32_mul(l.getLocal("totalBits"),l.i32_const(n)))),l.setLocal("pSConst",l.i32_add(l.i32_const(C),l.i32_mul(l.getLocal("totalBits"),l.i32_const(n)))),l.call(i+"_copy",l.getLocal("first"),s),l.setLocal("i",l.i32_const(0)),l.block(l.loop(l.br_if(1,l.i32_eq(l.getLocal("i"),l.getLocal("n"))),l.setLocal("idx1",l.i32_add(l.getLocal("pBuff1"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.setLocal("idx2",l.i32_add(l.getLocal("pBuff2"),l.i32_mul(l.getLocal("i"),l.i32_const(r)))),l.call(o,l.getLocal("idx1"),l.getLocal("pShiftToM"),d),l.call(a+"_sub",l.getLocal("idx2"),d,d),l.call(a+"_sub",l.getLocal("idx1"),l.getLocal("idx2"),l.getLocal("idx2")),l.call(o,d,l.getLocal("pSConst"),l.getLocal("idx1")),l.call(o,l.getLocal("idx2"),s,l.getLocal("idx2")),l.call(i+"_mul",s,l.getLocal("inc"),s),l.setLocal("i",l.i32_add(l.getLocal("i"),l.i32_const(1))),l.br(0))))}(),t.exportFunction(e+"_fft"),t.exportFunction(e+"_ifft"),t.exportFunction(e+"_rawfft"),t.exportFunction(e+"_fftJoin"),t.exportFunction(e+"_fftJoinExt"),t.exportFunction(e+"_fftJoinExtInv"),t.exportFunction(e+"_fftMix"),t.exportFunction(e+"_fftFinal"),t.exportFunction(e+"_prepareLagrangeEvaluation")},Dt=function(t,e,a){const i=8*t.modules[a].n64;return function(){const o=t.addFunction(e+"_zero");o.addParam("px","i32"),o.addParam("n","i32"),o.addLocal("lastp","i32"),o.addLocal("p","i32");const n=o.getCodeBuilder();o.addCode(n.setLocal("p",n.getLocal("px")),n.setLocal("lastp",n.i32_add(n.getLocal("px"),n.i32_mul(n.getLocal("n"),n.i32_const(i)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("p"),n.getLocal("lastp"))),n.call(a+"_zero",n.getLocal("p")),n.setLocal("p",n.i32_add(n.getLocal("p"),n.i32_const(i))),n.br(0))))}(),function(){const o=t.addFunction(e+"_constructLC");o.addParam("ppolynomials","i32"),o.addParam("psignals","i32"),o.addParam("nSignals","i32"),o.addParam("pres","i32"),o.addLocal("i","i32"),o.addLocal("j","i32"),o.addLocal("pp","i32"),o.addLocal("ps","i32"),o.addLocal("pd","i32"),o.addLocal("ncoefs","i32");const n=o.getCodeBuilder(),r=n.i32_const(t.alloc(i));o.addCode(n.setLocal("i",n.i32_const(0)),n.setLocal("pp",n.getLocal("ppolynomials")),n.setLocal("ps",n.getLocal("psignals")),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("i"),n.getLocal("nSignals"))),n.setLocal("ncoefs",n.i32_load(n.getLocal("pp"))),n.setLocal("pp",n.i32_add(n.getLocal("pp"),n.i32_const(4))),n.setLocal("j",n.i32_const(0)),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("j"),n.getLocal("ncoefs"))),n.setLocal("pd",n.i32_add(n.getLocal("pres"),n.i32_mul(n.i32_load(n.getLocal("pp")),n.i32_const(i)))),n.setLocal("pp",n.i32_add(n.getLocal("pp"),n.i32_const(4))),n.call(a+"_mul",n.getLocal("ps"),n.getLocal("pp"),r),n.call(a+"_add",r,n.getLocal("pd"),n.getLocal("pd")),n.setLocal("pp",n.i32_add(n.getLocal("pp"),n.i32_const(i))),n.setLocal("j",n.i32_add(n.getLocal("j"),n.i32_const(1))),n.br(0))),n.setLocal("ps",n.i32_add(n.getLocal("ps"),n.i32_const(i))),n.setLocal("i",n.i32_add(n.getLocal("i"),n.i32_const(1))),n.br(0))))}(),t.exportFunction(e+"_zero"),t.exportFunction(e+"_constructLC"),e},jt=function(t,e,a){const i=8*t.modules[a].n64;return function(){const o=t.addFunction(e+"_buildABC");o.addParam("pCoefs","i32"),o.addParam("nCoefs","i32"),o.addParam("pWitness","i32"),o.addParam("pA","i32"),o.addParam("pB","i32"),o.addParam("pC","i32"),o.addParam("offsetOut","i32"),o.addParam("nOut","i32"),o.addParam("offsetWitness","i32"),o.addParam("nWitness","i32"),o.addLocal("it","i32"),o.addLocal("ita","i32"),o.addLocal("itb","i32"),o.addLocal("last","i32"),o.addLocal("m","i32"),o.addLocal("c","i32"),o.addLocal("s","i32"),o.addLocal("pOut","i32");const n=o.getCodeBuilder(),r=n.i32_const(t.alloc(i));o.addCode(n.setLocal("ita",n.getLocal("pA")),n.setLocal("itb",n.getLocal("pB")),n.setLocal("last",n.i32_add(n.getLocal("pA"),n.i32_mul(n.getLocal("nOut"),n.i32_const(i)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("ita"),n.getLocal("last"))),n.call(a+"_zero",n.getLocal("ita")),n.call(a+"_zero",n.getLocal("itb")),n.setLocal("ita",n.i32_add(n.getLocal("ita"),n.i32_const(i))),n.setLocal("itb",n.i32_add(n.getLocal("itb"),n.i32_const(i))),n.br(0))),n.setLocal("it",n.getLocal("pCoefs")),n.setLocal("last",n.i32_add(n.getLocal("pCoefs"),n.i32_mul(n.getLocal("nCoefs"),n.i32_const(i+12)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("it"),n.getLocal("last"))),n.setLocal("s",n.i32_load(n.getLocal("it"),8)),n.if(n.i32_or(n.i32_lt_u(n.getLocal("s"),n.getLocal("offsetWitness")),n.i32_ge_u(n.getLocal("s"),n.i32_add(n.getLocal("offsetWitness"),n.getLocal("nWitness")))),[...n.setLocal("it",n.i32_add(n.getLocal("it"),n.i32_const(i+12))),...n.br(1)]),n.setLocal("m",n.i32_load(n.getLocal("it"))),n.if(n.i32_eq(n.getLocal("m"),n.i32_const(0)),n.setLocal("pOut",n.getLocal("pA")),n.if(n.i32_eq(n.getLocal("m"),n.i32_const(1)),n.setLocal("pOut",n.getLocal("pB")),[...n.setLocal("it",n.i32_add(n.getLocal("it"),n.i32_const(i+12))),...n.br(1)])),n.setLocal("c",n.i32_load(n.getLocal("it"),4)),n.if(n.i32_or(n.i32_lt_u(n.getLocal("c"),n.getLocal("offsetOut")),n.i32_ge_u(n.getLocal("c"),n.i32_add(n.getLocal("offsetOut"),n.getLocal("nOut")))),[...n.setLocal("it",n.i32_add(n.getLocal("it"),n.i32_const(i+12))),...n.br(1)]),n.setLocal("pOut",n.i32_add(n.getLocal("pOut"),n.i32_mul(n.i32_sub(n.getLocal("c"),n.getLocal("offsetOut")),n.i32_const(i)))),n.call(a+"_mul",n.i32_add(n.getLocal("pWitness"),n.i32_mul(n.i32_sub(n.getLocal("s"),n.getLocal("offsetWitness")),n.i32_const(i))),n.i32_add(n.getLocal("it"),n.i32_const(12)),r),n.call(a+"_add",n.getLocal("pOut"),r,n.getLocal("pOut")),n.setLocal("it",n.i32_add(n.getLocal("it"),n.i32_const(i+12))),n.br(0))),n.setLocal("ita",n.getLocal("pA")),n.setLocal("itb",n.getLocal("pB")),n.setLocal("it",n.getLocal("pC")),n.setLocal("last",n.i32_add(n.getLocal("pA"),n.i32_mul(n.getLocal("nOut"),n.i32_const(i)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("ita"),n.getLocal("last"))),n.call(a+"_mul",n.getLocal("ita"),n.getLocal("itb"),n.getLocal("it")),n.setLocal("ita",n.i32_add(n.getLocal("ita"),n.i32_const(i))),n.setLocal("itb",n.i32_add(n.getLocal("itb"),n.i32_const(i))),n.setLocal("it",n.i32_add(n.getLocal("it"),n.i32_const(i))),n.br(0))))}(),function(){const o=t.addFunction(e+"_joinABC");o.addParam("pA","i32"),o.addParam("pB","i32"),o.addParam("pC","i32"),o.addParam("n","i32"),o.addParam("pP","i32"),o.addLocal("ita","i32"),o.addLocal("itb","i32"),o.addLocal("itc","i32"),o.addLocal("itp","i32"),o.addLocal("last","i32");const n=o.getCodeBuilder(),r=n.i32_const(t.alloc(i));o.addCode(n.setLocal("ita",n.getLocal("pA")),n.setLocal("itb",n.getLocal("pB")),n.setLocal("itc",n.getLocal("pC")),n.setLocal("itp",n.getLocal("pP")),n.setLocal("last",n.i32_add(n.getLocal("pA"),n.i32_mul(n.getLocal("n"),n.i32_const(i)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("ita"),n.getLocal("last"))),n.call(a+"_mul",n.getLocal("ita"),n.getLocal("itb"),r),n.call(a+"_sub",r,n.getLocal("itc"),n.getLocal("itp")),n.setLocal("ita",n.i32_add(n.getLocal("ita"),n.i32_const(i))),n.setLocal("itb",n.i32_add(n.getLocal("itb"),n.i32_const(i))),n.setLocal("itc",n.i32_add(n.getLocal("itc"),n.i32_const(i))),n.setLocal("itp",n.i32_add(n.getLocal("itp"),n.i32_const(i))),n.br(0))))}(),function(){const o=t.addFunction(e+"_batchAdd");o.addParam("pa","i32"),o.addParam("pb","i32"),o.addParam("n","i32"),o.addParam("pr","i32"),o.addLocal("ita","i32"),o.addLocal("itb","i32"),o.addLocal("itr","i32"),o.addLocal("last","i32");const n=o.getCodeBuilder();o.addCode(n.setLocal("ita",n.getLocal("pa")),n.setLocal("itb",n.getLocal("pb")),n.setLocal("itr",n.getLocal("pr")),n.setLocal("last",n.i32_add(n.getLocal("pa"),n.i32_mul(n.getLocal("n"),n.i32_const(i)))),n.block(n.loop(n.br_if(1,n.i32_eq(n.getLocal("ita"),n.getLocal("last"))),n.call(a+"_add",n.getLocal("ita"),n.getLocal("itb"),n.getLocal("itr")),n.setLocal("ita",n.i32_add(n.getLocal("ita"),n.i32_const(i))),n.setLocal("itb",n.i32_add(n.getLocal("itb"),n.i32_const(i))),n.setLocal("itr",n.i32_add(n.getLocal("itr"),n.i32_const(i))),n.br(0))))}(),t.exportFunction(e+"_buildABC"),t.exportFunction(e+"_joinABC"),t.exportFunction(e+"_batchAdd"),e},Kt=function(t,e,a,i,o,n,r,c){const l=t.addFunction(e);l.addParam("pIn","i32"),l.addParam("n","i32"),l.addParam("pFirst","i32"),l.addParam("pInc","i32"),l.addParam("pOut","i32"),l.addLocal("pOldFree","i32"),l.addLocal("i","i32"),l.addLocal("pFrom","i32"),l.addLocal("pTo","i32");const s=l.getCodeBuilder(),d=s.i32_const(t.alloc(r));l.addCode(s.setLocal("pFrom",s.getLocal("pIn")),s.setLocal("pTo",s.getLocal("pOut"))),l.addCode(s.call(i+"_copy",s.getLocal("pFirst"),d)),l.addCode(s.setLocal("i",s.i32_const(0)),s.block(s.loop(s.br_if(1,s.i32_eq(s.getLocal("i"),s.getLocal("n"))),s.call(c,s.getLocal("pFrom"),d,s.getLocal("pTo")),s.setLocal("pFrom",s.i32_add(s.getLocal("pFrom"),s.i32_const(o))),s.setLocal("pTo",s.i32_add(s.getLocal("pTo"),s.i32_const(n))),s.call(i+"_mul",d,s.getLocal("pInc"),d),s.setLocal("i",s.i32_add(s.getLocal("i"),s.i32_const(1))),s.br(0)))),t.exportFunction(e)},Vt=function(t,e){const a=e||"bn128";if(t.modules[a])return a;const i=f("21888242871839275222246405745257275088696311157297823662689037894645226208583"),o=f("21888242871839275222246405745257275088548364400416034343698204186575808495617"),n=Math.floor((i.minus(1).bitLength()-1)/64)+1,r=8*n,c=r,l=r,s=2*l,d=12*l,u=t.alloc(Bt(o,c)),g=zt(t,i,"f1m");qt(t,o,"fr","frm");const _=t.alloc(Bt(b(f(3)),l)),p=Nt(t,"g1m","f1m",_);Tt(t,"frm","frm","frm","frm_mul"),Dt(t,"pol","frm"),jt(t,"qap","frm");const h=Qt(t,"f1m_neg","f2m","f1m"),m=t.alloc([...Bt(b(f("19485874751759354771024239261021720505790618469301721065564631296452457478373")),l),...Bt(b(f("266929791119991161246907387137283842545076965332900288569378510910307636690")),l)]),L=Nt(t,"g2m","f2m",m);function w(e,a){const i=t.addFunction(e);i.addParam("pG","i32"),i.addParam("pFr","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(r));i.addCode(o.call("frm_fromMontgomery",o.getLocal("pFr"),n),o.call(a,o.getLocal("pG"),n,o.i32_const(r),o.getLocal("pr"))),t.exportFunction(e)}function b(t){return f(t).times(f.one.shiftLeft(8*l)).mod(i)}w("g1m_timesFr","g1m_timesScalar"),Tt(t,"g1m","g1m","frm","g1m_timesFr"),w("g2m_timesFr","g2m_timesScalar"),Tt(t,"g2m","g2m","frm","g2m_timesFr"),w("g1m_timesFrAffine","g1m_timesScalarAffine"),w("g2m_timesFrAffine","g2m_timesScalarAffine"),Kt(t,"frm_batchApplyKey",0,"frm",r,r,r,"frm_mul"),Kt(t,"g1m_batchApplyKey",0,"frm",3*r,3*r,r,"g1m_timesFr"),Kt(t,"g1m_batchApplyKeyMixed",0,"frm",2*r,3*r,r,"g1m_timesFrAffine"),Kt(t,"g2m_batchApplyKey",0,"frm",2*r*3,3*r*2,r,"g2m_timesFr"),Kt(t,"g2m_batchApplyKeyMixed",0,"frm",2*r*2,3*r*2,r,"g2m_timesFrAffine");const y=[f("1"),f("2"),f.one],A=t.alloc([...Bt(b(y[0]),l),...Bt(b(y[1]),l),...Bt(b(y[2]),l)]),I=[f.zero,f.one,f.zero],C=t.alloc([...Bt(b(I[0]),l),...Bt(b(I[1]),l),...Bt(b(I[2]),l)]),v=[[f("10857046999023057135944570762232829481370756359578518086990519993285655852781"),f("11559732032986387107991004021392285783925812861821192530917403151452391805634")],[f("8495653923123431417604973247489272438418190587263600148770280649306958101930"),f("4082367875863433681332203403145435568316851327593401208105741076214120093531")],[f.one,f.zero]],F=t.alloc([...Bt(b(v[0][0]),l),...Bt(b(v[0][1]),l),...Bt(b(v[1][0]),l),...Bt(b(v[1][1]),l),...Bt(b(v[2][0]),l),...Bt(b(v[2][1]),l)]),x=[[f.zero,f.zero],[f.one,f.zero],[f.zero,f.zero]],E=t.alloc([...Bt(b(x[0][0]),l),...Bt(b(x[0][1]),l),...Bt(b(x[1][0]),l),...Bt(b(x[1][1]),l),...Bt(b(x[2][0]),l),...Bt(b(x[2][1]),l)]),B=t.alloc([...Bt(b(1),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l),...Bt(b(0),l)]),S=t.alloc([...Bt(b(9),l),...Bt(b(1),l)]),G=t.alloc([...Bt(b(f(2).modInv(i)),l),...Bt(f(0),l)]),P=S,O=t.alloc([...Bt(b("19485874751759354771024239261021720505790618469301721065564631296452457478373"),l),...Bt(b("266929791119991161246907387137283842545076965332900288569378510910307636690"),l)]);!function(){const e=t.addFunction(a+"_mulNR6");e.addParam("x","i32"),e.addParam("pr","i32");const i=e.getCodeBuilder();e.addCode(i.call(h+"_mul",i.i32_const(S),i.getLocal("x"),i.getLocal("pr")))}();const U=Mt(t,a+"_mulNR6","f6m","f2m");!function(){const e=t.addFunction(a+"_mulNR12");e.addParam("x","i32"),e.addParam("pr","i32");const i=e.getCodeBuilder();e.addCode(i.call(h+"_mul",i.i32_const(S),i.i32_add(i.getLocal("x"),i.i32_const(4*r)),i.getLocal("pr")),i.call(h+"_copy",i.getLocal("x"),i.i32_add(i.getLocal("pr"),i.i32_const(2*r))),i.call(h+"_copy",i.i32_add(i.getLocal("x"),i.i32_const(2*r)),i.i32_add(i.getLocal("pr"),i.i32_const(4*r))))}();const z=Qt(t,a+"_mulNR12","ftm",U),q=function(t){let e=t;const a=[];for(;e.gt(f.zero);)e.isOdd()?a.push(1):a.push(0),e=e.shiftRight(1);return a}(f("29793968203157093288")),Q=t.alloc(q),M=3*s,k=q.length-1,R=q.reduce(((t,e)=>t+(0!=e?1:0)),0),N=6*r,T=3*r*2+(R+k+1)*M;t.modules[a]={n64:n,pG1gen:A,pG1zero:C,pG1b:_,pG2gen:F,pG2zero:E,pG2b:m,pq:t.modules.f1m.pq,pr:u,pOneT:B,prePSize:N,preQSize:T,r:o.toString(),q:i.toString()};const D=f("4965661367192848881");function j(e){const o=[[[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")]],[[f("1"),f("0")],[f("8376118865763821496583973867626364092589906065868298776909617916018768340080"),f("16469823323077808223889137241176536799009286646108169935659301613961712198316")],[f("21888242871839275220042445260109153167277707414472061641714758635765020556617"),f("0")],[f("11697423496358154304825782922584725312912383441159505038794027105778954184319"),f("303847389135065887422783454877609941456349188919719272345083954437860409601")],[f("21888242871839275220042445260109153167277707414472061641714758635765020556616"),f("0")],[f("3321304630594332808241809054958361220322477375291206261884409189760185844239"),f("5722266937896532885780051958958348231143373700109372999374820235121374419868")],[f("21888242871839275222246405745257275088696311157297823662689037894645226208582"),f("0")],[f("13512124006075453725662431877630910996106405091429524885779419978626457868503"),f("5418419548761466998357268504080738289687024511189653727029736280683514010267")],[f("2203960485148121921418603742825762020974279258880205651966"),f("0")],[f("10190819375481120917420622822672549775783927716138318623895010788866272024264"),f("21584395482704209334823622290379665147239961968378104390343953940207365798982")],[f("2203960485148121921418603742825762020974279258880205651967"),f("0")],[f("18566938241244942414004596690298913868373833782006617400804628704885040364344"),f("16165975933942742336466353786298926857552937457188450663314217659523851788715")]]],n=[[[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")]],[[f("1"),f("0")],[f("21575463638280843010398324269430826099269044274347216827212613867836435027261"),f("10307601595873709700152284273816112264069230130616436755625194854815875713954")],[f("21888242871839275220042445260109153167277707414472061641714758635765020556616"),f("0")],[f("3772000881919853776433695186713858239009073593817195771773381919316419345261"),f("2236595495967245188281701248203181795121068902605861227855261137820944008926")],[f("2203960485148121921418603742825762020974279258880205651966"),f("0")],[f("18429021223477853657660792034369865839114504446431234726392080002137598044644"),f("9344045779998320333812420223237981029506012124075525679208581902008406485703")]],[[f("1"),f("0")],[f("2581911344467009335267311115468803099551665605076196740867805258568234346338"),f("19937756971775647987995932169929341994314640652964949448313374472400716661030")],[f("2203960485148121921418603742825762020974279258880205651966"),f("0")],[f("5324479202449903542726783395506214481928257762400643279780343368557297135718"),f("16208900380737693084919495127334387981393726419856888799917914180988844123039")],[f("21888242871839275220042445260109153167277707414472061641714758635765020556616"),f("0")],[f("13981852324922362344252311234282257507216387789820983642040889267519694726527"),f("7629828391165209371577384193250820201684255241773809077146787135900891633097")]]],r=t.addFunction(a+"__frobeniusMap"+e);r.addParam("x","i32"),r.addParam("r","i32");const c=r.getCodeBuilder();for(let a=0;a<6;a++){const i=0==a?c.getLocal("x"):c.i32_add(c.getLocal("x"),c.i32_const(a*s)),u=i,f=c.i32_add(c.getLocal("x"),c.i32_const(a*s+l)),_=0==a?c.getLocal("r"):c.i32_add(c.getLocal("r"),c.i32_const(a*s)),p=_,m=c.i32_add(c.getLocal("r"),c.i32_const(a*s+l)),L=d(o[Math.floor(a/3)][e%12],n[a%3][e%6]),w=t.alloc([...Bt(b(L[0]),32),...Bt(b(L[1]),32)]);e%2==1?r.addCode(c.call(g+"_copy",u,p),c.call(g+"_neg",f,m),c.call(h+"_mul",_,c.i32_const(w),_)):r.addCode(c.call(h+"_mul",i,c.i32_const(w),_))}function d(t,e){const a=f(t[0]),o=f(t[1]),n=f(e[0]),r=f(e[1]),c=[a.times(n).minus(o.times(r)).mod(i),a.times(r).add(o.times(n)).mod(i)];return c[0].isNegative()&&(c[0]=c[0].add(i)),c}}function K(e,i){const o=function(t){let e=t;const a=[];for(;e.gt(f.zero);){if(e.isOdd()){const t=2-e.mod(4).toJSNumber();a.push(t),e=e.minus(t)}else a.push(0);e=e.shiftRight(1)}return a}(e).map((t=>-1==t?255:t)),n=t.alloc(o);t.alloc(Bt(e,32));const r=t.addFunction(a+"__cyclotomicExp_"+i);r.addParam("x","i32"),r.addParam("r","i32"),r.addLocal("bit","i32"),r.addLocal("i","i32");const c=r.getCodeBuilder(),l=c.getLocal("x"),s=c.getLocal("r"),u=c.i32_const(t.alloc(d));r.addCode(c.call(z+"_conjugate",l,u),c.call(z+"_one",s),c.if(c.teeLocal("bit",c.i32_load8_s(c.i32_const(o.length-1),n)),c.if(c.i32_eq(c.getLocal("bit"),c.i32_const(1)),c.call(z+"_mul",s,l,s),c.call(z+"_mul",s,u,s))),c.setLocal("i",c.i32_const(o.length-2)),c.block(c.loop(c.call(a+"__cyclotomicSquare",s,s),c.if(c.teeLocal("bit",c.i32_load8_s(c.getLocal("i"),n)),c.if(c.i32_eq(c.getLocal("bit"),c.i32_const(1)),c.call(z+"_mul",s,l,s),c.call(z+"_mul",s,u,s))),c.br_if(1,c.i32_eqz(c.getLocal("i"))),c.setLocal("i",c.i32_sub(c.getLocal("i"),c.i32_const(1))),c.br(0))))}function V(){!function(){const e=t.addFunction(a+"__cyclotomicSquare");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=i.i32_add(i.getLocal("x"),i.i32_const(s)),r=i.i32_add(i.getLocal("x"),i.i32_const(2*s)),c=i.i32_add(i.getLocal("x"),i.i32_const(3*s)),l=i.i32_add(i.getLocal("x"),i.i32_const(4*s)),d=i.i32_add(i.getLocal("x"),i.i32_const(5*s)),u=i.getLocal("r"),f=i.i32_add(i.getLocal("r"),i.i32_const(s)),g=i.i32_add(i.getLocal("r"),i.i32_const(2*s)),_=i.i32_add(i.getLocal("r"),i.i32_const(3*s)),p=i.i32_add(i.getLocal("r"),i.i32_const(4*s)),m=i.i32_add(i.getLocal("r"),i.i32_const(5*s)),L=i.i32_const(t.alloc(s)),w=i.i32_const(t.alloc(s)),b=i.i32_const(t.alloc(s)),y=i.i32_const(t.alloc(s)),A=i.i32_const(t.alloc(s)),I=i.i32_const(t.alloc(s)),C=i.i32_const(t.alloc(s)),v=i.i32_const(t.alloc(s));e.addCode(i.call(h+"_mul",o,l,C),i.call(h+"_mul",l,i.i32_const(S),L),i.call(h+"_add",o,L,L),i.call(h+"_add",o,l,v),i.call(h+"_mul",v,L,L),i.call(h+"_mul",i.i32_const(S),C,v),i.call(h+"_add",C,v,v),i.call(h+"_sub",L,v,L),i.call(h+"_add",C,C,w),i.call(h+"_mul",c,r,C),i.call(h+"_mul",r,i.i32_const(S),b),i.call(h+"_add",c,b,b),i.call(h+"_add",c,r,v),i.call(h+"_mul",v,b,b),i.call(h+"_mul",i.i32_const(S),C,v),i.call(h+"_add",C,v,v),i.call(h+"_sub",b,v,b),i.call(h+"_add",C,C,y),i.call(h+"_mul",n,d,C),i.call(h+"_mul",d,i.i32_const(S),A),i.call(h+"_add",n,A,A),i.call(h+"_add",n,d,v),i.call(h+"_mul",v,A,A),i.call(h+"_mul",i.i32_const(S),C,v),i.call(h+"_add",C,v,v),i.call(h+"_sub",A,v,A),i.call(h+"_add",C,C,I),i.call(h+"_sub",L,o,u),i.call(h+"_add",u,u,u),i.call(h+"_add",L,u,u),i.call(h+"_add",w,l,p),i.call(h+"_add",p,p,p),i.call(h+"_add",w,p,p),i.call(h+"_mul",I,i.i32_const(P),v),i.call(h+"_add",v,c,_),i.call(h+"_add",_,_,_),i.call(h+"_add",v,_,_),i.call(h+"_sub",A,r,g),i.call(h+"_add",g,g,g),i.call(h+"_add",A,g,g),i.call(h+"_sub",b,n,f),i.call(h+"_add",f,f,f),i.call(h+"_add",b,f,f),i.call(h+"_add",y,d,m),i.call(h+"_add",m,m,m),i.call(h+"_add",y,m,m))}(),K(D,"w0");const e=t.addFunction(a+"__finalExponentiationLastChunk");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=i.getLocal("r"),r=i.i32_const(t.alloc(d)),c=i.i32_const(t.alloc(d)),l=i.i32_const(t.alloc(d)),u=i.i32_const(t.alloc(d)),f=i.i32_const(t.alloc(d)),g=i.i32_const(t.alloc(d)),_=i.i32_const(t.alloc(d)),p=i.i32_const(t.alloc(d)),m=i.i32_const(t.alloc(d)),L=i.i32_const(t.alloc(d)),w=i.i32_const(t.alloc(d)),b=i.i32_const(t.alloc(d)),y=i.i32_const(t.alloc(d)),A=i.i32_const(t.alloc(d)),I=i.i32_const(t.alloc(d)),C=i.i32_const(t.alloc(d)),v=i.i32_const(t.alloc(d)),F=i.i32_const(t.alloc(d)),x=i.i32_const(t.alloc(d)),E=i.i32_const(t.alloc(d)),B=i.i32_const(t.alloc(d));e.addCode(i.call(a+"__cyclotomicExp_w0",o,r),i.call(z+"_conjugate",r,r),i.call(a+"__cyclotomicSquare",r,c),i.call(a+"__cyclotomicSquare",c,l),i.call(z+"_mul",l,c,u),i.call(a+"__cyclotomicExp_w0",u,f),i.call(z+"_conjugate",f,f),i.call(a+"__cyclotomicSquare",f,g),i.call(a+"__cyclotomicExp_w0",g,_),i.call(z+"_conjugate",_,_),i.call(z+"_conjugate",u,p),i.call(z+"_conjugate",_,m),i.call(z+"_mul",m,f,L),i.call(z+"_mul",L,p,w),i.call(z+"_mul",w,c,b),i.call(z+"_mul",w,f,y),i.call(z+"_mul",y,o,A),i.call(a+"__frobeniusMap1",b,I),i.call(z+"_mul",I,A,C),i.call(a+"__frobeniusMap2",w,v),i.call(z+"_mul",v,C,F),i.call(z+"_conjugate",o,x),i.call(z+"_mul",x,b,E),i.call(a+"__frobeniusMap3",E,B),i.call(z+"_mul",B,F,n))}const H=t.alloc(N),$=t.alloc(T);function Z(e){const i=t.addFunction(a+"_pairingEq"+e);for(let t=0;t<e;t++)i.addParam("p_"+t,"i32"),i.addParam("q_"+t,"i32");i.addParam("c","i32"),i.setReturnType("i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(d)),r=o.i32_const(t.alloc(d));i.addCode(o.call(z+"_one",n));for(let t=0;t<e;t++)i.addCode(o.call(a+"_prepareG1",o.getLocal("p_"+t),o.i32_const(H))),i.addCode(o.call(a+"_prepareG2",o.getLocal("q_"+t),o.i32_const($))),i.addCode(o.call(a+"_millerLoop",o.i32_const(H),o.i32_const($),r)),i.addCode(o.call(z+"_mul",n,r,n));i.addCode(o.call(a+"_finalExponentiation",n,n)),i.addCode(o.call(z+"_eq",n,o.getLocal("c")))}!function(){const e=t.addFunction(a+"_prepAddStep");e.addParam("pQ","i32"),e.addParam("pR","i32"),e.addParam("pCoef","i32");const i=e.getCodeBuilder(),o=i.getLocal("pQ"),n=i.i32_add(i.getLocal("pQ"),i.i32_const(s)),r=i.getLocal("pR"),c=i.i32_add(i.getLocal("pR"),i.i32_const(s)),l=i.i32_add(i.getLocal("pR"),i.i32_const(2*s)),d=i.getLocal("pCoef"),u=i.i32_add(i.getLocal("pCoef"),i.i32_const(s)),f=i.i32_add(i.getLocal("pCoef"),i.i32_const(2*s)),g=u,_=i.i32_const(t.alloc(s)),p=i.i32_const(t.alloc(s)),m=i.i32_const(t.alloc(s)),L=i.i32_const(t.alloc(s)),w=i.i32_const(t.alloc(s)),b=i.i32_const(t.alloc(s)),y=i.i32_const(t.alloc(s));e.addCode(i.call(h+"_mul",o,l,g),i.call(h+"_sub",r,g,g),i.call(h+"_mul",n,l,_),i.call(h+"_sub",c,_,_),i.call(h+"_square",g,p),i.call(h+"_square",_,m),i.call(h+"_mul",g,p,L),i.call(h+"_mul",r,p,w),i.call(h+"_add",w,w,y),i.call(h+"_mul",l,m,b),i.call(h+"_add",L,b,b),i.call(h+"_sub",b,y,b),i.call(h+"_mul",g,b,r),i.call(h+"_mul",L,c,c),i.call(h+"_sub",w,b,y),i.call(h+"_mul",_,y,y),i.call(h+"_sub",y,c,c),i.call(h+"_mul",l,L,l),i.call(h+"_mul",g,n,y),i.call(h+"_mul",_,o,d),i.call(h+"_sub",d,y,d),i.call(h+"_mul",d,i.i32_const(P),d),i.call(h+"_neg",_,f))}(),function(){const e=t.addFunction(a+"_prepDblStep");e.addParam("pR","i32"),e.addParam("pCoef","i32");const i=e.getCodeBuilder(),o=i.getLocal("pR"),n=i.i32_add(i.getLocal("pR"),i.i32_const(s)),r=i.i32_add(i.getLocal("pR"),i.i32_const(2*s)),c=i.getLocal("pCoef"),l=i.i32_add(i.getLocal("pCoef"),i.i32_const(s)),d=i.i32_add(i.getLocal("pCoef"),i.i32_const(2*s)),u=i.i32_const(t.alloc(s)),f=i.i32_const(t.alloc(s)),g=i.i32_const(t.alloc(s)),_=i.i32_const(t.alloc(s)),p=i.i32_const(t.alloc(s)),m=i.i32_const(t.alloc(s)),L=i.i32_const(t.alloc(s)),w=i.i32_const(t.alloc(s)),b=i.i32_const(t.alloc(s)),y=i.i32_const(t.alloc(s)),A=i.i32_const(t.alloc(s)),I=i.i32_const(t.alloc(s));e.addCode(i.call(h+"_mul",n,i.i32_const(G),u),i.call(h+"_mul",o,u,u),i.call(h+"_square",n,f),i.call(h+"_square",r,g),i.call(h+"_add",g,g,_),i.call(h+"_add",_,g,_),i.call(h+"_mul",i.i32_const(O),_,p),i.call(h+"_add",p,p,m),i.call(h+"_add",p,m,m),i.call(h+"_add",f,m,L),i.call(h+"_mul",L,i.i32_const(G),L),i.call(h+"_add",f,g,I),i.call(h+"_add",n,r,w),i.call(h+"_square",w,w),i.call(h+"_sub",w,I,w),i.call(h+"_sub",p,f,b),i.call(h+"_square",o,y),i.call(h+"_square",p,A),i.call(h+"_sub",f,m,I),i.call(h+"_mul",u,I,o),i.call(h+"_add",A,A,I),i.call(h+"_add",A,I,I),i.call(h+"_square",L,n),i.call(h+"_sub",n,I,n),i.call(h+"_mul",f,w,r),i.call(h+"_mul",i.i32_const(P),b,c),i.call(h+"_neg",w,l),i.call(h+"_add",y,y,d),i.call(h+"_add",y,d,d))}(),function(){const e=t.addFunction(a+"_prepareG1");e.addParam("pP","i32"),e.addParam("ppreP","i32");const i=e.getCodeBuilder();e.addCode(i.call(p+"_normalize",i.getLocal("pP"),i.getLocal("ppreP")))}(),function(){!function(){const e=t.addFunction(a+"_mulByQ");e.addParam("p1","i32"),e.addParam("pr","i32");const i=e.getCodeBuilder(),o=i.getLocal("p1"),n=i.i32_add(i.getLocal("p1"),i.i32_const(s)),r=i.i32_add(i.getLocal("p1"),i.i32_const(2*s)),c=i.getLocal("pr"),d=i.i32_add(i.getLocal("pr"),i.i32_const(s)),u=i.i32_add(i.getLocal("pr"),i.i32_const(2*s)),f=i.i32_const(t.alloc([...Bt(b("21575463638280843010398324269430826099269044274347216827212613867836435027261"),l),...Bt(b("10307601595873709700152284273816112264069230130616436755625194854815875713954"),l)])),g=i.i32_const(t.alloc([...Bt(b("2821565182194536844548159561693502659359617185244120367078079554186484126554"),l),...Bt(b("3505843767911556378687030309984248845540243509899259641013678093033130930403"),l)]));e.addCode(i.call(h+"_conjugate",o,c),i.call(h+"_mul",f,c,c),i.call(h+"_conjugate",n,d),i.call(h+"_mul",g,d,d),i.call(h+"_conjugate",r,u))}();const e=t.addFunction(a+"_prepareG2");e.addParam("pQ","i32"),e.addParam("ppreQ","i32"),e.addLocal("pCoef","i32"),e.addLocal("i","i32");const i=e.getCodeBuilder(),o=i.getLocal("pQ");i.i32_add(i.getLocal("pQ"),i.i32_const(s)),i.i32_add(i.getLocal("pQ"),i.i32_const(2*s));const n=t.alloc(3*s),r=i.i32_const(n),c=i.i32_const(n),d=i.i32_const(n+s),u=i.i32_const(n+2*s),f=i.i32_add(i.getLocal("ppreQ"),i.i32_const(0)),g=i.i32_add(i.getLocal("ppreQ"),i.i32_const(s));i.i32_add(i.getLocal("ppreQ"),i.i32_const(2*s));const _=t.alloc(3*s),p=i.i32_const(_),m=t.alloc(3*s),w=i.i32_const(m);i.i32_const(m);const y=i.i32_const(m+s);i.i32_const(m+2*s),e.addCode(i.call(L+"_normalize",o,f),i.call(h+"_copy",f,c),i.call(h+"_copy",g,d),i.call(h+"_one",u)),e.addCode(i.setLocal("pCoef",i.i32_add(i.getLocal("ppreQ"),i.i32_const(3*s))),i.setLocal("i",i.i32_const(q.length-2)),i.block(i.loop(i.call(a+"_prepDblStep",r,i.getLocal("pCoef")),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))),i.if(i.i32_load8_s(i.getLocal("i"),Q),[...i.call(a+"_prepAddStep",f,r,i.getLocal("pCoef")),...i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M)))]),i.br_if(1,i.i32_eqz(i.getLocal("i"))),i.setLocal("i",i.i32_sub(i.getLocal("i"),i.i32_const(1))),i.br(0)))),e.addCode(i.call(a+"_mulByQ",f,p),i.call(a+"_mulByQ",p,w)),e.addCode(i.call(h+"_neg",y,y),i.call(a+"_prepAddStep",p,r,i.getLocal("pCoef")),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))),i.call(a+"_prepAddStep",w,r,i.getLocal("pCoef")),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))))}(),function(){const e=t.addFunction(a+"__mulBy024");e.addParam("pEll0","i32"),e.addParam("pEllVW","i32"),e.addParam("pEllVV","i32"),e.addParam("pR","i32");const i=e.getCodeBuilder(),o=i.getLocal("pEll0"),n=i.getLocal("pEllVV"),c=i.getLocal("pEllVW"),l=i.getLocal("pR"),d=i.i32_add(i.getLocal("pR"),i.i32_const(2*r)),u=i.i32_add(i.getLocal("pR"),i.i32_const(4*r)),f=i.i32_add(i.getLocal("pR"),i.i32_const(6*r)),g=i.i32_add(i.getLocal("pR"),i.i32_const(8*r)),_=i.i32_add(i.getLocal("pR"),i.i32_const(10*r)),p=i.i32_const(t.alloc(s)),m=i.i32_const(t.alloc(s)),L=i.i32_const(t.alloc(s)),w=i.i32_const(t.alloc(s)),b=i.i32_const(t.alloc(s)),y=i.i32_const(t.alloc(s)),A=i.i32_const(t.alloc(s)),I=i.i32_const(t.alloc(s)),C=i.i32_const(t.alloc(s)),v=i.i32_const(t.alloc(s)),F=i.i32_const(t.alloc(s));e.addCode(i.call(h+"_mul",l,o,A),i.call(h+"_mul",u,n,I),i.call(h+"_mul",g,c,C),i.call(h+"_add",l,g,L),i.call(h+"_add",l,u,m),i.call(h+"_add",d,f,w),i.call(h+"_add",w,_,w),i.call(h+"_mul",d,n,v),i.call(h+"_add",v,C,b),i.call(h+"_mul",i.i32_const(S),b,y),i.call(h+"_add",y,A,l),i.call(h+"_mul",_,c,b),i.call(h+"_add",v,b,v),i.call(h+"_add",b,I,b),i.call(h+"_mul",i.i32_const(S),b,y),i.call(h+"_mul",d,o,b),i.call(h+"_add",v,b,v),i.call(h+"_add",y,b,d),i.call(h+"_add",o,n,p),i.call(h+"_mul",m,p,b),i.call(h+"_add",A,I,F),i.call(h+"_sub",b,F,b),i.call(h+"_mul",f,c,y),i.call(h+"_add",v,y,v),i.call(h+"_add",u,g,p),i.call(h+"_add",b,y,u),i.call(h+"_add",n,c,m),i.call(h+"_mul",m,p,b),i.call(h+"_add",I,C,F),i.call(h+"_sub",b,F,b),i.call(h+"_mul",i.i32_const(S),b,y),i.call(h+"_mul",f,o,b),i.call(h+"_add",v,b,v),i.call(h+"_add",y,b,f),i.call(h+"_mul",_,n,b),i.call(h+"_add",v,b,v),i.call(h+"_mul",i.i32_const(S),b,y),i.call(h+"_add",o,c,p),i.call(h+"_mul",L,p,b),i.call(h+"_add",A,C,F),i.call(h+"_sub",b,F,b),i.call(h+"_add",y,b,g),i.call(h+"_add",o,n,p),i.call(h+"_add",p,c,p),i.call(h+"_mul",w,p,b),i.call(h+"_sub",b,v,_))}(),function(){const e=t.addFunction(a+"__mulBy024Old");e.addParam("pEll0","i32"),e.addParam("pEllVW","i32"),e.addParam("pEllVV","i32"),e.addParam("pR","i32");const i=e.getCodeBuilder(),o=i.getLocal("pEll0"),n=i.getLocal("pEllVV"),r=i.getLocal("pEllVW"),c=i.getLocal("pR"),l=t.alloc(d),u=i.i32_const(l),f=i.i32_const(l),g=i.i32_const(l+s),_=i.i32_const(l+2*s),p=i.i32_const(l+3*s),m=i.i32_const(l+4*s),L=i.i32_const(l+5*s);e.addCode(i.call(h+"_copy",o,f),i.call(h+"_zero",g),i.call(h+"_copy",n,_),i.call(h+"_zero",p),i.call(h+"_copy",r,m),i.call(h+"_zero",L),i.call(z+"_mul",u,c,c))}(),function(){const e=t.addFunction(a+"_millerLoop");e.addParam("ppreP","i32"),e.addParam("ppreQ","i32"),e.addParam("r","i32"),e.addLocal("pCoef","i32"),e.addLocal("i","i32");const i=e.getCodeBuilder(),o=i.getLocal("ppreP"),n=i.i32_add(i.getLocal("ppreP"),i.i32_const(l)),r=i.getLocal("pCoef"),c=i.i32_add(i.getLocal("pCoef"),i.i32_const(s)),d=i.i32_add(i.getLocal("pCoef"),i.i32_const(2*s)),u=t.alloc(s),f=i.i32_const(u),g=t.alloc(s),_=i.i32_const(g),p=i.getLocal("r");e.addCode(i.call(z+"_one",p),i.setLocal("pCoef",i.i32_add(i.getLocal("ppreQ"),i.i32_const(3*s))),i.setLocal("i",i.i32_const(q.length-2)),i.block(i.loop(i.call(z+"_square",p,p),i.call(h+"_mul1",c,n,f),i.call(h+"_mul1",d,o,_),i.call(a+"__mulBy024",r,f,_,p),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))),i.if(i.i32_load8_s(i.getLocal("i"),Q),[...i.call(h+"_mul1",c,n,f),...i.call(h+"_mul1",d,o,_),...i.call(a+"__mulBy024",r,f,_,p),...i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M)))]),i.br_if(1,i.i32_eqz(i.getLocal("i"))),i.setLocal("i",i.i32_sub(i.getLocal("i"),i.i32_const(1))),i.br(0)))),e.addCode(i.call(h+"_mul1",c,n,f),i.call(h+"_mul1",d,o,_),i.call(a+"__mulBy024",r,f,_,p),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))),i.call(h+"_mul1",c,n,f),i.call(h+"_mul1",d,o,_),i.call(a+"__mulBy024",r,f,_,p),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(M))))}();for(let e=0;e<10;e++)j(e),t.exportFunction(a+"__frobeniusMap"+e);!function(){const e=t.addFunction(a+"_finalExponentiationOld");e.addParam("x","i32"),e.addParam("r","i32");const i=f("552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480"),o=t.alloc(Bt(i,352)),n=e.getCodeBuilder();e.addCode(n.call(z+"_exp",n.getLocal("x"),n.i32_const(o),n.i32_const(352),n.getLocal("r")))}(),function(){!function(){const e=t.addFunction(a+"__finalExponentiationFirstChunk");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=o,c=i.i32_add(o,i.i32_const(6*r)),l=i.getLocal("r"),s=t.alloc(d),u=i.i32_const(s),f=u,g=i.i32_const(s+6*r),_=i.i32_const(t.alloc(d)),p=i.i32_const(t.alloc(d)),h=i.i32_const(t.alloc(d));e.addCode(i.call(U+"_copy",n,f),i.call(U+"_neg",c,g),i.call(z+"_inverse",o,_),i.call(z+"_mul",u,_,p),i.call(a+"__frobeniusMap2",p,h),i.call(z+"_mul",p,h,l))}(),V();const e=t.addFunction(a+"_finalExponentiation");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=i.getLocal("r"),c=i.i32_const(t.alloc(d));e.addCode(i.call(a+"__finalExponentiationFirstChunk",o,c),i.call(a+"__finalExponentiationLastChunk",c,n))}();for(let e=1;e<=5;e++)Z(e),t.exportFunction(a+"_pairingEq"+e);!function(){const e=t.addFunction(a+"_pairing");e.addParam("p","i32"),e.addParam("q","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.i32_const(t.alloc(d));e.addCode(i.call(a+"_prepareG1",i.getLocal("p"),i.i32_const(H))),e.addCode(i.call(a+"_prepareG2",i.getLocal("q"),i.i32_const($))),e.addCode(i.call(a+"_millerLoop",i.i32_const(H),i.i32_const($),o)),e.addCode(i.call(a+"_finalExponentiation",o,i.getLocal("r")))}(),t.exportFunction(a+"_pairing"),t.exportFunction(a+"_prepareG1"),t.exportFunction(a+"_prepareG2"),t.exportFunction(a+"_millerLoop"),t.exportFunction(a+"_finalExponentiation"),t.exportFunction(a+"_finalExponentiationOld"),t.exportFunction(a+"__mulBy024"),t.exportFunction(a+"__mulBy024Old"),t.exportFunction(a+"__cyclotomicSquare"),t.exportFunction(a+"__cyclotomicExp_w0")},Ht=function(t,e){const a=e||"bls12381";if(t.modules[a])return a;const i=f("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab",16),o=f("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001",16),n=Math.floor((i.minus(1).bitLength()-1)/64)+1,r=8*n,c=r,l=2*c,s=12*c,d=Math.floor((o.minus(1).bitLength()-1)/64)+1,u=8*d,g=u,_=t.alloc(Bt(o,g)),p=zt(t,i,"f1m","intq");qt(t,o,"fr","frm","intr");const h=t.alloc(Bt(A(f(4)),c)),m=Nt(t,"g1m","f1m",h);Tt(t,"frm","frm","frm","frm_mul"),Dt(t,"pol","frm"),jt(t,"qap","frm");const L=Qt(t,"f1m_neg","f2m","f1m"),w=t.alloc([...Bt(A(f("4")),c),...Bt(A(f("4")),c)]),b=Nt(t,"g2m","f2m",w);function y(e,a){const i=t.addFunction(e);i.addParam("pG","i32"),i.addParam("pFr","i32"),i.addParam("pr","i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(u));i.addCode(o.call("frm_fromMontgomery",o.getLocal("pFr"),n),o.call(a,o.getLocal("pG"),n,o.i32_const(u),o.getLocal("pr"))),t.exportFunction(e)}function A(t){return f(t).times(f.one.shiftLeft(8*c)).mod(i)}y("g1m_timesFr","g1m_timesScalar"),Tt(t,"g1m","g1m","frm","g1m_timesFr"),y("g2m_timesFr","g2m_timesScalar"),Tt(t,"g2m","g2m","frm","g2m_timesFr"),y("g1m_timesFrAffine","g1m_timesScalarAffine"),y("g2m_timesFrAffine","g2m_timesScalarAffine"),Kt(t,"frm_batchApplyKey",0,"frm",u,u,u,"frm_mul"),Kt(t,"g1m_batchApplyKey",0,"frm",3*r,3*r,u,"g1m_timesFr"),Kt(t,"g1m_batchApplyKeyMixed",0,"frm",2*r,3*r,u,"g1m_timesFrAffine"),Kt(t,"g2m_batchApplyKey",0,"frm",2*r*3,3*r*2,u,"g2m_timesFr"),Kt(t,"g2m_batchApplyKeyMixed",0,"frm",2*r*2,3*r*2,u,"g2m_timesFrAffine");const I=[f("3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507"),f("1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569"),f.one],C=t.alloc([...Bt(A(I[0]),c),...Bt(A(I[1]),c),...Bt(A(I[2]),c)]),v=[f.zero,f.one,f.zero],F=t.alloc([...Bt(A(v[0]),c),...Bt(A(v[1]),c),...Bt(A(v[2]),c)]),x=[[f("352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160"),f("3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758")],[f("1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905"),f("927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582")],[f.one,f.zero]],E=t.alloc([...Bt(A(x[0][0]),c),...Bt(A(x[0][1]),c),...Bt(A(x[1][0]),c),...Bt(A(x[1][1]),c),...Bt(A(x[2][0]),c),...Bt(A(x[2][1]),c)]),B=[[f.zero,f.zero],[f.one,f.zero],[f.zero,f.zero]],S=t.alloc([...Bt(A(B[0][0]),c),...Bt(A(B[0][1]),c),...Bt(A(B[1][0]),c),...Bt(A(B[1][1]),c),...Bt(A(B[2][0]),c),...Bt(A(B[2][1]),c)]),G=t.alloc([...Bt(A(1),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c),...Bt(A(0),c)]);t.alloc([...Bt(A(f(2).modInv(i)),c),...Bt(f(0),c)]);const P=t.alloc([...Bt(A(1),c),...Bt(A(1),c)]);t.alloc([...Bt(A("4"),c),...Bt(A("4"),c)]),function(){const e=t.addFunction(L+"_mulNR");e.addParam("x","i32"),e.addParam("pr","i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(c)),o=a.getLocal("x"),n=a.i32_add(a.getLocal("x"),a.i32_const(c)),r=a.getLocal("pr"),l=a.i32_add(a.getLocal("pr"),a.i32_const(c));e.addCode(a.call(p+"_copy",o,i),a.call(p+"_sub",o,n,r),a.call(p+"_add",i,n,l))}();const O=Mt(t,L+"_mulNR","f6m","f2m");!function(){const e=t.addFunction(O+"_mulNR");e.addParam("x","i32"),e.addParam("pr","i32");const a=e.getCodeBuilder(),i=a.i32_const(t.alloc(2*c));e.addCode(a.call(L+"_copy",a.getLocal("x"),i),a.call(L+"_mulNR",a.i32_add(a.getLocal("x"),a.i32_const(4*r)),a.getLocal("pr")),a.call(L+"_copy",a.i32_add(a.getLocal("x"),a.i32_const(2*r)),a.i32_add(a.getLocal("pr"),a.i32_const(4*r))),a.call(L+"_copy",i,a.i32_add(a.getLocal("pr"),a.i32_const(2*r))))}();const U=Qt(t,O+"_mulNR","ftm",O),z=function(t){let e=t;const a=[];for(;e.gt(f.zero);)e.isOdd()?a.push(1):a.push(0),e=e.shiftRight(1);return a}(f("d201000000010000",16)),q=t.alloc(z),Q=3*l,M=z.length-1,k=z.reduce(((t,e)=>t+(0!=e?1:0)),0),R=6*r,N=3*r*2+(k+M+1)*Q,T=f("15132376222941642752");function D(e){const a=[[[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")]],[[f("1"),f("0")],[f("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760"),f("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027")],[f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"),f("0")],[f("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"),f("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257")],[f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"),f("0")],[f("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557"),f("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230")],[f("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"),f("0")],[f("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027"),f("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760")],[f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"),f("0")],[f("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257"),f("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")],[f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"),f("0")],[f("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230"),f("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557")]]],o=[[[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")],[f("1"),f("0")]],[[f("1"),f("0")],[f("0"),f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436")],[f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"),f("0")],[f("0"),f("1")],[f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"),f("0")],[f("0"),f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350")]],[[f("1"),f("0")],[f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"),f("0")],[f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"),f("0")],[f("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"),f("0")],[f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"),f("0")],[f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"),f("0")]]],n=t.addFunction(U+"_frobeniusMap"+e);n.addParam("x","i32"),n.addParam("r","i32");const s=n.getCodeBuilder();for(let i=0;i<6;i++){const u=0==i?s.getLocal("x"):s.i32_add(s.getLocal("x"),s.i32_const(i*l)),f=u,g=s.i32_add(s.getLocal("x"),s.i32_const(i*l+c)),_=0==i?s.getLocal("r"):s.i32_add(s.getLocal("r"),s.i32_const(i*l)),h=_,m=s.i32_add(s.getLocal("r"),s.i32_const(i*l+c)),w=d(a[Math.floor(i/3)][e%12],o[i%3][e%6]),b=t.alloc([...Bt(A(w[0]),r),...Bt(A(w[1]),r)]);e%2==1?n.addCode(s.call(p+"_copy",f,h),s.call(p+"_neg",g,m),s.call(L+"_mul",_,s.i32_const(b),_)):n.addCode(s.call(L+"_mul",u,s.i32_const(b),_))}function d(t,e){const a=f(t[0]),o=f(t[1]),n=f(e[0]),r=f(e[1]),c=[a.times(n).minus(o.times(r)).mod(i),a.times(r).add(o.times(n)).mod(i)];return c[0].isNegative()&&(c[0]=c[0].add(i)),c}}function j(e,i,o){const n=function(t){let e=t;const a=[];for(;e.gt(f.zero);){if(e.isOdd()){const t=2-e.mod(4).toJSNumber();a.push(t),e=e.minus(t)}else a.push(0);e=e.shiftRight(1)}return a}(e).map((t=>-1==t?255:t)),r=t.alloc(n),c=t.addFunction(a+"__cyclotomicExp_"+o);c.addParam("x","i32"),c.addParam("r","i32"),c.addLocal("bit","i32"),c.addLocal("i","i32");const l=c.getCodeBuilder(),d=l.getLocal("x"),u=l.getLocal("r"),g=l.i32_const(t.alloc(s));c.addCode(l.call(U+"_conjugate",d,g),l.call(U+"_one",u),l.if(l.teeLocal("bit",l.i32_load8_s(l.i32_const(n.length-1),r)),l.if(l.i32_eq(l.getLocal("bit"),l.i32_const(1)),l.call(U+"_mul",u,d,u),l.call(U+"_mul",u,g,u))),l.setLocal("i",l.i32_const(n.length-2)),l.block(l.loop(l.call(a+"__cyclotomicSquare",u,u),l.if(l.teeLocal("bit",l.i32_load8_s(l.getLocal("i"),r)),l.if(l.i32_eq(l.getLocal("bit"),l.i32_const(1)),l.call(U+"_mul",u,d,u),l.call(U+"_mul",u,g,u))),l.br_if(1,l.i32_eqz(l.getLocal("i"))),l.setLocal("i",l.i32_sub(l.getLocal("i"),l.i32_const(1))),l.br(0)))),i&&c.addCode(l.call(U+"_conjugate",u,u))}t.modules[a]={n64q:n,n64r:d,n8q:r,n8r:u,pG1gen:C,pG1zero:F,pG1b:h,pG2gen:E,pG2zero:S,pG2b:w,pq:t.modules.f1m.pq,pr:_,pOneT:G,r:o,q:i,prePSize:R,preQSize:N},function(){const e=t.addFunction(O+"_mul1");e.addParam("pA","i32"),e.addParam("pC1","i32"),e.addParam("pR","i32");const a=e.getCodeBuilder(),i=a.getLocal("pA"),o=a.i32_add(a.getLocal("pA"),a.i32_const(2*c)),n=a.i32_add(a.getLocal("pA"),a.i32_const(4*c)),r=a.getLocal("pC1"),l=a.getLocal("pR"),s=a.i32_add(a.getLocal("pR"),a.i32_const(2*c)),d=a.i32_add(a.getLocal("pR"),a.i32_const(4*c)),u=a.i32_const(t.alloc(2*c)),f=a.i32_const(t.alloc(2*c));e.addCode(a.call(L+"_add",i,o,u),a.call(L+"_add",o,n,f),a.call(L+"_mul",o,r,d),a.call(L+"_mul",f,r,l),a.call(L+"_sub",l,d,l),a.call(L+"_mulNR",l,l),a.call(L+"_mul",u,r,s),a.call(L+"_sub",s,d,s))}(),function(){const e=t.addFunction(O+"_mul01");e.addParam("pA","i32"),e.addParam("pC0","i32"),e.addParam("pC1","i32"),e.addParam("pR","i32");const a=e.getCodeBuilder(),i=a.getLocal("pA"),o=a.i32_add(a.getLocal("pA"),a.i32_const(2*c)),n=a.i32_add(a.getLocal("pA"),a.i32_const(4*c)),r=a.getLocal("pC0"),l=a.getLocal("pC1"),s=a.getLocal("pR"),d=a.i32_add(a.getLocal("pR"),a.i32_const(2*c)),u=a.i32_add(a.getLocal("pR"),a.i32_const(4*c)),f=a.i32_const(t.alloc(2*c)),g=a.i32_const(t.alloc(2*c)),_=a.i32_const(t.alloc(2*c)),p=a.i32_const(t.alloc(2*c));e.addCode(a.call(L+"_mul",i,r,f),a.call(L+"_mul",o,l,g),a.call(L+"_add",i,o,_),a.call(L+"_add",i,n,p),a.call(L+"_add",o,n,s),a.call(L+"_mul",s,l,s),a.call(L+"_sub",s,g,s),a.call(L+"_mulNR",s,s),a.call(L+"_add",s,f,s),a.call(L+"_add",r,l,d),a.call(L+"_mul",d,_,d),a.call(L+"_sub",d,f,d),a.call(L+"_sub",d,g,d),a.call(L+"_mul",p,r,u),a.call(L+"_sub",u,f,u),a.call(L+"_add",u,g,u))}(),function(){const e=t.addFunction(U+"_mul014");e.addParam("pA","i32"),e.addParam("pC0","i32"),e.addParam("pC1","i32"),e.addParam("pC4","i32"),e.addParam("pR","i32");const a=e.getCodeBuilder(),i=a.getLocal("pA"),o=a.i32_add(a.getLocal("pA"),a.i32_const(6*c)),n=a.getLocal("pC0"),r=a.getLocal("pC1"),l=a.getLocal("pC4"),s=a.i32_const(t.alloc(6*c)),d=a.i32_const(t.alloc(6*c)),u=a.i32_const(t.alloc(2*c)),f=a.getLocal("pR"),g=a.i32_add(a.getLocal("pR"),a.i32_const(6*c));e.addCode(a.call(O+"_mul01",i,n,r,s),a.call(O+"_mul1",o,l,d),a.call(L+"_add",r,l,u),a.call(O+"_add",o,i,g),a.call(O+"_mul01",g,n,u,g),a.call(O+"_sub",g,s,g),a.call(O+"_sub",g,d,g),a.call(O+"_copy",d,f),a.call(O+"_mulNR",f,f),a.call(O+"_add",f,s,f))}(),function(){const e=t.addFunction(a+"_ell");e.addParam("pP","i32"),e.addParam("pCoefs","i32"),e.addParam("pF","i32");const i=e.getCodeBuilder(),o=i.getLocal("pP"),n=i.i32_add(i.getLocal("pP"),i.i32_const(r)),l=i.getLocal("pF"),s=i.getLocal("pCoefs"),d=i.i32_add(i.getLocal("pCoefs"),i.i32_const(c)),u=i.i32_add(i.getLocal("pCoefs"),i.i32_const(2*c)),f=i.i32_add(i.getLocal("pCoefs"),i.i32_const(3*c)),g=i.i32_add(i.getLocal("pCoefs"),i.i32_const(4*c)),_=t.alloc(2*c),h=i.i32_const(_),m=i.i32_const(_),L=i.i32_const(_+c),w=t.alloc(2*c),b=i.i32_const(w),y=i.i32_const(w),A=i.i32_const(w+c);e.addCode(i.call(p+"_mul",s,n,m),i.call(p+"_mul",d,n,L),i.call(p+"_mul",u,o,y),i.call(p+"_mul",f,o,A),i.call(U+"_mul014",l,g,b,h,l))}();const K=t.alloc(R),V=t.alloc(N);function H(e){const i=t.addFunction(a+"_pairingEq"+e);for(let t=0;t<e;t++)i.addParam("p_"+t,"i32"),i.addParam("q_"+t,"i32");i.addParam("c","i32"),i.setReturnType("i32");const o=i.getCodeBuilder(),n=o.i32_const(t.alloc(s)),r=o.i32_const(t.alloc(s));i.addCode(o.call(U+"_one",n));for(let t=0;t<e;t++)i.addCode(o.call(a+"_prepareG1",o.getLocal("p_"+t),o.i32_const(K))),i.addCode(o.call(a+"_prepareG2",o.getLocal("q_"+t),o.i32_const(V))),i.addCode(o.if(o.i32_eqz(o.call(m+"_inGroupAffine",o.i32_const(K))),o.ret(o.i32_const(0))),o.if(o.i32_eqz(o.call(b+"_inGroupAffine",o.i32_const(V))),o.ret(o.i32_const(0)))),i.addCode(o.call(a+"_millerLoop",o.i32_const(K),o.i32_const(V),r)),i.addCode(o.call(U+"_mul",n,r,n));i.addCode(o.call(a+"_finalExponentiation",n,n)),i.addCode(o.call(U+"_eq",n,o.getLocal("c")))}for(let e=0;e<10;e++)D(e),t.exportFunction(U+"_frobeniusMap"+e);!function(){const e=t.addFunction(m+"_inGroupAffine");e.addParam("p","i32"),e.setReturnType("i32");const a=e.getCodeBuilder(),i=f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"),o=f("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"),n=T.times(T).minus(f.one).divide(f(3)),l=a.i32_const(t.alloc(Bt(A(i),r))),s=a.i32_const(t.alloc(Bt(A(o),r))),d=a.i32_const(t.alloc(Bt(n,16))),u=a.getLocal("p"),g=a.i32_add(a.getLocal("p"),a.i32_const(c)),_=t.alloc(3*c),h=a.i32_const(_),L=a.i32_const(_),w=a.i32_const(_+c);a.i32_const(_+2*c);const b=t.alloc(2*c),y=a.i32_const(b),I=a.i32_const(b),C=a.i32_const(b+c);e.addCode(a.if(a.call(m+"_isZeroAffine",a.getLocal("p")),a.ret(a.i32_const(1))),a.if(a.i32_eqz(a.call(m+"_inCurveAffine",a.getLocal("p"))),a.ret(a.i32_const(0))),a.call(p+"_mul",u,l,L),a.call(p+"_copy",g,w),a.call(p+"_mul",u,s,I),a.call(p+"_copy",g,C),a.call(m+"_doubleAffine",h,h),a.call(m+"_subMixed",h,a.getLocal("p"),h),a.call(m+"_subMixed",h,y,h),a.call(m+"_timesScalar",h,d,a.i32_const(16),h),a.ret(a.call(m+"_eqMixed",h,y)));const v=t.addFunction(m+"_inGroup");v.addParam("pIn","i32"),v.setReturnType("i32");const F=v.getCodeBuilder(),x=F.i32_const(t.alloc(2*c));v.addCode(F.call(m+"_toAffine",F.getLocal("pIn"),x),F.ret(F.call(m+"_inGroupAffine",x)))}(),function(){const e=t.addFunction(b+"_inGroupAffine");e.addParam("p","i32"),e.setReturnType("i32");const a=e.getCodeBuilder(),i=[f("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894"),f("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893")],o=f("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"),n=[f("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"),f("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")],s=a.i32_const(t.alloc([...Bt(A(i[0]),r),...Bt(A(i[1]),r)])),d=a.i32_const(t.alloc(Bt(A(o),r))),u=a.i32_const(t.alloc([...Bt(A(n[0]),r),...Bt(A(n[1]),r)])),g=a.i32_const(t.alloc(Bt(T,8))),_=a.getLocal("p"),h=a.i32_add(a.getLocal("p"),a.i32_const(l)),m=a.i32_const(t.alloc(c)),w=a.i32_const(t.alloc(l)),y=a.i32_const(t.alloc(l)),I=t.alloc(2*l),C=a.i32_const(I),v=a.i32_const(I),F=a.i32_const(I),x=a.i32_const(I+c),E=a.i32_const(I+l),B=a.i32_const(I+l),S=a.i32_const(I+l+c),G=t.alloc(3*l),P=a.i32_const(G),O=a.i32_const(G),U=a.i32_const(G),z=a.i32_const(G+c),q=a.i32_const(G+l),Q=a.i32_const(G+l),M=a.i32_const(G+l+c),k=a.i32_const(G+2*l);e.addCode(a.if(a.call(b+"_isZeroAffine",a.getLocal("p")),a.ret(a.i32_const(1))),a.if(a.i32_eqz(a.call(b+"_inCurveAffine",a.getLocal("p"))),a.ret(a.i32_const(0))),a.call(L+"_mul",_,s,w),a.call(L+"_mul",h,s,y),a.call(L+"_mul1",w,d,v),a.call(L+"_neg",y,E),a.call(L+"_neg",w,O),a.call(L+"_mul",y,u,q),a.call(p+"_sub",F,x,m),a.call(p+"_add",F,x,x),a.call(p+"_copy",m,F),a.call(p+"_sub",B,S,m),a.call(p+"_add",B,S,S),a.call(p+"_copy",m,B),a.call(p+"_add",U,z,m),a.call(p+"_sub",U,z,z),a.call(p+"_copy",m,U),a.call(p+"_sub",M,Q,m),a.call(p+"_add",Q,M,M),a.call(p+"_copy",m,Q),a.call(L+"_one",k),a.call(b+"_timesScalar",P,g,a.i32_const(8),P),a.call(b+"_addMixed",P,C,P),a.ret(a.call(b+"_eqMixed",P,a.getLocal("p"))));const R=t.addFunction(b+"_inGroup");R.addParam("pIn","i32"),R.setReturnType("i32");const N=R.getCodeBuilder(),D=N.i32_const(t.alloc(2*l));R.addCode(N.call(b+"_toAffine",N.getLocal("pIn"),D),N.ret(N.call(b+"_inGroupAffine",D)))}(),function(){const e=t.addFunction(a+"_prepAddStep");e.addParam("R","i32"),e.addParam("Q","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("R"),n=i.i32_add(i.getLocal("R"),i.i32_const(2*r)),c=i.i32_add(i.getLocal("R"),i.i32_const(4*r)),s=i.getLocal("Q"),d=i.i32_add(i.getLocal("Q"),i.i32_const(2*r)),u=i.getLocal("r"),f=i.i32_add(i.getLocal("r"),i.i32_const(2*r)),g=i.i32_add(i.getLocal("r"),i.i32_const(4*r)),_=i.i32_const(t.alloc(l)),p=i.i32_const(t.alloc(l)),h=i.i32_const(t.alloc(l)),m=i.i32_const(t.alloc(l)),w=i.i32_const(t.alloc(l)),b=i.i32_const(t.alloc(l)),y=i.i32_const(t.alloc(l)),A=i.i32_const(t.alloc(l)),I=i.i32_const(t.alloc(l)),C=i.i32_const(t.alloc(l)),v=i.i32_const(t.alloc(l));e.addCode(i.call(L+"_square",c,_),i.call(L+"_square",d,p),i.call(L+"_mul",_,s,m),i.call(L+"_add",d,c,f),i.call(L+"_square",f,f),i.call(L+"_sub",f,p,f),i.call(L+"_sub",f,_,f),i.call(L+"_mul",f,_,f),i.call(L+"_sub",m,o,w),i.call(L+"_square",w,b),i.call(L+"_add",b,b,y),i.call(L+"_add",y,y,y),i.call(L+"_mul",y,w,A),i.call(L+"_sub",f,n,I),i.call(L+"_sub",I,n,I),i.call(L+"_mul",I,s,g),i.call(L+"_mul",y,o,C),i.call(L+"_square",I,o),i.call(L+"_sub",o,A,o),i.call(L+"_sub",o,C,o),i.call(L+"_sub",o,C,o),i.call(L+"_add",c,w,c),i.call(L+"_square",c,c),i.call(L+"_sub",c,_,c),i.call(L+"_sub",c,b,c),i.call(L+"_add",d,c,u),i.call(L+"_sub",C,o,v),i.call(L+"_mul",v,I,v),i.call(L+"_mul",n,A,m),i.call(L+"_add",m,m,m),i.call(L+"_sub",v,m,n),i.call(L+"_square",u,u),i.call(L+"_sub",u,p,u),i.call(L+"_square",c,h),i.call(L+"_sub",u,h,u),i.call(L+"_add",g,g,g),i.call(L+"_sub",g,u,g),i.call(L+"_add",c,c,u),i.call(L+"_neg",I,I),i.call(L+"_add",I,I,f))}(),function(){const e=t.addFunction(a+"_prepDblStep");e.addParam("R","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("R"),n=i.i32_add(i.getLocal("R"),i.i32_const(2*r)),c=i.i32_add(i.getLocal("R"),i.i32_const(4*r)),s=i.getLocal("r"),d=i.i32_add(i.getLocal("r"),i.i32_const(2*r)),u=i.i32_add(i.getLocal("r"),i.i32_const(4*r)),f=i.i32_const(t.alloc(l)),g=i.i32_const(t.alloc(l)),_=i.i32_const(t.alloc(l)),p=i.i32_const(t.alloc(l)),h=i.i32_const(t.alloc(l));e.addCode(i.call(L+"_square",o,s),i.call(L+"_square",n,g),i.call(L+"_square",g,_),i.call(L+"_add",g,o,d),i.call(L+"_square",d,d),i.call(L+"_sub",d,s,d),i.call(L+"_sub",d,_,d),i.call(L+"_add",d,d,d),i.call(L+"_add",s,s,p),i.call(L+"_add",p,s,p),i.call(L+"_add",o,p,u),i.call(L+"_square",p,h),i.call(L+"_square",c,f),i.call(L+"_sub",h,d,o),i.call(L+"_sub",o,d,o),i.call(L+"_add",c,n,c),i.call(L+"_square",c,c),i.call(L+"_sub",c,g,c),i.call(L+"_sub",c,f,c),i.call(L+"_sub",d,o,n),i.call(L+"_mul",n,p,n),i.call(L+"_add",_,_,_),i.call(L+"_add",_,_,_),i.call(L+"_add",_,_,_),i.call(L+"_sub",n,_,n),i.call(L+"_mul",p,f,d),i.call(L+"_add",d,d,d),i.call(L+"_neg",d,d),i.call(L+"_square",u,u),i.call(L+"_sub",u,s,u),i.call(L+"_sub",u,h,u),i.call(L+"_add",g,g,g),i.call(L+"_add",g,g,g),i.call(L+"_sub",u,g,u),i.call(L+"_mul",c,f,s),i.call(L+"_add",s,s,s))}(),function(){const e=t.addFunction(a+"_prepareG1");e.addParam("pP","i32"),e.addParam("ppreP","i32");const i=e.getCodeBuilder();e.addCode(i.call(m+"_normalize",i.getLocal("pP"),i.getLocal("ppreP")))}(),function(){const e=t.addFunction(a+"_prepareG2");e.addParam("pQ","i32"),e.addParam("ppreQ","i32"),e.addLocal("pCoef","i32"),e.addLocal("i","i32");const i=e.getCodeBuilder(),o=i.getLocal("pQ"),n=t.alloc(3*l),r=i.i32_const(n),c=i.getLocal("ppreQ");e.addCode(i.call(b+"_normalize",o,c),i.if(i.call(b+"_isZero",c),i.ret([])),i.call(b+"_copy",c,r),i.setLocal("pCoef",i.i32_add(i.getLocal("ppreQ"),i.i32_const(3*l)))),e.addCode(i.setLocal("i",i.i32_const(z.length-2)),i.block(i.loop(i.call(a+"_prepDblStep",r,i.getLocal("pCoef")),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(Q))),i.if(i.i32_load8_s(i.getLocal("i"),q),[...i.call(a+"_prepAddStep",r,c,i.getLocal("pCoef")),...i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(Q)))]),i.br_if(1,i.i32_eqz(i.getLocal("i"))),i.setLocal("i",i.i32_sub(i.getLocal("i"),i.i32_const(1))),i.br(0))))}(),function(){const e=t.addFunction(a+"_millerLoop");e.addParam("ppreP","i32"),e.addParam("ppreQ","i32"),e.addParam("r","i32"),e.addLocal("pCoef","i32"),e.addLocal("i","i32");const i=e.getCodeBuilder(),o=i.getLocal("ppreP");i.getLocal("ppreQ");const n=i.getLocal("pCoef"),r=i.getLocal("r");e.addCode(i.call(U+"_one",r),i.if(i.call(m+"_isZero",o),i.ret([])),i.if(i.call(m+"_isZero",i.getLocal("ppreQ")),i.ret([])),i.setLocal("pCoef",i.i32_add(i.getLocal("ppreQ"),i.i32_const(3*l))),i.setLocal("i",i.i32_const(z.length-2)),i.block(i.loop(i.call(a+"_ell",o,n,r),i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(Q))),i.if(i.i32_load8_s(i.getLocal("i"),q),[...i.call(a+"_ell",o,n,r),...i.setLocal("pCoef",i.i32_add(i.getLocal("pCoef"),i.i32_const(Q)))]),i.call(U+"_square",r,r),i.br_if(1,i.i32_eq(i.getLocal("i"),i.i32_const(1))),i.setLocal("i",i.i32_sub(i.getLocal("i"),i.i32_const(1))),i.br(0))),i.call(a+"_ell",o,n,r)),e.addCode(i.call(U+"_conjugate",r,r))}(),function(){const e=t.addFunction(a+"_finalExponentiationOld");e.addParam("x","i32"),e.addParam("r","i32");const i=f("322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560"),o=t.alloc(Bt(i,544)),n=e.getCodeBuilder();e.addCode(n.call(U+"_exp",n.getLocal("x"),n.i32_const(o),n.i32_const(544),n.getLocal("r")))}(),function(){!function(){const e=t.addFunction(a+"__cyclotomicSquare");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=i.i32_add(i.getLocal("x"),i.i32_const(l)),r=i.i32_add(i.getLocal("x"),i.i32_const(2*l)),c=i.i32_add(i.getLocal("x"),i.i32_const(3*l)),s=i.i32_add(i.getLocal("x"),i.i32_const(4*l)),d=i.i32_add(i.getLocal("x"),i.i32_const(5*l)),u=i.getLocal("r"),f=i.i32_add(i.getLocal("r"),i.i32_const(l)),g=i.i32_add(i.getLocal("r"),i.i32_const(2*l)),_=i.i32_add(i.getLocal("r"),i.i32_const(3*l)),p=i.i32_add(i.getLocal("r"),i.i32_const(4*l)),h=i.i32_add(i.getLocal("r"),i.i32_const(5*l)),m=i.i32_const(t.alloc(l)),w=i.i32_const(t.alloc(l)),b=i.i32_const(t.alloc(l)),y=i.i32_const(t.alloc(l)),A=i.i32_const(t.alloc(l)),I=i.i32_const(t.alloc(l)),C=i.i32_const(t.alloc(l)),v=i.i32_const(t.alloc(l));e.addCode(i.call(L+"_mul",o,s,C),i.call(L+"_mulNR",s,m),i.call(L+"_add",o,m,m),i.call(L+"_add",o,s,v),i.call(L+"_mul",v,m,m),i.call(L+"_mulNR",C,v),i.call(L+"_add",C,v,v),i.call(L+"_sub",m,v,m),i.call(L+"_add",C,C,w),i.call(L+"_mul",c,r,C),i.call(L+"_mulNR",r,b),i.call(L+"_add",c,b,b),i.call(L+"_add",c,r,v),i.call(L+"_mul",v,b,b),i.call(L+"_mulNR",C,v),i.call(L+"_add",C,v,v),i.call(L+"_sub",b,v,b),i.call(L+"_add",C,C,y),i.call(L+"_mul",n,d,C),i.call(L+"_mulNR",d,A),i.call(L+"_add",n,A,A),i.call(L+"_add",n,d,v),i.call(L+"_mul",v,A,A),i.call(L+"_mulNR",C,v),i.call(L+"_add",C,v,v),i.call(L+"_sub",A,v,A),i.call(L+"_add",C,C,I),i.call(L+"_sub",m,o,u),i.call(L+"_add",u,u,u),i.call(L+"_add",m,u,u),i.call(L+"_add",w,s,p),i.call(L+"_add",p,p,p),i.call(L+"_add",w,p,p),i.call(L+"_mul",I,i.i32_const(P),v),i.call(L+"_add",v,c,_),i.call(L+"_add",_,_,_),i.call(L+"_add",v,_,_),i.call(L+"_sub",A,r,g),i.call(L+"_add",g,g,g),i.call(L+"_add",A,g,g),i.call(L+"_sub",b,n,f),i.call(L+"_add",f,f,f),i.call(L+"_add",b,f,f),i.call(L+"_add",y,d,h),i.call(L+"_add",h,h,h),i.call(L+"_add",y,h,h))}(),j(T,true,"w0");const e=t.addFunction(a+"_finalExponentiation");e.addParam("x","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.getLocal("x"),n=i.getLocal("r"),r=i.i32_const(t.alloc(s)),c=i.i32_const(t.alloc(s)),d=i.i32_const(t.alloc(s)),u=i.i32_const(t.alloc(s)),f=i.i32_const(t.alloc(s)),g=i.i32_const(t.alloc(s)),_=i.i32_const(t.alloc(s));e.addCode(i.call(U+"_frobeniusMap6",o,r),i.call(U+"_inverse",o,c),i.call(U+"_mul",r,c,d),i.call(U+"_copy",d,c),i.call(U+"_frobeniusMap2",d,d),i.call(U+"_mul",d,c,d),i.call(a+"__cyclotomicSquare",d,c),i.call(U+"_conjugate",c,c),i.call(a+"__cyclotomicExp_w0",d,u),i.call(a+"__cyclotomicSquare",u,f),i.call(U+"_mul",c,u,g),i.call(a+"__cyclotomicExp_w0",g,c),i.call(a+"__cyclotomicExp_w0",c,r),i.call(a+"__cyclotomicExp_w0",r,_),i.call(U+"_mul",_,f,_),i.call(a+"__cyclotomicExp_w0",_,f),i.call(U+"_conjugate",g,g),i.call(U+"_mul",f,g,f),i.call(U+"_mul",f,d,f),i.call(U+"_conjugate",d,g),i.call(U+"_mul",c,d,c),i.call(U+"_frobeniusMap3",c,c),i.call(U+"_mul",_,g,_),i.call(U+"_frobeniusMap1",_,_),i.call(U+"_mul",u,r,u),i.call(U+"_frobeniusMap2",u,u),i.call(U+"_mul",u,c,u),i.call(U+"_mul",u,_,u),i.call(U+"_mul",u,f,n))}();for(let e=1;e<=5;e++)H(e),t.exportFunction(a+"_pairingEq"+e);!function(){const e=t.addFunction(a+"_pairing");e.addParam("p","i32"),e.addParam("q","i32"),e.addParam("r","i32");const i=e.getCodeBuilder(),o=i.i32_const(t.alloc(s));e.addCode(i.call(a+"_prepareG1",i.getLocal("p"),i.i32_const(K))),e.addCode(i.call(a+"_prepareG2",i.getLocal("q"),i.i32_const(V))),e.addCode(i.call(a+"_millerLoop",i.i32_const(K),i.i32_const(V),o)),e.addCode(i.call(a+"_finalExponentiation",o,i.getLocal("r")))}(),t.exportFunction(a+"_pairing"),t.exportFunction(a+"_prepareG1"),t.exportFunction(a+"_prepareG2"),t.exportFunction(a+"_millerLoop"),t.exportFunction(a+"_finalExponentiation"),t.exportFunction(a+"_finalExponentiationOld"),t.exportFunction(a+"__cyclotomicSquare"),t.exportFunction(a+"__cyclotomicExp_w0"),t.exportFunction(O+"_mul1"),t.exportFunction(O+"_mul01"),t.exportFunction(U+"_mul014"),t.exportFunction(m+"_inGroupAffine"),t.exportFunction(m+"_inGroup"),t.exportFunction(b+"_inGroupAffine"),t.exportFunction(b+"_inGroup")};var $t=Object.freeze({__proto__:null,stringifyBigInts:function t(e){if("bigint"==typeof e||void 0!==e.eq)return e.toString(10);if(e instanceof Uint8Array)return C(e,0);if(Array.isArray(e))return e.map(t);if("object"==typeof e){const a={};return Object.keys(e).forEach((i=>{a[i]=t(e[i])})),a}return e},unstringifyBigInts:function t(e){if("string"==typeof e&&/^[0-9]+$/.test(e))return BigInt(e);if("string"==typeof e&&/^0x[0-9a-fA-F]+$/.test(e))return BigInt(e);if(Array.isArray(e))return e.map(t);if("object"==typeof e){if(null===e)return null;const a={};return Object.keys(e).forEach((i=>{a[i]=t(e[i])})),a}return e},beBuff2int:function(t){let e=BigInt(0),a=t.length,i=0;const o=new DataView(t.buffer,t.byteOffset,t.byteLength);for(;a>0;)a>=4?(a-=4,e+=BigInt(o.getUint32(a))<<BigInt(8*i),i+=4):a>=2?(a-=2,e+=BigInt(o.getUint16(a))<<BigInt(8*i),i+=2):(a-=1,e+=BigInt(o.getUint8(a))<<BigInt(8*i),i+=1);return e},beInt2Buff:function(t,e){let a=t;const i=new Uint8Array(e),o=new DataView(i.buffer);let n=e;for(;n>0;)n-4>=0?(n-=4,o.setUint32(n,Number(a&BigInt(4294967295))),a>>=BigInt(32)):n-2>=0?(n-=2,o.setUint16(n,Number(a&BigInt(65535))),a>>=BigInt(16)):(n-=1,o.setUint8(n,Number(a&BigInt(255))),a>>=BigInt(8));if(a)throw new Error("Number does not fit in this length");return i},leBuff2int:function(t){let e=BigInt(0),a=0;const i=new DataView(t.buffer,t.byteOffset,t.byteLength);for(;a<t.length;)a+4<=t.length?(e+=BigInt(i.getUint32(a,!0))<<BigInt(8*a),a+=4):a+4<=t.length?(e+=BigInt(i.getUint16(a,!0))<<BigInt(8*a),a+=2):(e+=BigInt(i.getUint8(a,!0))<<BigInt(8*a),a+=1);return e},leInt2Buff:function(t,e){let a=t;void 0===e&&0==(e=Math.floor((O(t)-1)/8)+1)&&(e=1);const i=new Uint8Array(e),o=new DataView(i.buffer);let n=0;for(;n<e;)n+4<=e?(o.setUint32(n,Number(a&BigInt(4294967295)),!0),n+=4,a>>=BigInt(32)):n+2<=e?(o.setUint16(Number(n,a&BigInt(65535)),!0),n+=2,a>>=BigInt(16)):(o.setUint8(Number(n,a&BigInt(255)),!0),n+=1,a>>=BigInt(8));if(a)throw new Error("Number does not fit in this length");return i},stringifyFElements:function t(e,a){if("bigint"==typeof a||void 0!==a.eq)return a.toString(10);if(a instanceof Uint8Array)return e.toString(e.e(a));if(Array.isArray(a))return a.map(t.bind(this,e));if("object"==typeof a){const i={};return Object.keys(a).forEach((o=>{i[o]=t(e,a[o])})),i}return a},unstringifyFElements:function t(e,a){if("string"==typeof a&&/^[0-9]+$/.test(a))return e.e(a);if("string"==typeof a&&/^0x[0-9a-fA-F]+$/.test(a))return e.e(a);if(Array.isArray(a))return a.map(t.bind(this,e));if("object"==typeof a){if(null===a)return null;const i={};return Object.keys(a).forEach((o=>{i[o]=t(e,a[o])})),i}return a}});var Zt=Object.freeze({__proto__:null,stringifyBigInts:function t(e){if("bigint"==typeof e||void 0!==e.eq)return e.toString(10);if(Array.isArray(e))return e.map(t);if("object"==typeof e){const a={};return Object.keys(e).forEach((i=>{a[i]=t(e[i])})),a}return e},unstringifyBigInts:function t(e){if("string"==typeof e&&/^[0-9]+$/.test(e))return f(e);if("string"==typeof e&&/^0x[0-9a-fA-F]+$/.test(e))return f(e);if(Array.isArray(e))return e.map(t);if("object"==typeof e){const a={};return Object.keys(e).forEach((i=>{a[i]=t(e[i])})),a}return e},beBuff2int:function(t){let e=f.zero;for(let a=0;a<t.length;a++){const i=f(t[t.length-a-1]);e=e.add(i.shiftLeft(8*a))}return e},beInt2Buff:function(t,e){let a=t,i=e-1;const o=new Uint8Array(e);for(;a.gt(f.zero)&&i>=0;){let t=Number(a.and(f("255")));o[i]=t,i--,a=a.shiftRight(8)}if(!a.eq(f.zero))throw new Error("Number does not fit in this length");return o},leBuff2int:function(t){let e=f.zero;for(let a=0;a<t.length;a++){const i=f(t[a]);e=e.add(i.shiftLeft(8*a))}return e},leInt2Buff:function(t,e){let a=t,i=0;const o=new Uint8Array(e);for(;a.gt(f.zero)&&i<o.length;){let t=Number(a.and(f(255)));o[i]=t,i++,a=a.shiftRight(8)}if(!a.eq(f.zero))throw new Error("Number does not fit in this length");return o}});let Jt={};"function"==typeof BigInt?Object.assign(Jt,$t):Object.assign(Jt,Zt);const Yt=[];for(let t=0;t<256;t++)Yt[t]=Wt(t,8);function Wt(t,e){let a=0,i=t;for(let t=0;t<e;t++)a<<=1,a|=1&i,i>>=1;return a}Jt.bitReverse=function(t,e){return(Yt[t>>>24]|Yt[t>>>16&255]<<8|Yt[t>>>8&255]<<16|Yt[255&t]<<24)>>>32-e},Jt.log2=function(t){return(0!=(4294901760&t)?(t&=4294901760,16):0)|(0!=(4278255360&t)?(t&=4278255360,8):0)|(0!=(4042322160&t)?(t&=4042322160,4):0)|(0!=(3435973836&t)?(t&=3435973836,2):0)|0!=(2863311530&t)},Jt.buffReverseBits=function(t,e){const a=t.byteLength/e,i=Jt.log2(a);if(a!=1<<i)throw new Error("Invalid number of pointers");for(let o=0;o<a;o++){const a=Jt.bitReverse(o,i);if(o>a){const i=t.slice(o*e,(o+1)*e);t.set(t.slice(a*e,(a+1)*e),o*e),t.set(i,a*e)}}},Jt.array2buffer=function(t,e){const a=new Uint8Array(e*t.length);for(let i=0;i<t.length;i++)a.set(t[i],i*e);return a},Jt.buffer2array=function(t,e){const a=t.byteLength/e,i=new Array(a);for(let o=0;o<a;o++)i[o]=t.slice(o*e,o*e+e);return i};let{bitReverse:Xt,log2:te,buffReverseBits:ee,stringifyBigInts:ae,unstringifyBigInts:ie,beBuff2int:oe,beInt2Buff:ne,leBuff2int:re,leInt2Buff:ce,array2buffer:le,buffer2array:se,stringifyFElements:de,unstringifyFElements:ue}=Jt;var fe=Object.freeze({__proto__:null,bitReverse:Xt,log2:te,buffReverseBits:ee,stringifyBigInts:ae,unstringifyBigInts:ie,beBuff2int:oe,beInt2Buff:ne,leBuff2int:re,leInt2Buff:ce,array2buffer:le,buffer2array:se,stringifyFElements:de,unstringifyFElements:ue});const ge=1<<30;class _e{constructor(t){this.buffers=[],this.byteLength=t;for(let e=0;e<t;e+=ge){const a=Math.min(t-e,ge);this.buffers.push(new Uint8Array(a))}}slice(t,e){void 0===e&&(e=this.byteLength),void 0===t&&(t=0);const a=e-t,i=Math.floor(t/ge);if(i==Math.floor((t+a-1)/ge)||0==a)return this.buffers[i].slice(t%ge,t%ge+a);let o,n=i,r=t%ge,c=a;for(;c>0;){const t=r+c>ge?ge-r:c,e=new Uint8Array(this.buffers[n].buffer,this.buffers[n].byteOffset+r,t);if(t==a)return e.slice();o||(o=a<=ge?new Uint8Array(a):new _e(a)),o.set(e,a-c),c-=t,n++,r=0}return o}set(t,e){void 0===e&&(e=0);const a=t.byteLength;if(0==a)return;const i=Math.floor(e/ge);if(i==Math.floor((e+a-1)/ge))return t instanceof _e&&1==t.buffers.length?this.buffers[i].set(t.buffers[0],e%ge):this.buffers[i].set(t,e%ge);let o=i,n=e%ge,r=a;for(;r>0;){const e=n+r>ge?ge-n:r,i=t.slice(a-r,a-r+e);new Uint8Array(this.buffers[o].buffer,this.buffers[o].byteOffset+n,e).set(i),r-=e,o++,n=0}}}function pe(t,e,a,i){return async function(o){const n=Math.floor(o.byteLength/a);if(n*a!==o.byteLength)throw new Error("Invalid buffer size");const r=Math.floor(n/t.concurrency),c=[];for(let l=0;l<t.concurrency;l++){let s;if(s=l<t.concurrency-1?r:n-l*r,0==s)continue;const d=[{cmd:"ALLOCSET",var:0,buff:o.slice(l*r*a,l*r*a+s*a)},{cmd:"ALLOC",var:1,len:i*s},{cmd:"CALL",fnName:e,params:[{var:0},{val:s},{var:1}]},{cmd:"GET",out:0,var:1,len:i*s}];c.push(t.queueAction(d))}const l=await Promise.all(c);let s;s=o instanceof _e?new _e(n*i):new Uint8Array(n*i);let d=0;for(let t=0;t<l.length;t++)s.set(l[t][0],d),d+=l[t][0].byteLength;return s}}class he{constructor(t,e,a,i){if(this.tm=t,this.prefix=e,this.p=i,this.n8=a,this.type="F1",this.m=1,this.half=Q(i,B),this.bitLength=O(i),this.mask=V(q(B,this.bitLength),B),this.pOp1=t.alloc(a),this.pOp2=t.alloc(a),this.pOp3=t.alloc(a),this.tm.instance.exports[e+"_zero"](this.pOp1),this.zero=this.tm.getBuff(this.pOp1,this.n8),this.tm.instance.exports[e+"_one"](this.pOp1),this.one=this.tm.getBuff(this.pOp1,this.n8),this.negone=this.neg(this.one),this.two=this.add(this.one,this.one),this.n64=Math.floor(a/8),this.n32=Math.floor(a/4),8*this.n64!=this.n8)throw new Error("n8 must be a multiple of 8");this.half=Q(this.p,B),this.nqr=this.two;let o=this.exp(this.nqr,this.half);for(;!this.eq(o,this.negone);)this.nqr=this.add(this.nqr,this.one),o=this.exp(this.nqr,this.half);this.shift=this.mul(this.nqr,this.nqr),this.shiftInv=this.inv(this.shift),this.s=0;let n=V(this.p,B);for(;!R(n);)this.s=this.s+1,n=Q(n,B);this.w=[],this.w[this.s]=this.exp(this.nqr,n);for(let t=this.s-1;t>=0;t--)this.w[t]=this.square(this.w[t+1]);if(!this.eq(this.w[0],this.one))throw new Error("Error calculating roots of unity");this.batchToMontgomery=pe(t,e+"_batchToMontgomery",this.n8,this.n8),this.batchFromMontgomery=pe(t,e+"_batchFromMontgomery",this.n8,this.n8)}op2(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op2Bool(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2)}op1(t,e){return this.tm.setBuff(this.pOp1,e),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op1Bool(t,e){return this.tm.setBuff(this.pOp1,e),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3)}add(t,e){return this.op2("_add",t,e)}eq(t,e){return this.op2Bool("_eq",t,e)}isZero(t){return this.op1Bool("_isZero",t)}sub(t,e){return this.op2("_sub",t,e)}neg(t){return this.op1("_neg",t)}inv(t){return this.op1("_inverse",t)}toMontgomery(t){return this.op1("_toMontgomery",t)}fromMontgomery(t){return this.op1("_fromMontgomery",t)}mul(t,e){return this.op2("_mul",t,e)}div(t,e){return this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_inverse"](this.pOp2,this.pOp2),this.tm.instance.exports[this.prefix+"_mul"](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}square(t){return this.op1("_square",t)}isSquare(t){return this.op1Bool("_isSquare",t)}sqrt(t){return this.op1("_sqrt",t)}exp(t,e){return e instanceof Uint8Array||(e=x(G(e))),this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_exp"](this.pOp1,this.pOp2,e.byteLength,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}isNegative(t){return this.op1Bool("_isNegative",t)}e(t,e){if(t instanceof Uint8Array)return t;let a=G(t,e);U(a)?(a=H(a),ot(a,this.p)&&(a=tt(a,this.p)),a=V(this.p,a)):ot(a,this.p)&&(a=tt(a,this.p));const i=ce(a,this.n8);return this.toMontgomery(i)}toString(t,e){const a=this.fromMontgomery(t),i=C(a,0);return F(i,e)}fromRng(t){let e;const a=new Uint8Array(this.n8);do{e=E;for(let a=0;a<this.n64;a++)e=K(e,q(t.nextU64(),64*a));e=ct(e,this.mask)}while(rt(e,this.p));return A(a,0,e,this.n8),a}random(){return this.fromRng(It())}toObject(t){const e=this.fromMontgomery(t);return C(e,0)}fromObject(t){const e=new Uint8Array(this.n8);return A(e,0,t,this.n8),this.toMontgomery(e)}toRprLE(t,e,a){t.set(this.fromMontgomery(a),e)}toRprBE(t,e,a){const i=this.fromMontgomery(a);for(let t=0;t<this.n8/2;t++){const e=i[t];i[t]=i[this.n8-1-t],i[this.n8-1-t]=e}t.set(i,e)}fromRprLE(t,e){e=e||0;const a=t.slice(e,e+this.n8);return this.toMontgomery(a)}async batchInverse(t){let e=!1;const a=this.n8,i=this.n8;Array.isArray(t)?(t=le(t,a),e=!0):t=t.slice(0,t.byteLength);const o=Math.floor(t.byteLength/a);if(o*a!==t.byteLength)throw new Error("Invalid buffer size");const n=Math.floor(o/this.tm.concurrency),r=[];for(let e=0;e<this.tm.concurrency;e++){let c;if(c=e<this.tm.concurrency-1?n:o-e*n,0==c)continue;const l=[{cmd:"ALLOCSET",var:0,buff:t.slice(e*n*a,e*n*a+c*a)},{cmd:"ALLOC",var:1,len:i*c},{cmd:"CALL",fnName:this.prefix+"_batchInverse",params:[{var:0},{val:a},{val:c},{var:1},{val:i}]},{cmd:"GET",out:0,var:1,len:i*c}];r.push(this.tm.queueAction(l))}const c=await Promise.all(r);let l;l=t instanceof _e?new _e(o*i):new Uint8Array(o*i);let s=0;for(let t=0;t<c.length;t++)l.set(c[t][0],s),s+=c[t][0].byteLength;return e?se(l,i):l}}class me{constructor(t,e,a){this.tm=t,this.prefix=e,this.F=a,this.type="F2",this.m=2*a.m,this.n8=2*this.F.n8,this.n32=2*this.F.n32,this.n64=2*this.F.n64,this.pOp1=t.alloc(2*a.n8),this.pOp2=t.alloc(2*a.n8),this.pOp3=t.alloc(2*a.n8),this.tm.instance.exports[e+"_zero"](this.pOp1),this.zero=t.getBuff(this.pOp1,this.n8),this.tm.instance.exports[e+"_one"](this.pOp1),this.one=t.getBuff(this.pOp1,this.n8),this.negone=this.neg(this.one),this.two=this.add(this.one,this.one)}op2(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op2Bool(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2)}op1(t,e){return this.tm.setBuff(this.pOp1,e),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op1Bool(t,e){return this.tm.setBuff(this.pOp1,e),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3)}add(t,e){return this.op2("_add",t,e)}eq(t,e){return this.op2Bool("_eq",t,e)}isZero(t){return this.op1Bool("_isZero",t)}sub(t,e){return this.op2("_sub",t,e)}neg(t){return this.op1("_neg",t)}inv(t){return this.op1("_inverse",t)}isNegative(t){return this.op1Bool("_isNegative",t)}toMontgomery(t){return this.op1("_toMontgomery",t)}fromMontgomery(t){return this.op1("_fromMontgomery",t)}mul(t,e){return this.op2("_mul",t,e)}mul1(t,e){return this.op2("_mul1",t,e)}div(t,e){return this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_inverse"](this.pOp2,this.pOp2),this.tm.instance.exports[this.prefix+"_mul"](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}square(t){return this.op1("_square",t)}isSquare(t){return this.op1Bool("_isSquare",t)}sqrt(t){return this.op1("_sqrt",t)}exp(t,e){return e instanceof Uint8Array||(e=x(G(e))),this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_exp"](this.pOp1,this.pOp2,e.byteLength,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}e(t,e){if(t instanceof Uint8Array)return t;if(Array.isArray(t)&&2==t.length){const a=this.F.e(t[0],e),i=this.F.e(t[1],e),o=new Uint8Array(2*this.F.n8);return o.set(a),o.set(i,2*this.F.n8),o}throw new Error("invalid F2")}toString(t,e){return`[${this.F.toString(t.slice(0,this.F.n8),e)}, ${this.F.toString(t.slice(this.F.n8),e)}]`}fromRng(t){const e=this.F.fromRng(t),a=this.F.fromRng(t),i=new Uint8Array(2*this.F.n8);return i.set(e),i.set(a,this.F.n8),i}random(){return this.fromRng(It())}toObject(t){return[this.F.toObject(t.slice(0,this.F.n8)),this.F.toObject(t.slice(this.F.n8,2*this.F.n8))]}fromObject(t){const e=new Uint8Array(2*this.F.n8),a=this.F.fromObject(t[0]),i=this.F.fromObject(t[1]);return e.set(a),e.set(i,this.F.n8),e}c1(t){return t.slice(0,this.F.n8)}c2(t){return t.slice(this.F.n8)}}class Le{constructor(t,e,a){this.tm=t,this.prefix=e,this.F=a,this.type="F3",this.m=3*a.m,this.n8=3*this.F.n8,this.n32=3*this.F.n32,this.n64=3*this.F.n64,this.pOp1=t.alloc(3*a.n8),this.pOp2=t.alloc(3*a.n8),this.pOp3=t.alloc(3*a.n8),this.tm.instance.exports[e+"_zero"](this.pOp1),this.zero=t.getBuff(this.pOp1,this.n8),this.tm.instance.exports[e+"_one"](this.pOp1),this.one=t.getBuff(this.pOp1,this.n8),this.negone=this.neg(this.one),this.two=this.add(this.one,this.one)}op2(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op2Bool(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2)}op1(t,e){return this.tm.setBuff(this.pOp1,e),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}op1Bool(t,e){return this.tm.setBuff(this.pOp1,e),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3)}eq(t,e){return this.op2Bool("_eq",t,e)}isZero(t){return this.op1Bool("_isZero",t)}add(t,e){return this.op2("_add",t,e)}sub(t,e){return this.op2("_sub",t,e)}neg(t){return this.op1("_neg",t)}inv(t){return this.op1("_inverse",t)}isNegative(t){return this.op1Bool("_isNegative",t)}toMontgomery(t){return this.op1("_toMontgomery",t)}fromMontgomery(t){return this.op1("_fromMontgomery",t)}mul(t,e){return this.op2("_mul",t,e)}div(t,e){return this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_inverse"](this.pOp2,this.pOp2),this.tm.instance.exports[this.prefix+"_mul"](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,this.n8)}square(t){return this.op1("_square",t)}isSquare(t){return this.op1Bool("_isSquare",t)}sqrt(t){return this.op1("_sqrt",t)}exp(t,e){return e instanceof Uint8Array||(e=x(G(e))),this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[this.prefix+"_exp"](this.pOp1,this.pOp2,e.byteLength,this.pOp3),this.getBuff(this.pOp3,this.n8)}e(t,e){if(t instanceof Uint8Array)return t;if(Array.isArray(t)&&3==t.length){const a=this.F.e(t[0],e),i=this.F.e(t[1],e),o=this.F.e(t[2],e),n=new Uint8Array(3*this.F.n8);return n.set(a),n.set(i,this.F.n8),n.set(o,2*this.F.n8),n}throw new Error("invalid F3")}toString(t,e){return`[${this.F.toString(t.slice(0,this.F.n8),e)}, ${this.F.toString(t.slice(this.F.n8,2*this.F.n8),e)}, ${this.F.toString(t.slice(2*this.F.n8),e)}]`}fromRng(t){const e=this.F.fromRng(t),a=this.F.fromRng(t),i=this.F.fromRng(t),o=new Uint8Array(3*this.F.n8);return o.set(e),o.set(a,this.F.n8),o.set(i,2*this.F.n8),o}random(){return this.fromRng(It())}toObject(t){return[this.F.toObject(t.slice(0,this.F.n8)),this.F.toObject(t.slice(this.F.n8,2*this.F.n8)),this.F.toObject(t.slice(2*this.F.n8,3*this.F.n8))]}fromObject(t){const e=new Uint8Array(3*this.F.n8),a=this.F.fromObject(t[0]),i=this.F.fromObject(t[1]),o=this.F.fromObject(t[2]);return e.set(a),e.set(i,this.F.n8),e.set(o,2*this.F.n8),e}c1(t){return t.slice(0,this.F.n8)}c2(t){return t.slice(this.F.n8,2*this.F.n8)}c3(t){return t.slice(2*this.F.n8)}}class we{constructor(t,e,a,i,o,n){this.tm=t,this.prefix=e,this.F=a,this.pOp1=t.alloc(3*a.n8),this.pOp2=t.alloc(3*a.n8),this.pOp3=t.alloc(3*a.n8),this.tm.instance.exports[e+"_zero"](this.pOp1),this.zero=this.tm.getBuff(this.pOp1,3*a.n8),this.tm.instance.exports[e+"_zeroAffine"](this.pOp1),this.zeroAffine=this.tm.getBuff(this.pOp1,2*a.n8),this.one=this.tm.getBuff(i,3*a.n8),this.g=this.one,this.oneAffine=this.tm.getBuff(i,2*a.n8),this.gAffine=this.oneAffine,this.b=this.tm.getBuff(o,a.n8),n&&(this.cofactor=x(n)),this.negone=this.neg(this.one),this.two=this.add(this.one,this.one),this.batchLEMtoC=pe(t,e+"_batchLEMtoC",2*a.n8,a.n8),this.batchLEMtoU=pe(t,e+"_batchLEMtoU",2*a.n8,2*a.n8),this.batchCtoLEM=pe(t,e+"_batchCtoLEM",a.n8,2*a.n8),this.batchUtoLEM=pe(t,e+"_batchUtoLEM",2*a.n8,2*a.n8),this.batchToJacobian=pe(t,e+"_batchToJacobian",2*a.n8,3*a.n8),this.batchToAffine=pe(t,e+"_batchToAffine",3*a.n8,2*a.n8)}op2(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,3*this.F.n8)}op2bool(t,e,a){return this.tm.setBuff(this.pOp1,e),this.tm.setBuff(this.pOp2,a),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp2,this.pOp3)}op1(t,e){return this.tm.setBuff(this.pOp1,e),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3),this.tm.getBuff(this.pOp3,3*this.F.n8)}op1Affine(t,e){return this.tm.setBuff(this.pOp1,e),this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3),this.tm.getBuff(this.pOp3,2*this.F.n8)}op1Bool(t,e){return this.tm.setBuff(this.pOp1,e),!!this.tm.instance.exports[this.prefix+t](this.pOp1,this.pOp3)}add(t,e){if(t.byteLength==3*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2("_add",t,e);if(e.byteLength==2*this.F.n8)return this.op2("_addMixed",t,e);throw new Error("invalid point size")}if(t.byteLength==2*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2("_addMixed",e,t);if(e.byteLength==2*this.F.n8)return this.op2("_addAffine",t,e);throw new Error("invalid point size")}throw new Error("invalid point size")}sub(t,e){if(t.byteLength==3*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2("_sub",t,e);if(e.byteLength==2*this.F.n8)return this.op2("_subMixed",t,e);throw new Error("invalid point size")}if(t.byteLength==2*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2("_subMixed",e,t);if(e.byteLength==2*this.F.n8)return this.op2("_subAffine",t,e);throw new Error("invalid point size")}throw new Error("invalid point size")}neg(t){if(t.byteLength==3*this.F.n8)return this.op1("_neg",t);if(t.byteLength==2*this.F.n8)return this.op1Affine("_negAffine",t);throw new Error("invalid point size")}double(t){if(t.byteLength==3*this.F.n8)return this.op1("_double",t);if(t.byteLength==2*this.F.n8)return this.op1("_doubleAffine",t);throw new Error("invalid point size")}isZero(t){if(t.byteLength==3*this.F.n8)return this.op1Bool("_isZero",t);if(t.byteLength==2*this.F.n8)return this.op1Bool("_isZeroAffine",t);throw new Error("invalid point size")}timesScalar(t,e){let a;if(e instanceof Uint8Array||(e=x(G(e))),t.byteLength==3*this.F.n8)a=this.prefix+"_timesScalar";else{if(t.byteLength!=2*this.F.n8)throw new Error("invalid point size");a=this.prefix+"_timesScalarAffine"}return this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[a](this.pOp1,this.pOp2,e.byteLength,this.pOp3),this.tm.getBuff(this.pOp3,3*this.F.n8)}timesFr(t,e){let a;if(t.byteLength==3*this.F.n8)a=this.prefix+"_timesFr";else{if(t.byteLength!=2*this.F.n8)throw new Error("invalid point size");a=this.prefix+"_timesFrAffine"}return this.tm.setBuff(this.pOp1,t),this.tm.setBuff(this.pOp2,e),this.tm.instance.exports[a](this.pOp1,this.pOp2,this.pOp3),this.tm.getBuff(this.pOp3,3*this.F.n8)}eq(t,e){if(t.byteLength==3*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2bool("_eq",t,e);if(e.byteLength==2*this.F.n8)return this.op2bool("_eqMixed",t,e);throw new Error("invalid point size")}if(t.byteLength==2*this.F.n8){if(e.byteLength==3*this.F.n8)return this.op2bool("_eqMixed",e,t);if(e.byteLength==2*this.F.n8)return this.op2bool("_eqAffine",t,e);throw new Error("invalid point size")}throw new Error("invalid point size")}toAffine(t){if(t.byteLength==3*this.F.n8)return this.op1Affine("_toAffine",t);if(t.byteLength==2*this.F.n8)return t;throw new Error("invalid point size")}toJacobian(t){if(t.byteLength==3*this.F.n8)return t;if(t.byteLength==2*this.F.n8)return this.op1("_toJacobian",t);throw new Error("invalid point size")}toRprUncompressed(t,e,a){if(this.tm.setBuff(this.pOp1,a),a.byteLength==3*this.F.n8)this.tm.instance.exports[this.prefix+"_toAffine"](this.pOp1,this.pOp1);else if(a.byteLength!=2*this.F.n8)throw new Error("invalid point size");this.tm.instance.exports[this.prefix+"_LEMtoU"](this.pOp1,this.pOp1);const i=this.tm.getBuff(this.pOp1,2*this.F.n8);t.set(i,e)}fromRprUncompressed(t,e){const a=t.slice(e,e+2*this.F.n8);return this.tm.setBuff(this.pOp1,a),this.tm.instance.exports[this.prefix+"_UtoLEM"](this.pOp1,this.pOp1),this.tm.getBuff(this.pOp1,2*this.F.n8)}toRprCompressed(t,e,a){if(this.tm.setBuff(this.pOp1,a),a.byteLength==3*this.F.n8)this.tm.instance.exports[this.prefix+"_toAffine"](this.pOp1,this.pOp1);else if(a.byteLength!=2*this.F.n8)throw new Error("invalid point size");this.tm.instance.exports[this.prefix+"_LEMtoC"](this.pOp1,this.pOp1);const i=this.tm.getBuff(this.pOp1,this.F.n8);t.set(i,e)}fromRprCompressed(t,e){const a=t.slice(e,e+this.F.n8);return this.tm.setBuff(this.pOp1,a),this.tm.instance.exports[this.prefix+"_CtoLEM"](this.pOp1,this.pOp2),this.tm.getBuff(this.pOp2,2*this.F.n8)}toUncompressed(t){const e=new Uint8Array(2*this.F.n8);return this.toRprUncompressed(e,0,t),e}toRprLEM(t,e,a){if(a.byteLength!=2*this.F.n8){if(a.byteLength!=3*this.F.n8)throw new Error("invalid point size");{this.tm.setBuff(this.pOp1,a),this.tm.instance.exports[this.prefix+"_toAffine"](this.pOp1,this.pOp1);const i=this.tm.getBuff(this.pOp1,2*this.F.n8);t.set(i,e)}}else t.set(a,e)}fromRprLEM(t,e){return e=e||0,t.slice(e,e+2*this.F.n8)}toString(t,e){if(t.byteLength==3*this.F.n8){return`[ ${this.F.toString(t.slice(0,this.F.n8),e)}, ${this.F.toString(t.slice(this.F.n8,2*this.F.n8),e)}, ${this.F.toString(t.slice(2*this.F.n8),e)} ]`}if(t.byteLength==2*this.F.n8){return`[ ${this.F.toString(t.slice(0,this.F.n8),e)}, ${this.F.toString(t.slice(this.F.n8),e)} ]`}throw new Error("invalid point size")}isValid(t){if(this.isZero(t))return!0;const e=this.F,a=this.toAffine(t),i=a.slice(0,this.F.n8),o=a.slice(this.F.n8,2*this.F.n8),n=e.add(e.mul(e.square(i),i),this.b),r=e.square(o);return e.eq(n,r)}fromRng(t){const e=this.F;let a,i,o=[];do{o[0]=e.fromRng(t),a=t.nextBool(),i=e.add(e.mul(e.square(o[0]),o[0]),this.b)}while(!e.isSquare(i));o[1]=e.sqrt(i);a^e.isNegative(o[1])&&(o[1]=e.neg(o[1]));let n=new Uint8Array(2*this.F.n8);return n.set(o[0]),n.set(o[1],this.F.n8),this.cofactor&&(n=this.timesScalar(n,this.cofactor)),n}toObject(t){if(this.isZero(t))return[this.F.toObject(this.F.zero),this.F.toObject(this.F.one),this.F.toObject(this.F.zero)];const e=this.F.toObject(t.slice(0,this.F.n8)),a=this.F.toObject(t.slice(this.F.n8,2*this.F.n8));let i;return i=t.byteLength==3*this.F.n8?this.F.toObject(t.slice(2*this.F.n8,3*this.F.n8)):this.F.toObject(this.F.one),[e,a,i]}fromObject(t){const e=this.F.fromObject(t[0]),a=this.F.fromObject(t[1]);let i;if(i=3==t.length?this.F.fromObject(t[2]):this.F.one,this.F.isZero(i,this.F.one))return this.zeroAffine;if(this.F.eq(i,this.F.one)){const t=new Uint8Array(2*this.F.n8);return t.set(e),t.set(a,this.F.n8),t}{const t=new Uint8Array(3*this.F.n8);return t.set(e),t.set(a,this.F.n8),t.set(i,2*this.F.n8),t}}e(t){return t instanceof Uint8Array?t:this.fromObject(t)}x(t){return this.toAffine(t).slice(0,this.F.n8)}y(t){return this.toAffine(t).slice(this.F.n8)}}function be(t){const e=32767;let a,i;async function o(t){const o=new Uint8Array(t.code),n=await WebAssembly.compile(o);i=new WebAssembly.Memory({initial:t.init,maximum:e}),a=await WebAssembly.instantiate(n,{env:{memory:i}})}function n(t){const a=new Uint32Array(i.buffer,0,1);for(;3&a[0];)a[0]++;const o=a[0];if(a[0]+=t,a[0]+t>i.buffer.byteLength){const o=i.buffer.byteLength/65536;let n=Math.floor((a[0]+t)/65536)+1;n>e&&(n=e),i.grow(n-o)}return o}function r(t){const e=n(t.byteLength);return l(e,t),e}function c(t,e){const a=new Uint8Array(i.buffer);return new Uint8Array(a.buffer,a.byteOffset+t,e)}function l(t,e){new Uint8Array(i.buffer).set(new Uint8Array(e),t)}function s(t){if("INIT"==t[0].cmd)return o(t[0]);const e={vars:[],out:[]},s=new Uint32Array(i.buffer,0,1)[0];for(let i=0;i<t.length;i++)switch(t[i].cmd){case"ALLOCSET":e.vars[t[i].var]=r(t[i].buff);break;case"ALLOC":e.vars[t[i].var]=n(t[i].len);break;case"SET":l(e.vars[t[i].var],t[i].buff);break;case"CALL":{const o=[];for(let a=0;a<t[i].params.length;a++){const n=t[i].params[a];void 0!==n.var?o.push(e.vars[n.var]+(n.offset||0)):void 0!==n.val&&o.push(n.val)}a.exports[t[i].fnName](...o);break}case"GET":e.out[t[i].out]=c(e.vars[t[i].var],t[i].len).slice();break;default:throw new Error("Invalid cmd")}return new Uint32Array(i.buffer,0,1)[0]=s,e.out}return t&&(t.onmessage=function(e){let a;if(a=e.data?e.data:e,"INIT"==a[0].cmd)o(a[0]).then((function(){t.postMessage(a.result)}));else if("TERMINATE"==a[0].cmd)t.close();else{const e=s(a);t.postMessage(e)}}),s}var ye={},Ae=Worker;class Ie{constructor(){this.promise=new Promise(((t,e)=>{this.reject=e,this.resolve=t}))}}var Ce;const ve="data:application/javascript;base64,"+(Ce="("+be.toString()+")(self)",globalThis.btoa(Ce));class Fe{constructor(){this.actionQueue=[],this.oldPFree=0}startSyncOp(){if(0!=this.oldPFree)throw new Error("Sync operation in progress");this.oldPFree=this.u32[0]}endSyncOp(){if(0==this.oldPFree)throw new Error("No sync operation in progress");this.u32[0]=this.oldPFree,this.oldPFree=0}postAction(t,e,a,i){if(this.working[t])throw new Error("Posting a job t a working worker");return this.working[t]=!0,this.pendingDeferreds[t]=i||new Ie,this.workers[t].postMessage(e,a),this.pendingDeferreds[t].promise}processWorks(){for(let t=0;t<this.workers.length&&this.actionQueue.length>0;t++)if(0==this.working[t]){const e=this.actionQueue.shift();this.postAction(t,e.data,e.transfers,e.deferred)}}queueAction(t,e){const a=new Ie;if(this.singleThread){const e=this.taskManager(t);a.resolve(e)}else this.actionQueue.push({data:t,transfers:e,deferred:a}),this.processWorks();return a.promise}resetMemory(){this.u32[0]=this.initalPFree}allocBuff(t){const e=this.alloc(t.byteLength);return this.setBuff(e,t),e}getBuff(t,e){return this.u8.slice(t,t+e)}setBuff(t,e){this.u8.set(new Uint8Array(e),t)}alloc(t){for(;3&this.u32[0];)this.u32[0]++;const e=this.u32[0];return this.u32[0]+=t,e}async terminate(){for(let t=0;t<this.workers.length;t++)this.workers[t].postMessage([{cmd:"TERMINATE"}]);var t;await(t=200,new Promise((e=>setTimeout(e,t))))}}function xe(t,e){const a=t[e],i=t.Fr,o=t.tm;t[e].batchApplyKey=async function(t,n,r,c,l){let s,d,u,f,g;if(c=c||"affine",l=l||"affine","G1"==e)"jacobian"==c?(u=3*a.F.n8,s="g1m_batchApplyKey"):(u=2*a.F.n8,s="g1m_batchApplyKeyMixed"),f=3*a.F.n8,"jacobian"==l?g=3*a.F.n8:(d="g1m_batchToAffine",g=2*a.F.n8);else if("G2"==e)"jacobian"==c?(u=3*a.F.n8,s="g2m_batchApplyKey"):(u=2*a.F.n8,s="g2m_batchApplyKeyMixed"),f=3*a.F.n8,"jacobian"==l?g=3*a.F.n8:(d="g2m_batchToAffine",g=2*a.F.n8);else{if("Fr"!=e)throw new Error("Invalid group: "+e);s="frm_batchApplyKey",u=a.n8,f=a.n8,g=a.n8}const _=Math.floor(t.byteLength/u),p=Math.floor(_/o.concurrency),h=[];r=i.e(r);let m=i.e(n);for(let e=0;e<o.concurrency;e++){let a;if(a=e<o.concurrency-1?p:_-e*p,0==a)continue;const n=[];n.push({cmd:"ALLOCSET",var:0,buff:t.slice(e*p*u,e*p*u+a*u)}),n.push({cmd:"ALLOCSET",var:1,buff:m}),n.push({cmd:"ALLOCSET",var:2,buff:r}),n.push({cmd:"ALLOC",var:3,len:a*Math.max(f,g)}),n.push({cmd:"CALL",fnName:s,params:[{var:0},{val:a},{var:1},{var:2},{var:3}]}),d&&n.push({cmd:"CALL",fnName:d,params:[{var:3},{val:a},{var:3}]}),n.push({cmd:"GET",out:0,var:3,len:a*g}),h.push(o.queueAction(n)),m=i.mul(m,i.exp(r,a))}const L=await Promise.all(h);let w;w=t instanceof _e?new _e(_*g):new Uint8Array(_*g);let b=0;for(let t=0;t<L.length;t++)w.set(L[t][0],b),b+=L[t][0].byteLength;return w}}const Ee=[1,1,1,1,2,3,4,5,6,7,7,8,9,10,11,12,13,13,14,15,16,16,17,17,17,17,17,17,17,17,17,17];function Be(t,e){const a=t[e],i=a.tm;async function o(t,i,o,n,r){if(!(t instanceof Uint8Array))throw n&&n.error(`${r} _multiExpChunk buffBases is not Uint8Array`),new Error(`${r} _multiExpChunk buffBases is not Uint8Array`);if(!(i instanceof Uint8Array))throw n&&n.error(`${r} _multiExpChunk buffScalars is not Uint8Array`),new Error(`${r} _multiExpChunk buffScalars is not Uint8Array`);let c,l;if(o=o||"affine","G1"==e)"affine"==o?(l="g1m_multiexpAffine_chunk",c=2*a.F.n8):(l="g1m_multiexp_chunk",c=3*a.F.n8);else{if("G2"!=e)throw new Error("Invalid group");"affine"==o?(l="g2m_multiexpAffine_chunk",c=2*a.F.n8):(l="g2m_multiexp_chunk",c=3*a.F.n8)}const s=Math.floor(t.byteLength/c);if(0==s)return a.zero;const d=Math.floor(i.byteLength/s);if(d*s!=i.byteLength)throw new Error("Scalar size does not match");const u=Ee[te(s)],f=Math.floor((8*d-1)/u)+1,g=[];for(let e=0;e<f;e++){const o=[{cmd:"ALLOCSET",var:0,buff:t},{cmd:"ALLOCSET",var:1,buff:i},{cmd:"ALLOC",var:2,len:3*a.F.n8},{cmd:"CALL",fnName:l,params:[{var:0},{var:1},{val:d},{val:s},{val:e*u},{val:Math.min(8*d-e*u,u)},{var:2}]},{cmd:"GET",out:0,var:2,len:3*a.F.n8}];g.push(a.tm.queueAction(o))}const _=await Promise.all(g);let p=a.zero;for(let t=_.length-1;t>=0;t--){if(!a.isZero(p))for(let t=0;t<u;t++)p=a.double(p);p=a.add(p,_[t][0])}return p}async function n(t,n,r,c,l){const s=1<<22;let d;if("G1"==e)d="affine"==r?2*a.F.n8:3*a.F.n8;else{if("G2"!=e)throw new Error("Invalid group");d="affine"==r?2*a.F.n8:3*a.F.n8}const u=Math.floor(t.byteLength/d),f=Math.floor(n.byteLength/u);if(f*u!=n.byteLength)throw new Error("Scalar size does not match");const g=Ee[te(u)],_=Math.floor((8*f-1)/g)+1;let p;p=Math.floor(u/(i.concurrency/_)),p>s&&(p=s),p<1024&&(p=1024);const h=[];for(let e=0;e<u;e+=p){c&&c.debug(`Multiexp start: ${l}: ${e}/${u}`);const a=Math.min(u-e,p),i=t.slice(e*d,(e+a)*d),s=n.slice(e*f,(e+a)*f);h.push(o(i,s,r,c,l).then((t=>(c&&c.debug(`Multiexp end: ${l}: ${e}/${u}`),t))))}const m=await Promise.all(h);let L=a.zero;for(let t=m.length-1;t>=0;t--)L=a.add(L,m[t]);return L}a.multiExp=async function(t,e,a,i){return await n(t,e,"jacobian",a,i)},a.multiExpAffine=async function(t,e,a,i){return await n(t,e,"affine",a,i)}}function Se(t,e){const a=t[e],i=t.Fr,o=a.tm;async function n(t,c,l,s,d,u){l=l||"affine",s=s||"affine";let f,g,_,p,h,m,L,w;"G1"==e?("affine"==l?(f=2*a.F.n8,p="g1m_batchToJacobian"):f=3*a.F.n8,g=3*a.F.n8,c&&(w="g1m_fftFinal"),L="g1m_fftJoin",m="g1m_fftMix","affine"==s?(_=2*a.F.n8,h="g1m_batchToAffine"):_=3*a.F.n8):"G2"==e?("affine"==l?(f=2*a.F.n8,p="g2m_batchToJacobian"):f=3*a.F.n8,g=3*a.F.n8,c&&(w="g2m_fftFinal"),L="g2m_fftJoin",m="g2m_fftMix","affine"==s?(_=2*a.F.n8,h="g2m_batchToAffine"):_=3*a.F.n8):"Fr"==e&&(f=a.n8,g=a.n8,_=a.n8,c&&(w="frm_fftFinal"),m="frm_fftMix",L="frm_fftJoin");let b=!1;Array.isArray(t)?(t=le(t,f),b=!0):t=t.slice(0,t.byteLength);const y=t.byteLength/f,A=te(y);if(1<<A!=y)throw new Error("fft must be multiple of 2");if(A==i.s+1){let e;return e=c?await async function(t,e,a,o,c){let l,s;l=t.slice(0,t.byteLength/2),s=t.slice(t.byteLength/2,t.byteLength);const d=[];d.push(n(l,!0,e,"jacobian",o,c)),d.push(n(s,!0,e,"jacobian",o,c)),[l,s]=await Promise.all(d);const u=await r(l,s,"fftJoinExtInv",i.one,i.shiftInv,"jacobian",a,o,c);let f;f=u[0].byteLength>1<<28?new _e(2*u[0].byteLength):new Uint8Array(2*u[0].byteLength);return f.set(u[0]),f.set(u[1],u[0].byteLength),f}(t,l,s,d,u):await async function(t,e,a,o,c){let l,s;l=t.slice(0,t.byteLength/2),s=t.slice(t.byteLength/2,t.byteLength);const d=[];[l,s]=await r(l,s,"fftJoinExt",i.one,i.shift,e,"jacobian",o,c),d.push(n(l,!1,"jacobian",a,o,c)),d.push(n(s,!1,"jacobian",a,o,c));const u=await Promise.all(d);let f;f=u[0].byteLength>1<<28?new _e(2*u[0].byteLength):new Uint8Array(2*u[0].byteLength);return f.set(u[0]),f.set(u[1],u[0].byteLength),f}(t,l,s,d,u),b?se(e,_):e}let I,C,v;c&&(I=i.inv(i.e(y))),ee(t,f);let F=Math.min(16384,y),x=y/F;for(;x<o.concurrency&&F>=16;)x*=2,F/=2;const E=te(F),B=[];for(let e=0;e<x;e++){d&&d.debug(`${u}: fft ${A} mix start: ${e}/${x}`);const a=[];a.push({cmd:"ALLOC",var:0,len:g*F});const i=t.slice(F*e*f,F*(e+1)*f);a.push({cmd:"SET",var:0,buff:i}),p&&a.push({cmd:"CALL",fnName:p,params:[{var:0},{val:F},{var:0}]});for(let t=1;t<=E;t++)a.push({cmd:"CALL",fnName:m,params:[{var:0},{val:F},{val:t}]});E==A?(w&&(a.push({cmd:"ALLOCSET",var:1,buff:I}),a.push({cmd:"CALL",fnName:w,params:[{var:0},{val:F},{var:1}]})),h&&a.push({cmd:"CALL",fnName:h,params:[{var:0},{val:F},{var:0}]}),a.push({cmd:"GET",out:0,var:0,len:F*_})):a.push({cmd:"GET",out:0,var:0,len:g*F}),B.push(o.queueAction(a).then((t=>(d&&d.debug(`${u}: fft ${A} mix end: ${e}/${x}`),t))))}v=await Promise.all(B);for(let t=0;t<x;t++)v[t]=v[t][0];for(let t=E+1;t<=A;t++){d&&d.debug(`${u}: fft  ${A}  join: ${t}/${A}`);const e=1<<A-t,a=x/e,n=[];for(let r=0;r<e;r++)for(let c=0;c<a/2;c++){const l=i.exp(i.w[t],c*F),s=i.w[t],f=r*a+c,p=r*a+c+a/2,m=[];m.push({cmd:"ALLOCSET",var:0,buff:v[f]}),m.push({cmd:"ALLOCSET",var:1,buff:v[p]}),m.push({cmd:"ALLOCSET",var:2,buff:l}),m.push({cmd:"ALLOCSET",var:3,buff:s}),m.push({cmd:"CALL",fnName:L,params:[{var:0},{var:1},{val:F},{var:2},{var:3}]}),t==A?(w&&(m.push({cmd:"ALLOCSET",var:4,buff:I}),m.push({cmd:"CALL",fnName:w,params:[{var:0},{val:F},{var:4}]}),m.push({cmd:"CALL",fnName:w,params:[{var:1},{val:F},{var:4}]})),h&&(m.push({cmd:"CALL",fnName:h,params:[{var:0},{val:F},{var:0}]}),m.push({cmd:"CALL",fnName:h,params:[{var:1},{val:F},{var:1}]})),m.push({cmd:"GET",out:0,var:0,len:F*_}),m.push({cmd:"GET",out:1,var:1,len:F*_})):(m.push({cmd:"GET",out:0,var:0,len:F*g}),m.push({cmd:"GET",out:1,var:1,len:F*g})),n.push(o.queueAction(m).then((i=>(d&&d.debug(`${u}: fft ${A} join  ${t}/${A}  ${r+1}/${e} ${c}/${a/2}`),i))))}const r=await Promise.all(n);for(let t=0;t<e;t++)for(let e=0;e<a/2;e++){const i=t*a+e,o=t*a+e+a/2,n=r.shift();v[i]=n[0],v[o]=n[1]}}if(C=t instanceof _e?new _e(y*_):new Uint8Array(y*_),c){C.set(v[0].slice((F-1)*_));let t=_;for(let e=x-1;e>0;e--)C.set(v[e],t),t+=F*_,delete v[e];C.set(v[0].slice(0,(F-1)*_),t),delete v[0]}else for(let t=0;t<x;t++)C.set(v[t],F*_*t),delete v[t];return b?se(C,_):C}async function r(t,n,r,c,l,s,d,u,f){let g,_,p,h,m,L;if("G1"==e)"affine"==s?(m=2*a.F.n8,_="g1m_batchToJacobian"):m=3*a.F.n8,L=3*a.F.n8,g="g1m_"+r,"affine"==d?(p="g1m_batchToAffine",h=2*a.F.n8):h=3*a.F.n8;else if("G2"==e)"affine"==s?(m=2*a.F.n8,_="g2m_batchToJacobian"):m=3*a.F.n8,g="g2m_"+r,L=3*a.F.n8,"affine"==d?(p="g2m_batchToAffine",h=2*a.F.n8):h=3*a.F.n8;else{if("Fr"!=e)throw new Error("Invalid group");m=i.n8,h=i.n8,L=i.n8,g="frm_"+r}if(t.byteLength!=n.byteLength)throw new Error("Invalid buffer size");const w=Math.floor(t.byteLength/m);if(w!=1<<te(w))throw new Error("Invalid number of points");let b=Math.floor(w/o.concurrency);b<16&&(b=16),b>65536&&(b=65536);const y=[];for(let e=0;e<w;e+=b){u&&u.debug(`${f}: fftJoinExt Start: ${e}/${w}`);const a=Math.min(w-e,b),r=i.mul(c,i.exp(l,e)),s=[],d=t.slice(e*m,(e+a)*m),A=n.slice(e*m,(e+a)*m);s.push({cmd:"ALLOC",var:0,len:L*a}),s.push({cmd:"SET",var:0,buff:d}),s.push({cmd:"ALLOC",var:1,len:L*a}),s.push({cmd:"SET",var:1,buff:A}),s.push({cmd:"ALLOCSET",var:2,buff:r}),s.push({cmd:"ALLOCSET",var:3,buff:l}),_&&(s.push({cmd:"CALL",fnName:_,params:[{var:0},{val:a},{var:0}]}),s.push({cmd:"CALL",fnName:_,params:[{var:1},{val:a},{var:1}]})),s.push({cmd:"CALL",fnName:g,params:[{var:0},{var:1},{val:a},{var:2},{var:3},{val:i.s}]}),p&&(s.push({cmd:"CALL",fnName:p,params:[{var:0},{val:a},{var:0}]}),s.push({cmd:"CALL",fnName:p,params:[{var:1},{val:a},{var:1}]})),s.push({cmd:"GET",out:0,var:0,len:a*h}),s.push({cmd:"GET",out:1,var:1,len:a*h}),y.push(o.queueAction(s).then((t=>(u&&u.debug(`${f}: fftJoinExt End: ${e}/${w}`),t))))}const A=await Promise.all(y);let I,C;w*h>1<<28?(I=new _e(w*h),C=new _e(w*h)):(I=new Uint8Array(w*h),C=new Uint8Array(w*h));let v=0;for(let t=0;t<A.length;t++)I.set(A[t][0],v),C.set(A[t][1],v),v+=A[t][0].byteLength;return[I,C]}a.fft=async function(t,e,a,i,o){return await n(t,!1,e,a,i,o)},a.ifft=async function(t,e,a,i,o){return await n(t,!0,e,a,i,o)},a.lagrangeEvaluations=async function(t,o,c,l,s){let d;if(o=o||"affine",c=c||"affine","G1"==e)d="affine"==o?2*a.F.n8:3*a.F.n8;else if("G2"==e)d="affine"==o?2*a.F.n8:3*a.F.n8;else{if("Fr"!=e)throw new Error("Invalid group");d=i.n8}const u=t.byteLength/d,f=te(u);if(2**f*d!=t.byteLength)throw l&&l.error("lagrangeEvaluations iinvalid input size"),new Error("lagrangeEvaluations invalid Input size");if(f<=i.s)return await a.ifft(t,o,c,l,s);if(f>i.s+1)throw l&&l.error("lagrangeEvaluations input too big"),new Error("lagrangeEvaluations input too big");let g=t.slice(0,t.byteLength/2),_=t.slice(t.byteLength/2,t.byteLength);const p=i.exp(i.shift,u/2),h=i.inv(i.sub(i.one,p));[g,_]=await r(g,_,"prepareLagrangeEvaluation",h,i.shiftInv,o,"jacobian",l,s+" prep");const m=[];let L;return m.push(n(g,!0,"jacobian",c,l,s+" t0")),m.push(n(_,!0,"jacobian",c,l,s+" t1")),[g,_]=await Promise.all(m),L=g.byteLength>1<<28?new _e(2*g.byteLength):new Uint8Array(2*g.byteLength),L.set(g),L.set(_,g.byteLength),L},a.fftMix=async function(t){const n=3*a.F.n8;let r,c;if("G1"==e)r="g1m_fftMix",c="g1m_fftJoin";else if("G2"==e)r="g2m_fftMix",c="g2m_fftJoin";else{if("Fr"!=e)throw new Error("Invalid group");r="frm_fftMix",c="frm_fftJoin"}const l=Math.floor(t.byteLength/n),s=te(l);let d=1<<te(o.concurrency);l<=2*d&&(d=1);const u=l/d,f=te(u),g=[];for(let e=0;e<d;e++){const a=[],i=t.slice(e*u*n,(e+1)*u*n);a.push({cmd:"ALLOCSET",var:0,buff:i});for(let t=1;t<=f;t++)a.push({cmd:"CALL",fnName:r,params:[{var:0},{val:u},{val:t}]});a.push({cmd:"GET",out:0,var:0,len:u*n}),g.push(o.queueAction(a))}const _=await Promise.all(g),p=[];for(let t=0;t<_.length;t++)p[t]=_[t][0];for(let t=f+1;t<=s;t++){const e=1<<s-t,a=d/e,r=[];for(let l=0;l<e;l++)for(let e=0;e<a/2;e++){const s=i.exp(i.w[t],e*u),d=i.w[t],f=l*a+e,g=l*a+e+a/2,_=[];_.push({cmd:"ALLOCSET",var:0,buff:p[f]}),_.push({cmd:"ALLOCSET",var:1,buff:p[g]}),_.push({cmd:"ALLOCSET",var:2,buff:s}),_.push({cmd:"ALLOCSET",var:3,buff:d}),_.push({cmd:"CALL",fnName:c,params:[{var:0},{var:1},{val:u},{var:2},{var:3}]}),_.push({cmd:"GET",out:0,var:0,len:u*n}),_.push({cmd:"GET",out:1,var:1,len:u*n}),r.push(o.queueAction(_))}const l=await Promise.all(r);for(let t=0;t<e;t++)for(let e=0;e<a/2;e++){const i=t*a+e,o=t*a+e+a/2,n=l.shift();p[i]=n[0],p[o]=n[1]}}let h;h=t instanceof _e?new _e(l*n):new Uint8Array(l*n);let m=0;for(let t=0;t<d;t++)h.set(p[t],m),m+=p[t].byteLength;return h},a.fftJoin=async function(t,n,r,c){const l=3*a.F.n8;let s;if("G1"==e)s="g1m_fftJoin";else if("G2"==e)s="g2m_fftJoin";else{if("Fr"!=e)throw new Error("Invalid group");s="frm_fftJoin"}if(t.byteLength!=n.byteLength)throw new Error("Invalid buffer size");const d=Math.floor(t.byteLength/l);if(d!=1<<te(d))throw new Error("Invalid number of points");let u=1<<te(o.concurrency);d<=2*u&&(u=1);const f=d/u,g=[];for(let e=0;e<u;e++){const a=[],d=i.mul(r,i.exp(c,e*f)),u=t.slice(e*f*l,(e+1)*f*l),_=n.slice(e*f*l,(e+1)*f*l);a.push({cmd:"ALLOCSET",var:0,buff:u}),a.push({cmd:"ALLOCSET",var:1,buff:_}),a.push({cmd:"ALLOCSET",var:2,buff:d}),a.push({cmd:"ALLOCSET",var:3,buff:c}),a.push({cmd:"CALL",fnName:s,params:[{var:0},{var:1},{val:f},{var:2},{var:3}]}),a.push({cmd:"GET",out:0,var:0,len:f*l}),a.push({cmd:"GET",out:1,var:1,len:f*l}),g.push(o.queueAction(a))}const _=await Promise.all(g);let p,h;t instanceof _e?(p=new _e(d*l),h=new _e(d*l)):(p=new Uint8Array(d*l),h=new Uint8Array(d*l));let m=0;for(let t=0;t<_.length;t++)p.set(_[t][0],m),h.set(_[t][1],m),m+=_[t][0].byteLength;return[p,h]},a.fftFinal=async function(t,i){const n=3*a.F.n8,r=2*a.F.n8;let c,l;if("G1"==e)c="g1m_fftFinal",l="g1m_batchToAffine";else{if("G2"!=e)throw new Error("Invalid group");c="g2m_fftFinal",l="g2m_batchToAffine"}const s=Math.floor(t.byteLength/n);if(s!=1<<te(s))throw new Error("Invalid number of points");const d=Math.floor(s/o.concurrency),u=[];for(let e=0;e<o.concurrency;e++){let a;if(a=e<o.concurrency-1?d:s-e*d,0==a)continue;const f=[],g=t.slice(e*d*n,(e*d+a)*n);f.push({cmd:"ALLOCSET",var:0,buff:g}),f.push({cmd:"ALLOCSET",var:1,buff:i}),f.push({cmd:"CALL",fnName:c,params:[{var:0},{val:a},{var:1}]}),f.push({cmd:"CALL",fnName:l,params:[{var:0},{val:a},{var:0}]}),f.push({cmd:"GET",out:0,var:0,len:a*r}),u.push(o.queueAction(f))}const f=await Promise.all(u);let g;g=t instanceof _e?new _e(s*r):new Uint8Array(s*r);let _=0;for(let t=f.length-1;t>=0;t--)g.set(f[t][0],_),_+=f[t][0].byteLength;return g}}async function Ge(t){const e=await async function(t,e){const a=new Fe;a.memory=new WebAssembly.Memory({initial:25}),a.u8=new Uint8Array(a.memory.buffer),a.u32=new Uint32Array(a.memory.buffer);const i=await WebAssembly.compile(t.code);if(a.instance=await WebAssembly.instantiate(i,{env:{memory:a.memory}}),a.singleThread=e,a.initalPFree=a.u32[0],a.pq=t.pq,a.pr=t.pr,a.pG1gen=t.pG1gen,a.pG1zero=t.pG1zero,a.pG2gen=t.pG2gen,a.pG2zero=t.pG2zero,a.pOneT=t.pOneT,e)a.code=t.code,a.taskManager=be(),await a.taskManager([{cmd:"INIT",init:25,code:a.code.slice()}]),a.concurrency=1;else{let e;a.workers=[],a.pendingDeferreds=[],a.working=[],e="object"==typeof navigator&&navigator.hardwareConcurrency?navigator.hardwareConcurrency:ye.cpus().length,0==e&&(e=2),e>64&&(e=64),a.concurrency=e;for(let t=0;t<e;t++)a.workers[t]=new Ae(ve),a.workers[t].addEventListener("message",o(t)),a.working[t]=!1;const i=[];for(let e=0;e<a.workers.length;e++){const o=t.code.slice();i.push(a.postAction(e,[{cmd:"INIT",init:25,code:o}],[o.buffer]))}await Promise.all(i)}return a;function o(t){return function(e){let i;i=e&&e.data?e.data:e,a.working[t]=!1,a.pendingDeferreds[t].resolve(i),a.processWorks()}}}(t.wasm,t.singleThread),a={};return a.q=G(t.wasm.q),a.r=G(t.wasm.r),a.name=t.name,a.tm=e,a.prePSize=t.wasm.prePSize,a.preQSize=t.wasm.preQSize,a.Fr=new he(e,"frm",t.n8r,t.r),a.F1=new he(e,"f1m",t.n8q,t.q),a.F2=new me(e,"f2m",a.F1),a.G1=new we(e,"g1m",a.F1,t.wasm.pG1gen,t.wasm.pG1b,t.cofactorG1),a.G2=new we(e,"g2m",a.F2,t.wasm.pG2gen,t.wasm.pG2b,t.cofactorG2),a.F6=new Le(e,"f6m",a.F2),a.F12=new me(e,"ftm",a.F6),a.Gt=a.F12,xe(a,"G1"),xe(a,"G2"),xe(a,"Fr"),Be(a,"G1"),Be(a,"G2"),Se(a,"G1"),Se(a,"G2"),Se(a,"Fr"),function(t){const e=t.tm;t.pairing=function(a,i){e.startSyncOp();const o=e.allocBuff(t.G1.toJacobian(a)),n=e.allocBuff(t.G2.toJacobian(i)),r=e.alloc(t.Gt.n8);e.instance.exports[t.name+"_pairing"](o,n,r);const c=e.getBuff(r,t.Gt.n8);return e.endSyncOp(),c},t.pairingEq=async function(){let a,i;arguments.length%2==1?(a=arguments[arguments.length-1],i=(arguments.length-1)/2):(a=t.Gt.one,i=arguments.length/2);const o=[];for(let a=0;a<i;a++){const i=[],n=t.G1.toJacobian(arguments[2*a]);i.push({cmd:"ALLOCSET",var:0,buff:n}),i.push({cmd:"ALLOC",var:1,len:t.prePSize});const r=t.G2.toJacobian(arguments[2*a+1]);i.push({cmd:"ALLOCSET",var:2,buff:r}),i.push({cmd:"ALLOC",var:3,len:t.preQSize}),i.push({cmd:"ALLOC",var:4,len:t.Gt.n8}),i.push({cmd:"CALL",fnName:t.name+"_prepareG1",params:[{var:0},{var:1}]}),i.push({cmd:"CALL",fnName:t.name+"_prepareG2",params:[{var:2},{var:3}]}),i.push({cmd:"CALL",fnName:t.name+"_millerLoop",params:[{var:1},{var:3},{var:4}]}),i.push({cmd:"GET",out:0,var:4,len:t.Gt.n8}),o.push(e.queueAction(i))}const n=await Promise.all(o);e.startSyncOp();const r=e.alloc(t.Gt.n8);e.instance.exports.ftm_one(r);for(let t=0;t<n.length;t++){const a=e.allocBuff(n[t][0]);e.instance.exports.ftm_mul(r,a,r)}e.instance.exports[t.name+"_finalExponentiation"](r,r);const c=e.allocBuff(a),l=!!e.instance.exports.ftm_eq(r,c);return e.endSyncOp(),l},t.prepareG1=function(t){this.tm.startSyncOp();const e=this.tm.allocBuff(t),a=this.tm.alloc(this.prePSize);this.tm.instance.exports[this.name+"_prepareG1"](e,a);const i=this.tm.getBuff(a,this.prePSize);return this.tm.endSyncOp(),i},t.prepareG2=function(t){this.tm.startSyncOp();const e=this.tm.allocBuff(t),a=this.tm.alloc(this.preQSize);this.tm.instance.exports[this.name+"_prepareG2"](e,a);const i=this.tm.getBuff(a,this.preQSize);return this.tm.endSyncOp(),i},t.millerLoop=function(t,e){this.tm.startSyncOp();const a=this.tm.allocBuff(t),i=this.tm.allocBuff(e),o=this.tm.alloc(this.Gt.n8);this.tm.instance.exports[this.name+"_millerLoop"](a,i,o);const n=this.tm.getBuff(o,this.Gt.n8);return this.tm.endSyncOp(),n},t.finalExponentiation=function(t){this.tm.startSyncOp();const e=this.tm.allocBuff(t),a=this.tm.alloc(this.Gt.n8);this.tm.instance.exports[this.name+"_finalExponentiation"](e,a);const i=this.tm.getBuff(a,this.Gt.n8);return this.tm.endSyncOp(),i}}(a),a.array2buffer=function(t,e){const a=new Uint8Array(e*t.length);for(let i=0;i<t.length;i++)a.set(t[i],i*e);return a},a.buffer2array=function(t,e){const a=t.byteLength/e,i=new Array(a);for(let o=0;o<a;o++)i[o]=t.slice(o*e,o*e+e);return i},a}function Pe(t){let e;return e="string"==typeof t&&"0x"==t.slice(0,2).toLowerCase()?f(t.slice(2),16):f(t),e}function Oe(t){const e=[];let a=Pe(t);if(a.isNegative())throw new Error("Number cannot be negative");for(;!a.isZero();)e.push(a.and(127).toJSNumber()),a=a.shiftRight(7);0==e.length&&e.push(0);for(let t=0;t<e.length-1;t++)e[t]=128|e[t];return e}function Ue(t){let e,a;const i=t.bitLength().toJSNumber();t<0?(a=!0,e=f.one.shiftLeft(i).add(t)):(a=!1,e=Pe(t));const o=7-i%7,n=f.one.shiftLeft(o).minus(1).shiftLeft(i),r=(1<<7-o)-1|128,c=Oe(e.add(n));return a||(c[c.length-1]=c[c.length-1]&r),c}function ze(t){let e=Pe(t);if(e.greater(f("FFFFFFFF",16)))throw new Error("Number too big");return Oe(e)}var qe=function(t){const e=function(t){for(var e=[],a=0;a<t.length;a++){var i=t.charCodeAt(a);i<128?e.push(i):i<2048?e.push(192|i>>6,128|63&i):i<55296||i>=57344?e.push(224|i>>12,128|i>>6&63,128|63&i):(a++,i=65536+((1023&i)<<10|1023&t.charCodeAt(a)),e.push(240|i>>18,128|i>>12&63,128|i>>6&63,128|63&i))}return e}(t);return[...ze(e.length),...e]},Qe=function t(e){if("string"==typeof e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]&&(t[e]="    "+t[e]);return t.join("\n")}if(Array.isArray(e)){for(let a=0;a<e.length;a++)e[a]=t(e[a]);return e}},Me={toNumber:Pe,u32:function(t){const e=[],a=Pe(t);return e.push(a.and(255).toJSNumber()),e.push(a.shiftRight(8).and(255).toJSNumber()),e.push(a.shiftRight(16).and(255).toJSNumber()),e.push(a.shiftRight(24).and(255).toJSNumber()),e},u64:function(t){const e=[],a=Pe(t);return e.push(a.and(255).toJSNumber()),e.push(a.shiftRight(8).and(255).toJSNumber()),e.push(a.shiftRight(16).and(255).toJSNumber()),e.push(a.shiftRight(24).and(255).toJSNumber()),e.push(a.shiftRight(32).and(255).toJSNumber()),e.push(a.shiftRight(40).and(255).toJSNumber()),e.push(a.shiftRight(48).and(255).toJSNumber()),e.push(a.shiftRight(56).and(255).toJSNumber()),e},varuint32:ze,varuint64:function(t){let e=Pe(t);if(e.greater(f("FFFFFFFFFFFFFFFF",16)))throw new Error("Number too big");return Oe(e)},varint32:function(t){let e=Pe(t);if(e.greater(f("FFFFFFFF",16)))throw new Error("Number too big");if(e.greater(f("7FFFFFFF",16))&&(e=e.minus(f("100000000",16))),e.lesser(f("-80000000",16)))throw new Error("Number too small");return Ue(e)},varint64:function(t){let e=Pe(t);if(e.greater(f("FFFFFFFFFFFFFFFF",16)))throw new Error("Number too big");if(e.greater(f("7FFFFFFFFFFFFFFF",16))&&(e=e.minus(f("10000000000000000",16))),e.lesser(f("-8000000000000000",16)))throw new Error("Number too small");return Ue(e)},string:qe,toHexString:function(t){return Array.from(t,(function(t){return("0"+(255&t).toString(16)).slice(-2)})).join("")},ident:Qe};var ke=class{constructor(t){this.func=t,this.functionName=t.functionName,this.module=t.module}setLocal(t,e){const a=this.func.localIdxByName[t];if(void 0===a)throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${t} `);return[...e,33,...Me.varuint32(a)]}teeLocal(t,e){const a=this.func.localIdxByName[t];if(void 0===a)throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${t} `);return[...e,34,...Me.varuint32(a)]}getLocal(t){const e=this.func.localIdxByName[t];if(void 0===e)throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${t} `);return[32,...Me.varuint32(e)]}i64_load8_s(t,e,a){const i=e||0;return[...t,48,void 0===a?0:a,...Me.varuint32(i)]}i64_load8_u(t,e,a){const i=e||0;return[...t,49,void 0===a?0:a,...Me.varuint32(i)]}i64_load16_s(t,e,a){const i=e||0;return[...t,50,void 0===a?1:a,...Me.varuint32(i)]}i64_load16_u(t,e,a){const i=e||0;return[...t,51,void 0===a?1:a,...Me.varuint32(i)]}i64_load32_s(t,e,a){const i=e||0;return[...t,52,void 0===a?2:a,...Me.varuint32(i)]}i64_load32_u(t,e,a){const i=e||0;return[...t,53,void 0===a?2:a,...Me.varuint32(i)]}i64_load(t,e,a){const i=e||0;return[...t,41,void 0===a?3:a,...Me.varuint32(i)]}i64_store(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=3,r=e):Array.isArray(a)?(o=e,n=3,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,55,n,...Me.varuint32(o)]}i64_store32(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=2,r=e):Array.isArray(a)?(o=e,n=2,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,62,n,...Me.varuint32(o)]}i64_store16(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=1,r=e):Array.isArray(a)?(o=e,n=1,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,61,n,...Me.varuint32(o)]}i64_store8(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=0,r=e):Array.isArray(a)?(o=e,n=0,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,60,n,...Me.varuint32(o)]}i32_load8_s(t,e,a){const i=e||0;return[...t,44,void 0===a?0:a,...Me.varuint32(i)]}i32_load8_u(t,e,a){const i=e||0;return[...t,45,void 0===a?0:a,...Me.varuint32(i)]}i32_load16_s(t,e,a){const i=e||0;return[...t,46,void 0===a?1:a,...Me.varuint32(i)]}i32_load16_u(t,e,a){const i=e||0;return[...t,47,void 0===a?1:a,...Me.varuint32(i)]}i32_load(t,e,a){const i=e||0;return[...t,40,void 0===a?2:a,...Me.varuint32(i)]}i32_store(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=2,r=e):Array.isArray(a)?(o=e,n=2,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,54,n,...Me.varuint32(o)]}i32_store16(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=1,r=e):Array.isArray(a)?(o=e,n=1,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,59,n,...Me.varuint32(o)]}i32_store8(t,e,a,i){let o,n,r;return Array.isArray(e)?(o=0,n=0,r=e):Array.isArray(a)?(o=e,n=0,r=a):Array.isArray(i)&&(o=e,n=a,r=i),[...t,...r,58,n,...Me.varuint32(o)]}call(t,...e){const a=this.module.functionIdxByName[t];if(void 0===a)throw new Error(`Function not defined: Function: ${t}`);return[...[].concat(...e),16,...Me.varuint32(a)]}call_indirect(t,...e){return[...[].concat(...e),...t,17,0,0]}if(t,e,a){return a?[...t,4,64,...e,5,...a,11]:[...t,4,64,...e,11]}block(t){return[2,64,...t,11]}loop(...t){return[3,64,...[].concat(...t),11]}br_if(t,e){return[...e,13,...Me.varuint32(t)]}br(t){return[12,...Me.varuint32(t)]}ret(t){return[...t,15]}drop(t){return[...t,26]}i64_const(t){return[66,...Me.varint64(t)]}i32_const(t){return[65,...Me.varint32(t)]}i64_eqz(t){return[...t,80]}i64_eq(t,e){return[...t,...e,81]}i64_ne(t,e){return[...t,...e,82]}i64_lt_s(t,e){return[...t,...e,83]}i64_lt_u(t,e){return[...t,...e,84]}i64_gt_s(t,e){return[...t,...e,85]}i64_gt_u(t,e){return[...t,...e,86]}i64_le_s(t,e){return[...t,...e,87]}i64_le_u(t,e){return[...t,...e,88]}i64_ge_s(t,e){return[...t,...e,89]}i64_ge_u(t,e){return[...t,...e,90]}i64_add(t,e){return[...t,...e,124]}i64_sub(t,e){return[...t,...e,125]}i64_mul(t,e){return[...t,...e,126]}i64_div_s(t,e){return[...t,...e,127]}i64_div_u(t,e){return[...t,...e,128]}i64_rem_s(t,e){return[...t,...e,129]}i64_rem_u(t,e){return[...t,...e,130]}i64_and(t,e){return[...t,...e,131]}i64_or(t,e){return[...t,...e,132]}i64_xor(t,e){return[...t,...e,133]}i64_shl(t,e){return[...t,...e,134]}i64_shr_s(t,e){return[...t,...e,135]}i64_shr_u(t,e){return[...t,...e,136]}i64_extend_i32_s(t){return[...t,172]}i64_extend_i32_u(t){return[...t,173]}i64_clz(t){return[...t,121]}i64_ctz(t){return[...t,122]}i32_eqz(t){return[...t,69]}i32_eq(t,e){return[...t,...e,70]}i32_ne(t,e){return[...t,...e,71]}i32_lt_s(t,e){return[...t,...e,72]}i32_lt_u(t,e){return[...t,...e,73]}i32_gt_s(t,e){return[...t,...e,74]}i32_gt_u(t,e){return[...t,...e,75]}i32_le_s(t,e){return[...t,...e,76]}i32_le_u(t,e){return[...t,...e,77]}i32_ge_s(t,e){return[...t,...e,78]}i32_ge_u(t,e){return[...t,...e,79]}i32_add(t,e){return[...t,...e,106]}i32_sub(t,e){return[...t,...e,107]}i32_mul(t,e){return[...t,...e,108]}i32_div_s(t,e){return[...t,...e,109]}i32_div_u(t,e){return[...t,...e,110]}i32_rem_s(t,e){return[...t,...e,111]}i32_rem_u(t,e){return[...t,...e,112]}i32_and(t,e){return[...t,...e,113]}i32_or(t,e){return[...t,...e,114]}i32_xor(t,e){return[...t,...e,115]}i32_shl(t,e){return[...t,...e,116]}i32_shr_s(t,e){return[...t,...e,117]}i32_shr_u(t,e){return[...t,...e,118]}i32_rotl(t,e){return[...t,...e,119]}i32_rotr(t,e){return[...t,...e,120]}i32_wrap_i64(t){return[...t,167]}i32_clz(t){return[...t,103]}i32_ctz(t){return[...t,104]}unreachable(){return[0]}current_memory(){return[63,0]}comment(){return[]}};const Re={i32:127,i64:126,f32:125,f64:124,anyfunc:112,func:96,emptyblock:64};var Ne=class{constructor(t,e,a,i,o){if("import"==a)this.fnType="import",this.moduleName=i,this.fieldName=o;else{if("internal"!=a)throw new Error("Invalid function fnType: "+a);this.fnType="internal"}this.module=t,this.fnName=e,this.params=[],this.locals=[],this.localIdxByName={},this.code=[],this.returnType=null,this.nextLocal=0}addParam(t,e){if(this.localIdxByName[t])throw new Error(`param already exists. Function: ${this.fnName}, Param: ${t} `);const a=this.nextLocal++;this.localIdxByName[t]=a,this.params.push({type:e})}addLocal(t,e,a){const i=a||1;if(this.localIdxByName[t])throw new Error(`local already exists. Function: ${this.fnName}, Param: ${t} `);const o=this.nextLocal++;this.localIdxByName[t]=o,this.locals.push({type:e,length:i})}setReturnType(t){if(this.returnType)throw new Error(`returnType already defined. Function: ${this.fnName}`);this.returnType=t}getSignature(){return[96,...[...Me.varuint32(this.params.length),...this.params.map((t=>Re[t.type]))],...this.returnType?[1,Re[this.returnType]]:[0]]}getBody(){const t=this.locals.map((t=>[...Me.varuint32(t.length),Re[t.type]])),e=[...Me.varuint32(this.locals.length),...[].concat(...t),...this.code,11];return[...Me.varuint32(e.length),...e]}addCode(...t){this.code.push(...[].concat(...t))}getCodeBuilder(){return new ke(this)}};var Te=class{constructor(){this.functions=[],this.functionIdxByName={},this.nImportFunctions=0,this.nInternalFunctions=0,this.memory={pagesSize:1,moduleName:"env",fieldName:"memory"},this.free=8,this.datas=[],this.modules={},this.exports=[],this.functionsTable=[]}build(){return this._setSignatures(),new Uint8Array([...Me.u32(1836278016),...Me.u32(1),...this._buildType(),...this._buildImport(),...this._buildFunctionDeclarations(),...this._buildFunctionsTable(),...this._buildExports(),...this._buildElements(),...this._buildCode(),...this._buildData()])}addFunction(t){if(void 0!==this.functionIdxByName[t])throw new Error(`Function already defined: ${t}`);const e=this.functions.length;return this.functionIdxByName[t]=e,this.functions.push(new Ne(this,t,"internal")),this.nInternalFunctions++,this.functions[e]}addIimportFunction(t,e,a){if(void 0!==this.functionIdxByName[t])throw new Error(`Function already defined: ${t}`);if(this.functions.length>0&&"internal"==this.functions[this.functions.length-1].type)throw new Error(`Import functions must be declared before internal: ${t}`);let i=a||t;const o=this.functions.length;return this.functionIdxByName[t]=o,this.functions.push(new Ne(this,t,"import",e,i)),this.nImportFunctions++,this.functions[o]}setMemory(t,e,a){this.memory={pagesSize:t,moduleName:e||"env",fieldName:a||"memory"}}exportFunction(t,e){const a=e||t;if(void 0===this.functionIdxByName[t])throw new Error(`Function not defined: ${t}`);const i=this.functionIdxByName[t];a!=t&&(this.functionIdxByName[a]=i),this.exports.push({exportName:a,idx:i})}addFunctionToTable(t){const e=this.functionIdxByName[t];this.functionsTable.push(e)}addData(t,e){this.datas.push({offset:t,bytes:e})}alloc(t,e){let a,i;(Array.isArray(t)||ArrayBuffer.isView(t))&&void 0===e?(a=t.length,i=t):(a=t,i=e),a=1+(a-1>>3)<<3;const o=this.free;return this.free+=a,i&&this.addData(o,i),o}allocString(t){const e=(new globalThis.TextEncoder).encode(t);return this.alloc([...e,0])}_setSignatures(){this.signatures=[];const t={};if(this.functionsTable.length>0){const e=this.functions[this.functionsTable[0]].getSignature();t["s_"+Me.toHexString(e)]=0,this.signatures.push(e)}for(let e=0;e<this.functions.length;e++){const a=this.functions[e].getSignature(),i="s_"+Me.toHexString(a);void 0===t[i]&&(t[i]=this.signatures.length,this.signatures.push(a)),this.functions[e].signatureIdx=t[i]}}_buildSection(t,e){return[t,...Me.varuint32(e.length),...e]}_buildType(){return this._buildSection(1,[...Me.varuint32(this.signatures.length),...[].concat(...this.signatures)])}_buildImport(){const t=[];t.push([...Me.string(this.memory.moduleName),...Me.string(this.memory.fieldName),2,0,...Me.varuint32(this.memory.pagesSize)]);for(let e=0;e<this.nImportFunctions;e++)t.push([...Me.string(this.functions[e].moduleName),...Me.string(this.functions[e].fieldName),0,...Me.varuint32(this.functions[e].signatureIdx)]);return this._buildSection(2,Me.varuint32(t.length).concat(...t))}_buildFunctionDeclarations(){const t=[];for(let e=this.nImportFunctions;e<this.nImportFunctions+this.nInternalFunctions;e++)t.push(...Me.varuint32(this.functions[e].signatureIdx));return this._buildSection(3,[...Me.varuint32(t.length),...t])}_buildFunctionsTable(){return 0==this.functionsTable.length?[]:this._buildSection(4,[...Me.varuint32(1),112,0,...Me.varuint32(this.functionsTable.length)])}_buildElements(){if(0==this.functionsTable.length)return[];const t=[];for(let e=0;e<this.functionsTable.length;e++)t.push(...Me.varuint32(this.functionsTable[e]));return this._buildSection(9,[...Me.varuint32(1),...Me.varuint32(0),65,...Me.varint32(0),11,...Me.varuint32(this.functionsTable.length),...t])}_buildExports(){const t=[];for(let e=0;e<this.exports.length;e++)t.push([...Me.string(this.exports[e].exportName),0,...Me.varuint32(this.exports[e].idx)]);return this._buildSection(7,Me.varuint32(t.length).concat(...t))}_buildCode(){const t=[];for(let e=this.nImportFunctions;e<this.nImportFunctions+this.nInternalFunctions;e++)t.push(this.functions[e].getBody());return this._buildSection(10,Me.varuint32(t.length).concat(...t))}_buildData(){const t=[];t.push([0,65,0,11,4,...Me.u32(this.free)]);for(let e=0;e<this.datas.length;e++)t.push([0,65,...Me.varint32(this.datas[e].offset),11,...Me.varuint32(this.datas[e].bytes.length),...this.datas[e].bytes]);return this._buildSection(11,Me.varuint32(t.length).concat(...t))}},De=Te;async function je(t,e){const a=new De;a.setMemory(25),Vt(a),e&&e(a);const i={};if(i.code=a.build(),i.pq=a.modules.f1m.pq,i.pr=a.modules.frm.pq,i.pG1gen=a.modules.bn128.pG1gen,i.pG1zero=a.modules.bn128.pG1zero,i.pG1b=a.modules.bn128.pG1b,i.pG2gen=a.modules.bn128.pG2gen,i.pG2zero=a.modules.bn128.pG2zero,i.pG2b=a.modules.bn128.pG2b,i.pOneT=a.modules.bn128.pOneT,i.prePSize=a.modules.bn128.prePSize,i.preQSize=a.modules.bn128.preQSize,i.n8q=32,i.n8r=32,i.q=a.modules.bn128.q,i.r=a.modules.bn128.r,!t&&globalThis.curve_bn128)return globalThis.curve_bn128;const o={name:"bn128",wasm:i,q:G("21888242871839275222246405745257275088696311157297823662689037894645226208583"),r:G("21888242871839275222246405745257275088548364400416034343698204186575808495617"),n8q:32,n8r:32,cofactorG2:G("30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d",16),singleThread:!!t},n=await Ge(o);return n.terminate=async function(){o.singleThread||(globalThis.curve_bn128=null,await this.tm.terminate())},t||(globalThis.curve_bn128=n),n}async function Ke(t,e){const a=new De;a.setMemory(25),Ht(a),e&&e(a);const i={};if(i.code=a.build(),i.pq=a.modules.f1m.pq,i.pr=a.modules.frm.pq,i.pG1gen=a.modules.bls12381.pG1gen,i.pG1zero=a.modules.bls12381.pG1zero,i.pG1b=a.modules.bls12381.pG1b,i.pG2gen=a.modules.bls12381.pG2gen,i.pG2zero=a.modules.bls12381.pG2zero,i.pG2b=a.modules.bls12381.pG2b,i.pOneT=a.modules.bls12381.pOneT,i.prePSize=a.modules.bls12381.prePSize,i.preQSize=a.modules.bls12381.preQSize,i.n8q=48,i.n8r=32,i.q=a.modules.bn128.q,i.r=a.modules.bn128.r,!t&&globalThis.curve_bls12381)return globalThis.curve_bls12381;const o={name:"bls12381",wasm:i,q:G("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab",16),r:G("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001",16),n8q:48,n8r:32,cofactorG1:G("0x396c8c005555e1568c00aaab0000aaab",16),cofactorG2:G("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5",16),singleThread:!!t},n=await Ge(o);return n.terminate=async function(){o.singleThread||(globalThis.curve_bls12381=null,await this.tm.terminate())},t||(globalThis.curve_bls12381=n),n}globalThis.curve_bn128=null,globalThis.curve_bls12381=null;const Ve=G("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001",16),He=G("21888242871839275222246405745257275088548364400416034343698204186575808495617");G("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab",16),G("21888242871839275222246405745257275088696311157297823662689037894645226208583");const $e=gt,Ze=fe;var Je={};async function Ye(t,e,a,i){if(a=a||262144,["w+","wx+","r","ax+","a+"].indexOf(e)<0)throw new Error("Invalid open option");const o=await Je.promises.open(t,e),n=await o.stat();return new We(o,n,a,i,t)}class We{constructor(t,e,a,i,o){for(this.fileName=o,this.fd=t,this.pos=0,this.pageSize=i||256;this.pageSize<e.blksize;)this.pageSize*=2;this.totalSize=e.size,this.totalPages=Math.floor((e.size-1)/this.pageSize)+1,this.maxPagesLoaded=Math.floor(a/this.pageSize)+1,this.pages={},this.pendingLoads=[],this.writing=!1,this.reading=!1,this.avBuffs=[],this.history={}}_loadPage(t){const e=this,a=new Promise(((a,i)=>{e.pendingLoads.push({page:t,resolve:a,reject:i})}));return e.__statusPage("After Load request: ",t),a}__statusPage(t,e){const a=[],i=this;if(!i.logHistory)return;a.push("=="+t+" "+e);let o="";for(let t=0;t<i.pendingLoads.length;t++)i.pendingLoads[t].page==e&&(o=o+" "+t);if(o&&a.push("Pending loads:"+o),void 0!==i.pages[e]){const t=i.pages[e];a.push("Loaded"),a.push("pendingOps: "+t.pendingOps),t.loading&&a.push("loading: "+t.loading),t.writing&&a.push("writing"),t.dirty&&a.push("dirty")}a.push("=="),i.history[e]||(i.history[e]=[]),i.history[e].push(a)}__printHistory(t){const e=this;e.history[t]||console.log("Empty History ",t),console.log("History "+t);for(let a=0;a<e.history[t].length;a++)for(let i=0;i<e.history[t][a].length;i++)console.log("-> "+e.history[t][a][i])}_triggerLoad(){const t=this;if(t.reading)return;if(0==t.pendingLoads.length)return;const e=Object.keys(t.pages),a=[];for(let i=0;i<e.length;i++){const o=t.pages[parseInt(e[i])];0!=o.dirty||0!=o.pendingOps||o.writing||o.loading||a.push(parseInt(e[i]))}let i=t.maxPagesLoaded-e.length;const o=[];for(;t.pendingLoads.length>0&&(void 0!==t.pages[t.pendingLoads[0].page]||i>0||a.length>0);){const e=t.pendingLoads.shift();if(void 0!==t.pages[e.page]){t.pages[e.page].pendingOps++;const i=a.indexOf(e.page);i>=0&&a.splice(i,1),t.pages[e.page].loading?t.pages[e.page].loading.push(e):e.resolve(),t.__statusPage("After Load (cached): ",e.page)}else{if(i)i--;else{const e=a.shift();t.__statusPage("Before Unload: ",e),t.avBuffs.unshift(t.pages[e]),delete t.pages[e],t.__statusPage("After Unload: ",e)}e.page>=t.totalPages?(t.pages[e.page]=n(),e.resolve(),t.__statusPage("After Load (new): ",e.page)):(t.reading=!0,t.pages[e.page]=n(),t.pages[e.page].loading=[e],o.push(t.fd.read(t.pages[e.page].buff,0,t.pageSize,e.page*t.pageSize).then((a=>{t.pages[e.page].size=a.bytesRead;const i=t.pages[e.page].loading;delete t.pages[e.page].loading;for(let t=0;t<i.length;t++)i[t].resolve();return t.__statusPage("After Load (loaded): ",e.page),a}),(t=>{e.reject(t)}))),t.__statusPage("After Load (loading): ",e.page))}}function n(){if(t.avBuffs.length>0){const e=t.avBuffs.shift();return e.dirty=!1,e.pendingOps=1,e.size=0,e}return{dirty:!1,buff:new Uint8Array(t.pageSize),pendingOps:1,size:0}}Promise.all(o).then((()=>{t.reading=!1,t.pendingLoads.length>0&&setImmediate(t._triggerLoad.bind(t)),t._tryClose()}))}_triggerWrite(){const t=this;if(t.writing)return;const e=Object.keys(t.pages),a=[];for(let i=0;i<e.length;i++){const o=t.pages[parseInt(e[i])];o.dirty&&(o.dirty=!1,o.writing=!0,t.writing=!0,a.push(t.fd.write(o.buff,0,o.size,parseInt(e[i])*t.pageSize).then((()=>{o.writing=!1}),(e=>{console.log("ERROR Writing: "+e),t.error=e,t._tryClose()}))))}t.writing&&Promise.all(a).then((()=>{t.writing=!1,setImmediate(t._triggerWrite.bind(t)),t._tryClose(),t.pendingLoads.length>0&&setImmediate(t._triggerLoad.bind(t))}))}_getDirtyPage(){for(let t in this.pages)if(this.pages[t].dirty)return t;return-1}async write(t,e){if(0==t.byteLength)return;const a=this;if(void 0===e&&(e=a.pos),a.pos=e+t.byteLength,a.totalSize<e+t.byteLength&&(a.totalSize=e+t.byteLength),a.pendingClose)throw new Error("Writing a closing file");const i=Math.floor(e/a.pageSize),o=Math.floor((e+t.byteLength-1)/a.pageSize),n=[];for(let t=i;t<=o;t++)n.push(a._loadPage(t));a._triggerLoad();let r=i,c=e%a.pageSize,l=t.byteLength;for(;l>0;){await n[r-i];const e=c+l>a.pageSize?a.pageSize-c:l,o=t.slice(t.byteLength-l,t.byteLength-l+e);new Uint8Array(a.pages[r].buff.buffer,c,e).set(o),a.pages[r].dirty=!0,a.pages[r].pendingOps--,a.pages[r].size=Math.max(c+e,a.pages[r].size),r>=a.totalPages&&(a.totalPages=r+1),l-=e,r++,c=0,a.writing||setImmediate(a._triggerWrite.bind(a))}}async read(t,e){let a=new Uint8Array(t);return await this.readToBuffer(a,0,t,e),a}async readToBuffer(t,e,a,i){if(0==a)return;const o=this;if(a>o.pageSize*o.maxPagesLoaded*.8){const t=Math.floor(1.1*a);this.maxPagesLoaded=Math.floor(t/o.pageSize)+1}if(void 0===i&&(i=o.pos),o.pos=i+a,o.pendingClose)throw new Error("Reading a closing file");const n=Math.floor(i/o.pageSize),r=Math.floor((i+a-1)/o.pageSize),c=[];for(let t=n;t<=r;t++)c.push(o._loadPage(t));o._triggerLoad();let l=n,s=i%o.pageSize,d=i+a>o.totalSize?a-(i+a-o.totalSize):a;for(;d>0;){await c[l-n],o.__statusPage("After Await (read): ",l);const i=s+d>o.pageSize?o.pageSize-s:d,r=new Uint8Array(o.pages[l].buff.buffer,o.pages[l].buff.byteOffset+s,i);t.set(r,e+a-d),o.pages[l].pendingOps--,o.__statusPage("After Op done: ",l),d-=i,l++,s=0,o.pendingLoads.length>0&&setImmediate(o._triggerLoad.bind(o))}this.pos=i+a}_tryClose(){const t=this;if(!t.pendingClose)return;t.error&&t.pendingCloseReject(t.error);t._getDirtyPage()>=0||t.writing||t.reading||t.pendingLoads.length>0||t.pendingClose()}close(){const t=this;if(t.pendingClose)throw new Error("Closing the file twice");return new Promise(((e,a)=>{t.pendingClose=e,t.pendingCloseReject=a,t._tryClose()})).then((()=>{t.fd.close()}),(e=>{throw t.fd.close(),e}))}async discard(){await this.close(),await Je.promises.unlink(this.fileName)}async writeULE32(t,e){const a=new Uint8Array(4);new DataView(a.buffer).setUint32(0,t,!0),await this.write(a,e)}async writeUBE32(t,e){const a=new Uint8Array(4);new DataView(a.buffer).setUint32(0,t,!1),await this.write(a,e)}async writeULE64(t,e){const a=new Uint8Array(8),i=new DataView(a.buffer);i.setUint32(0,4294967295&t,!0),i.setUint32(4,Math.floor(t/4294967296),!0),await this.write(a,e)}async readULE32(t){const e=await this.read(4,t);return new Uint32Array(e.buffer)[0]}async readUBE32(t){const e=await this.read(4,t);return new DataView(e.buffer).getUint32(0,!1)}async readULE64(t){const e=await this.read(8,t),a=new Uint32Array(e.buffer);return 4294967296*a[1]+a[0]}}const Xe=new Uint8Array(4),ta=new DataView(Xe.buffer),ea=new Uint8Array(8),aa=new DataView(ea.buffer);class ia{constructor(){this.pageSize=16384}_resizeIfNeeded(t){if(t>this.allocSize){const e=Math.max(this.allocSize+(1<<20),Math.floor(1.1*this.allocSize),t),a=new Uint8Array(e);a.set(this.o.data),this.o.data=a,this.allocSize=e}}async write(t,e){if(void 0===e&&(e=this.pos),this.readOnly)throw new Error("Writing a read only file");this._resizeIfNeeded(e+t.byteLength),this.o.data.set(t.slice(),e),e+t.byteLength>this.totalSize&&(this.totalSize=e+t.byteLength),this.pos=e+t.byteLength}async readToBuffer(t,e,a,i){if(void 0===i&&(i=this.pos),this.readOnly&&i+a>this.totalSize)throw new Error("Reading out of bounds");this._resizeIfNeeded(i+a);const o=new Uint8Array(this.o.data.buffer,this.o.data.byteOffset+i,a);t.set(o,e),this.pos=i+a}async read(t,e){const a=new Uint8Array(t);return await this.readToBuffer(a,0,t,e),a}close(){this.o.data.byteLength!=this.totalSize&&(this.o.data=this.o.data.slice(0,this.totalSize))}async discard(){}async writeULE32(t,e){ta.setUint32(0,t,!0),await this.write(Xe,e)}async writeUBE32(t,e){ta.setUint32(0,t,!1),await this.write(Xe,e)}async writeULE64(t,e){aa.setUint32(0,4294967295&t,!0),aa.setUint32(4,Math.floor(t/4294967296),!0),await this.write(ea,e)}async readULE32(t){const e=await this.read(4,t);return new Uint32Array(e.buffer)[0]}async readUBE32(t){const e=await this.read(4,t);return new DataView(e.buffer).getUint32(0,!1)}async readULE64(t){const e=await this.read(8,t),a=new Uint32Array(e.buffer);return 4294967296*a[1]+a[0]}}const oa=1<<22;const na=new Uint8Array(4),ra=new DataView(na.buffer),ca=new Uint8Array(8),la=new DataView(ca.buffer);class sa{constructor(){this.pageSize=16384}_resizeIfNeeded(t){if(t<=this.totalSize)return;if(this.readOnly)throw new Error("Reading out of file bounds");const e=Math.floor((t-1)/oa)+1;for(let a=Math.max(this.o.data.length-1,0);a<e;a++){const i=new Uint8Array(a<e-1?oa:t-(e-1)*oa);a==this.o.data.length-1&&i.set(this.o.data[a]),this.o.data[a]=i}this.totalSize=t}async write(t,e){const a=this;if(void 0===e&&(e=a.pos),this.readOnly)throw new Error("Writing a read only file");this._resizeIfNeeded(e+t.byteLength);let i=Math.floor(e/oa),o=e%oa,n=t.byteLength;for(;n>0;){const e=o+n>oa?oa-o:n,r=t.slice(t.byteLength-n,t.byteLength-n+e);new Uint8Array(a.o.data[i].buffer,o,e).set(r),n-=e,i++,o=0}this.pos=e+t.byteLength}async readToBuffer(t,e,a,i){const o=this;if(void 0===i&&(i=o.pos),this.readOnly&&i+a>this.totalSize)throw new Error("Reading out of bounds");this._resizeIfNeeded(i+a);let n=Math.floor(i/oa),r=i%oa,c=a;for(;c>0;){const i=r+c>oa?oa-r:c,l=new Uint8Array(o.o.data[n].buffer,r,i);t.set(l,e+a-c),c-=i,n++,r=0}this.pos=i+a}async read(t,e){const a=new Uint8Array(t);return await this.readToBuffer(a,0,t,e),a}close(){}async discard(){}async writeULE32(t,e){ra.setUint32(0,t,!0),await this.write(na,e)}async writeUBE32(t,e){ra.setUint32(0,t,!1),await this.write(na,e)}async writeULE64(t,e){la.setUint32(0,4294967295&t,!0),la.setUint32(4,Math.floor(t/4294967296),!0),await this.write(ca,e)}async readULE32(t){const e=await this.read(4,t);return new Uint32Array(e.buffer)[0]}async readUBE32(t){const e=await this.read(4,t);return new DataView(e.buffer).getUint32(0,!1)}async readULE64(t){const e=await this.read(8,t),a=new Uint32Array(e.buffer);return 4294967296*a[1]+a[0]}}async function da(t,e,a){if("string"==typeof t&&(t={type:"file",fileName:t,cacheSize:e||65536,pageSize:a||8192}),"file"==t.type)return await Ye(t.fileName,"w+",t.cacheSize,t.pageSize);if("mem"==t.type)return function(t){const e=t.initialSize||1<<20,a=new ia;return a.o=t,a.o.data=new Uint8Array(e),a.allocSize=e,a.totalSize=0,a.readOnly=!1,a.pos=0,a}(t);if("bigMem"==t.type)return function(t){const e=t.initialSize||0,a=new sa;a.o=t;const i=e?Math.floor((e-1)/oa)+1:0;a.o.data=[];for(let t=0;t<i-1;t++)a.o.data.push(new Uint8Array(oa));return i&&a.o.data.push(new Uint8Array(e-oa*(i-1))),a.totalSize=0,a.readOnly=!1,a.pos=0,a}(t);throw new Error("Invalid FastFile type: "+t.type)}async function ua(t,e,a){if(t instanceof Uint8Array&&(t={type:"mem",data:t}),"string"==typeof t){t={type:"mem",data:await fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return new Uint8Array(t)}))}}if("file"==t.type)return await Ye(t.fileName,"r",t.cacheSize,t.pageSize);if("mem"==t.type)return await function(t){const e=new ia;return e.o=t,e.allocSize=t.data.byteLength,e.totalSize=t.data.byteLength,e.readOnly=!0,e.pos=0,e}(t);if("bigMem"==t.type)return await function(t){const e=new sa;return e.o=t,e.totalSize=(t.data.length-1)*oa+t.data[t.data.length-1].byteLength,e.readOnly=!0,e.pos=0,e}(t);throw new Error("Invalid FastFile type: "+t.type)}async function fa(t,e,a,i,o){const n=await ua(t),r=await n.read(4);let c="";for(let t=0;t<4;t++)c+=String.fromCharCode(r[t]);if(c!=e)throw new Error(t+": Invalid File format");if(await n.readULE32()>a)throw new Error("Version not supported");const l=await n.readULE32();let s=[];for(let t=0;t<l;t++){let t=await n.readULE32(),e=await n.readULE64();void 0===s[t]&&(s[t]=[]),s[t].push({p:n.pos,size:e}),n.pos+=e}return{fd:n,sections:s}}async function ga(t,e,a,i,o,n){const r=await da(t,o,n),c=new Uint8Array(4);for(let t=0;t<4;t++)c[t]=e.charCodeAt(t);return await r.write(c,0),await r.writeULE32(a),await r.writeULE32(i),r}async function _a(t,e){if(void 0!==t.writingSection)throw new Error("Already writing a section");await t.writeULE32(e),t.writingSection={pSectionSize:t.pos},await t.writeULE64(0)}async function pa(t){if(void 0===t.writingSection)throw new Error("Not writing a section");const e=t.pos-t.writingSection.pSectionSize-8,a=t.pos;t.pos=t.writingSection.pSectionSize,await t.writeULE64(e),t.pos=a,delete t.writingSection}async function ha(t,e,a){if(void 0!==t.readingSection)throw new Error("Already reading a section");if(!e[a])throw new Error(t.fileName+": Missing section "+a);if(e[a].length>1)throw new Error(t.fileName+": Section Duplicated "+a);t.pos=e[a][0].p,t.readingSection=e[a][0]}async function ma(t,e){if(void 0===t.readingSection)throw new Error("Not reading a section");if(!e&&t.pos-t.readingSection.p!=t.readingSection.size)throw new Error("Invalid section size reading");delete t.readingSection}async function La(t,e,a,i){const o=new Uint8Array(a);$e.toRprLE(o,0,e,a),await t.write(o,i)}async function wa(t,e,a){const i=await t.read(e,a);return $e.fromRprLE(i,0,e)}async function ba(t,e,a,i,o){void 0===o&&(o=e[i][0].size);const n=t.pageSize;await ha(t,e,i),await _a(a,i);for(let e=0;e<o;e+=n){const i=Math.min(o-e,n),r=await t.read(i);await a.write(r)}await pa(a),await ma(t,o!=e[i][0].size)}async function ya(t,e,a,i,o){if((i=void 0===i?0:i)+(o=void 0===o?e[a][0].size-i:o)>e[a][0].size)throw new Error("Reading out of the range of the section");let n;return n=o<1<<30?new Uint8Array(o):new _e(o),await t.readToBuffer(n,0,o,e[a][0].p+i),n}
/*!
        localForage -- Offline Storage, Improved
        Version 1.10.0
        https://localforage.github.io/localForage
        (c) 2013-2017 Mozilla, Apache License 2.0
    */var Aa=d((function(t,e){t.exports=function t(e,a,i){function o(r,c){if(!a[r]){if(!e[r]){if(!c&&u)return u(r);if(n)return n(r,!0);var l=new Error("Cannot find module '"+r+"'");throw l.code="MODULE_NOT_FOUND",l}var s=a[r]={exports:{}};e[r][0].call(s.exports,(function(t){var a=e[r][1][t];return o(a||t)}),s,s.exports,t,e,a,i)}return a[r].exports}for(var n=u,r=0;r<i.length;r++)o(i[r]);return o}({1:[function(t,e,a){(function(t){var a,i,o=t.MutationObserver||t.WebKitMutationObserver;if(o){var n=0,r=new o(d),c=t.document.createTextNode("");r.observe(c,{characterData:!0}),a=function(){c.data=n=++n%2}}else if(t.setImmediate||void 0===t.MessageChannel)a="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){d(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(d,0)};else{var l=new t.MessageChannel;l.port1.onmessage=d,a=function(){l.port2.postMessage(0)}}var s=[];function d(){var t,e;i=!0;for(var a=s.length;a;){for(e=s,s=[],t=-1;++t<a;)e[t]();a=s.length}i=!1}function u(t){1!==s.push(t)||i||a()}e.exports=u}).call(this,void 0!==s?s:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,a){var i=t(1);function o(){}var n={},r=["REJECTED"],c=["FULFILLED"],l=["PENDING"];function s(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,t!==o&&g(this,t)}function d(t,e,a){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof a&&(this.onRejected=a,this.callRejected=this.otherCallRejected)}function u(t,e,a){i((function(){var i;try{i=e(a)}catch(e){return n.reject(t,e)}i===t?n.reject(t,new TypeError("Cannot resolve promise with itself")):n.resolve(t,i)}))}function f(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function g(t,e){var a=!1;function i(e){a||(a=!0,n.reject(t,e))}function o(e){a||(a=!0,n.resolve(t,e))}function r(){e(o,i)}var c=_(r);"error"===c.status&&i(c.value)}function _(t,e){var a={};try{a.value=t(e),a.status="success"}catch(t){a.status="error",a.value=t}return a}function p(t){return t instanceof this?t:n.resolve(new this(o),t)}function h(t){var e=new this(o);return n.reject(e,t)}function m(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var a=t.length,i=!1;if(!a)return this.resolve([]);for(var r=new Array(a),c=0,l=-1,s=new this(o);++l<a;)d(t[l],l);return s;function d(t,o){function l(t){r[o]=t,++c!==a||i||(i=!0,n.resolve(s,r))}e.resolve(t).then(l,(function(t){i||(i=!0,n.reject(s,t))}))}}function L(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var a=t.length,i=!1;if(!a)return this.resolve([]);for(var r=-1,c=new this(o);++r<a;)l(t[r]);return c;function l(t){e.resolve(t).then((function(t){i||(i=!0,n.resolve(c,t))}),(function(t){i||(i=!0,n.reject(c,t))}))}}e.exports=s,s.prototype.catch=function(t){return this.then(null,t)},s.prototype.then=function(t,e){if("function"!=typeof t&&this.state===c||"function"!=typeof e&&this.state===r)return this;var a=new this.constructor(o);return this.state!==l?u(a,this.state===c?t:e,this.outcome):this.queue.push(new d(a,t,e)),a},d.prototype.callFulfilled=function(t){n.resolve(this.promise,t)},d.prototype.otherCallFulfilled=function(t){u(this.promise,this.onFulfilled,t)},d.prototype.callRejected=function(t){n.reject(this.promise,t)},d.prototype.otherCallRejected=function(t){u(this.promise,this.onRejected,t)},n.resolve=function(t,e){var a=_(f,e);if("error"===a.status)return n.reject(t,a.value);var i=a.value;if(i)g(t,i);else{t.state=c,t.outcome=e;for(var o=-1,r=t.queue.length;++o<r;)t.queue[o].callFulfilled(e)}return t},n.reject=function(t,e){t.state=r,t.outcome=e;for(var a=-1,i=t.queue.length;++a<i;)t.queue[a].callRejected(e);return t},s.resolve=p,s.reject=h,s.all=m,s.race=L},{1:1}],3:[function(t,e,a){(function(e){"function"!=typeof e.Promise&&(e.Promise=t(2))}).call(this,void 0!==s?s:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(t,e,a){var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(t){return}}var r=n();function c(){try{if(!r||!r.open)return!1;var t="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),e="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!t||e)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(t){return!1}}function l(t,e){t=t||[],e=e||{};try{return new Blob(t,e)}catch(o){if("TypeError"!==o.name)throw o;for(var a=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<t.length;i+=1)a.append(t[i]);return a.getBlob(e.type)}}"undefined"==typeof Promise&&t(3);var s=Promise;function d(t,e){e&&t.then((function(t){e(null,t)}),(function(t){e(t)}))}function u(t,e,a){"function"==typeof e&&t.then(e),"function"==typeof a&&t.catch(a)}function f(t){return"string"!=typeof t&&(console.warn(t+" used as a key, but it is not a string."),t=String(t)),t}function g(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var _="local-forage-detect-blob-support",p=void 0,h={},m=Object.prototype.toString,L="readonly",w="readwrite";function b(t){for(var e=t.length,a=new ArrayBuffer(e),i=new Uint8Array(a),o=0;o<e;o++)i[o]=t.charCodeAt(o);return a}function y(t){return new s((function(e){var a=t.transaction(_,w),i=l([""]);a.objectStore(_).put(i,"key"),a.onabort=function(t){t.preventDefault(),t.stopPropagation(),e(!1)},a.oncomplete=function(){var t=navigator.userAgent.match(/Chrome\/(\d+)/),a=navigator.userAgent.match(/Edge\//);e(a||!t||parseInt(t[1],10)>=43)}})).catch((function(){return!1}))}function A(t){return"boolean"==typeof p?s.resolve(p):y(t).then((function(t){return p=t}))}function I(t){var e=h[t.name],a={};a.promise=new s((function(t,e){a.resolve=t,a.reject=e})),e.deferredOperations.push(a),e.dbReady?e.dbReady=e.dbReady.then((function(){return a.promise})):e.dbReady=a.promise}function C(t){var e=h[t.name].deferredOperations.pop();if(e)return e.resolve(),e.promise}function v(t,e){var a=h[t.name].deferredOperations.pop();if(a)return a.reject(e),a.promise}function F(t,e){return new s((function(a,i){if(h[t.name]=h[t.name]||q(),t.db){if(!e)return a(t.db);I(t),t.db.close()}var o=[t.name];e&&o.push(t.version);var n=r.open.apply(r,o);e&&(n.onupgradeneeded=function(e){var a=n.result;try{a.createObjectStore(t.storeName),e.oldVersion<=1&&a.createObjectStore(_)}catch(a){if("ConstraintError"!==a.name)throw a;console.warn('The database "'+t.name+'" has been upgraded from version '+e.oldVersion+" to version "+e.newVersion+', but the storage "'+t.storeName+'" already exists.')}}),n.onerror=function(t){t.preventDefault(),i(n.error)},n.onsuccess=function(){var e=n.result;e.onversionchange=function(t){t.target.close()},a(e),C(t)}}))}function x(t){return F(t,!1)}function E(t){return F(t,!0)}function B(t,e){if(!t.db)return!0;var a=!t.db.objectStoreNames.contains(t.storeName),i=t.version<t.db.version,o=t.version>t.db.version;if(i&&(t.version!==e&&console.warn('The database "'+t.name+"\" can't be downgraded from version "+t.db.version+" to version "+t.version+"."),t.version=t.db.version),o||a){if(a){var n=t.db.version+1;n>t.version&&(t.version=n)}return!0}return!1}function S(t){return new s((function(e,a){var i=new FileReader;i.onerror=a,i.onloadend=function(a){var i=btoa(a.target.result||"");e({__local_forage_encoded_blob:!0,data:i,type:t.type})},i.readAsBinaryString(t)}))}function G(t){return l([b(atob(t.data))],{type:t.type})}function P(t){return t&&t.__local_forage_encoded_blob}function O(t){var e=this,a=e._initReady().then((function(){var t=h[e._dbInfo.name];if(t&&t.dbReady)return t.dbReady}));return u(a,t,t),a}function U(t){I(t);for(var e=h[t.name],a=e.forages,i=0;i<a.length;i++){var o=a[i];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return t.db=null,x(t).then((function(e){return t.db=e,B(t)?E(t):e})).then((function(i){t.db=e.db=i;for(var o=0;o<a.length;o++)a[o]._dbInfo.db=i})).catch((function(e){throw v(t,e),e}))}function z(t,e,a,i){void 0===i&&(i=1);try{var o=t.db.transaction(t.storeName,e);a(null,o)}catch(o){if(i>0&&(!t.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return s.resolve().then((function(){if(!t.db||"NotFoundError"===o.name&&!t.db.objectStoreNames.contains(t.storeName)&&t.version<=t.db.version)return t.db&&(t.version=t.db.version+1),E(t)})).then((function(){return U(t).then((function(){z(t,e,a,i-1)}))})).catch(a);a(o)}}function q(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function Q(t){var e=this,a={db:null};if(t)for(var i in t)a[i]=t[i];var o=h[a.name];o||(o=q(),h[a.name]=o),o.forages.push(e),e._initReady||(e._initReady=e.ready,e.ready=O);var n=[];function r(){return s.resolve()}for(var c=0;c<o.forages.length;c++){var l=o.forages[c];l!==e&&n.push(l._initReady().catch(r))}var d=o.forages.slice(0);return s.all(n).then((function(){return a.db=o.db,x(a)})).then((function(t){return a.db=t,B(a,e._defaultConfig.version)?E(a):t})).then((function(t){a.db=o.db=t,e._dbInfo=a;for(var i=0;i<d.length;i++){var n=d[i];n!==e&&(n._dbInfo.db=a.db,n._dbInfo.version=a.version)}}))}function M(t,e){var a=this;t=f(t);var i=new s((function(e,i){a.ready().then((function(){z(a._dbInfo,L,(function(o,n){if(o)return i(o);try{var r=n.objectStore(a._dbInfo.storeName).get(t);r.onsuccess=function(){var t=r.result;void 0===t&&(t=null),P(t)&&(t=G(t)),e(t)},r.onerror=function(){i(r.error)}}catch(t){i(t)}}))})).catch(i)}));return d(i,e),i}function k(t,e){var a=this,i=new s((function(e,i){a.ready().then((function(){z(a._dbInfo,L,(function(o,n){if(o)return i(o);try{var r=n.objectStore(a._dbInfo.storeName).openCursor(),c=1;r.onsuccess=function(){var a=r.result;if(a){var i=a.value;P(i)&&(i=G(i));var o=t(i,a.key,c++);void 0!==o?e(o):a.continue()}else e()},r.onerror=function(){i(r.error)}}catch(t){i(t)}}))})).catch(i)}));return d(i,e),i}function R(t,e,a){var i=this;t=f(t);var o=new s((function(a,o){var n;i.ready().then((function(){return n=i._dbInfo,"[object Blob]"===m.call(e)?A(n.db).then((function(t){return t?e:S(e)})):e})).then((function(e){z(i._dbInfo,w,(function(n,r){if(n)return o(n);try{var c=r.objectStore(i._dbInfo.storeName);null===e&&(e=void 0);var l=c.put(e,t);r.oncomplete=function(){void 0===e&&(e=null),a(e)},r.onabort=r.onerror=function(){var t=l.error?l.error:l.transaction.error;o(t)}}catch(t){o(t)}}))})).catch(o)}));return d(o,a),o}function N(t,e){var a=this;t=f(t);var i=new s((function(e,i){a.ready().then((function(){z(a._dbInfo,w,(function(o,n){if(o)return i(o);try{var r=n.objectStore(a._dbInfo.storeName).delete(t);n.oncomplete=function(){e()},n.onerror=function(){i(r.error)},n.onabort=function(){var t=r.error?r.error:r.transaction.error;i(t)}}catch(t){i(t)}}))})).catch(i)}));return d(i,e),i}function T(t){var e=this,a=new s((function(t,a){e.ready().then((function(){z(e._dbInfo,w,(function(i,o){if(i)return a(i);try{var n=o.objectStore(e._dbInfo.storeName).clear();o.oncomplete=function(){t()},o.onabort=o.onerror=function(){var t=n.error?n.error:n.transaction.error;a(t)}}catch(t){a(t)}}))})).catch(a)}));return d(a,t),a}function D(t){var e=this,a=new s((function(t,a){e.ready().then((function(){z(e._dbInfo,L,(function(i,o){if(i)return a(i);try{var n=o.objectStore(e._dbInfo.storeName).count();n.onsuccess=function(){t(n.result)},n.onerror=function(){a(n.error)}}catch(t){a(t)}}))})).catch(a)}));return d(a,t),a}function j(t,e){var a=this,i=new s((function(e,i){t<0?e(null):a.ready().then((function(){z(a._dbInfo,L,(function(o,n){if(o)return i(o);try{var r=n.objectStore(a._dbInfo.storeName),c=!1,l=r.openKeyCursor();l.onsuccess=function(){var a=l.result;a?0===t||c?e(a.key):(c=!0,a.advance(t)):e(null)},l.onerror=function(){i(l.error)}}catch(t){i(t)}}))})).catch(i)}));return d(i,e),i}function K(t){var e=this,a=new s((function(t,a){e.ready().then((function(){z(e._dbInfo,L,(function(i,o){if(i)return a(i);try{var n=o.objectStore(e._dbInfo.storeName).openKeyCursor(),r=[];n.onsuccess=function(){var e=n.result;e?(r.push(e.key),e.continue()):t(r)},n.onerror=function(){a(n.error)}}catch(t){a(t)}}))})).catch(a)}));return d(a,t),a}function V(t,e){e=g.apply(this,arguments);var a=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||a.name,t.storeName=t.storeName||a.storeName);var i,o=this;if(t.name){var n=t.name===a.name&&o._dbInfo.db?s.resolve(o._dbInfo.db):x(t).then((function(e){var a=h[t.name],i=a.forages;a.db=e;for(var o=0;o<i.length;o++)i[o]._dbInfo.db=e;return e}));i=t.storeName?n.then((function(e){if(e.objectStoreNames.contains(t.storeName)){var a=e.version+1;I(t);var i=h[t.name],o=i.forages;e.close();for(var n=0;n<o.length;n++){var c=o[n];c._dbInfo.db=null,c._dbInfo.version=a}var l=new s((function(e,i){var o=r.open(t.name,a);o.onerror=function(t){o.result.close(),i(t)},o.onupgradeneeded=function(){o.result.deleteObjectStore(t.storeName)},o.onsuccess=function(){var t=o.result;t.close(),e(t)}}));return l.then((function(t){i.db=t;for(var e=0;e<o.length;e++){var a=o[e];a._dbInfo.db=t,C(a._dbInfo)}})).catch((function(e){throw(v(t,e)||s.resolve()).catch((function(){})),e}))}})):n.then((function(e){I(t);var a=h[t.name],i=a.forages;e.close();for(var o=0;o<i.length;o++)i[o]._dbInfo.db=null;var n=new s((function(e,a){var i=r.deleteDatabase(t.name);i.onerror=function(){var t=i.result;t&&t.close(),a(i.error)},i.onblocked=function(){console.warn('dropInstance blocked for database "'+t.name+'" until all open connections are closed')},i.onsuccess=function(){var t=i.result;t&&t.close(),e(t)}}));return n.then((function(t){a.db=t;for(var e=0;e<i.length;e++)C(i[e]._dbInfo)})).catch((function(e){throw(v(t,e)||s.resolve()).catch((function(){})),e}))}))}else i=s.reject("Invalid arguments");return d(i,e),i}var H={_driver:"asyncStorage",_initStorage:Q,_support:c(),iterate:k,getItem:M,setItem:R,removeItem:N,clear:T,length:D,key:j,keys:K,dropInstance:V};function $(){return"function"==typeof openDatabase}var Z="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",J="~~local_forage_type~",Y=/^~~local_forage_type~([^~]+)~/,W="__lfsc__:",X=W.length,tt="arbf",et="blob",at="si08",it="ui08",ot="uic8",nt="si16",rt="si32",ct="ur16",lt="ui32",st="fl32",dt="fl64",ut=X+tt.length,ft=Object.prototype.toString;function gt(t){var e,a,i,o,n,r=.75*t.length,c=t.length,l=0;"="===t[t.length-1]&&(r--,"="===t[t.length-2]&&r--);var s=new ArrayBuffer(r),d=new Uint8Array(s);for(e=0;e<c;e+=4)a=Z.indexOf(t[e]),i=Z.indexOf(t[e+1]),o=Z.indexOf(t[e+2]),n=Z.indexOf(t[e+3]),d[l++]=a<<2|i>>4,d[l++]=(15&i)<<4|o>>2,d[l++]=(3&o)<<6|63&n;return s}function _t(t){var e,a=new Uint8Array(t),i="";for(e=0;e<a.length;e+=3)i+=Z[a[e]>>2],i+=Z[(3&a[e])<<4|a[e+1]>>4],i+=Z[(15&a[e+1])<<2|a[e+2]>>6],i+=Z[63&a[e+2]];return a.length%3==2?i=i.substring(0,i.length-1)+"=":a.length%3==1&&(i=i.substring(0,i.length-2)+"=="),i}function pt(t,e){var a="";if(t&&(a=ft.call(t)),t&&("[object ArrayBuffer]"===a||t.buffer&&"[object ArrayBuffer]"===ft.call(t.buffer))){var i,o=W;t instanceof ArrayBuffer?(i=t,o+=tt):(i=t.buffer,"[object Int8Array]"===a?o+=at:"[object Uint8Array]"===a?o+=it:"[object Uint8ClampedArray]"===a?o+=ot:"[object Int16Array]"===a?o+=nt:"[object Uint16Array]"===a?o+=ct:"[object Int32Array]"===a?o+=rt:"[object Uint32Array]"===a?o+=lt:"[object Float32Array]"===a?o+=st:"[object Float64Array]"===a?o+=dt:e(new Error("Failed to get type for BinaryArray"))),e(o+_t(i))}else if("[object Blob]"===a){var n=new FileReader;n.onload=function(){var a=J+t.type+"~"+_t(this.result);e(W+et+a)},n.readAsArrayBuffer(t)}else try{e(JSON.stringify(t))}catch(a){console.error("Couldn't convert value into a JSON string: ",t),e(null,a)}}function ht(t){if(t.substring(0,X)!==W)return JSON.parse(t);var e,a=t.substring(ut),i=t.substring(X,ut);if(i===et&&Y.test(a)){var o=a.match(Y);e=o[1],a=a.substring(o[0].length)}var n=gt(a);switch(i){case tt:return n;case et:return l([n],{type:e});case at:return new Int8Array(n);case it:return new Uint8Array(n);case ot:return new Uint8ClampedArray(n);case nt:return new Int16Array(n);case ct:return new Uint16Array(n);case rt:return new Int32Array(n);case lt:return new Uint32Array(n);case st:return new Float32Array(n);case dt:return new Float64Array(n);default:throw new Error("Unkown type: "+i)}}var mt={serialize:pt,deserialize:ht,stringToBuffer:gt,bufferToString:_t};function Lt(t,e,a,i){t.executeSql("CREATE TABLE IF NOT EXISTS "+e.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],a,i)}function wt(t){var e=this,a={db:null};if(t)for(var i in t)a[i]="string"!=typeof t[i]?t[i].toString():t[i];var o=new s((function(t,i){try{a.db=openDatabase(a.name,String(a.version),a.description,a.size)}catch(t){return i(t)}a.db.transaction((function(o){Lt(o,a,(function(){e._dbInfo=a,t()}),(function(t,e){i(e)}))}),i)}));return a.serializer=mt,o}function bt(t,e,a,i,o,n){t.executeSql(a,i,o,(function(t,r){r.code===r.SYNTAX_ERR?t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[e.storeName],(function(t,c){c.rows.length?n(t,r):Lt(t,e,(function(){t.executeSql(a,i,o,n)}),n)}),n):n(t,r)}),n)}function yt(t,e){var a=this;t=f(t);var i=new s((function(e,i){a.ready().then((function(){var o=a._dbInfo;o.db.transaction((function(a){bt(a,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[t],(function(t,a){var i=a.rows.length?a.rows.item(0).value:null;i&&(i=o.serializer.deserialize(i)),e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return d(i,e),i}function At(t,e){var a=this,i=new s((function(e,i){a.ready().then((function(){var o=a._dbInfo;o.db.transaction((function(a){bt(a,o,"SELECT * FROM "+o.storeName,[],(function(a,i){for(var n=i.rows,r=n.length,c=0;c<r;c++){var l=n.item(c),s=l.value;if(s&&(s=o.serializer.deserialize(s)),void 0!==(s=t(s,l.key,c+1)))return void e(s)}e()}),(function(t,e){i(e)}))}))})).catch(i)}));return d(i,e),i}function It(t,e,a,i){var o=this;t=f(t);var n=new s((function(n,r){o.ready().then((function(){void 0===e&&(e=null);var c=e,l=o._dbInfo;l.serializer.serialize(e,(function(e,s){s?r(s):l.db.transaction((function(a){bt(a,l,"INSERT OR REPLACE INTO "+l.storeName+" (key, value) VALUES (?, ?)",[t,e],(function(){n(c)}),(function(t,e){r(e)}))}),(function(e){if(e.code===e.QUOTA_ERR){if(i>0)return void n(It.apply(o,[t,c,a,i-1]));r(e)}}))}))})).catch(r)}));return d(n,a),n}function Ct(t,e,a){return It.apply(this,[t,e,a,1])}function vt(t,e){var a=this;t=f(t);var i=new s((function(e,i){a.ready().then((function(){var o=a._dbInfo;o.db.transaction((function(a){bt(a,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[t],(function(){e()}),(function(t,e){i(e)}))}))})).catch(i)}));return d(i,e),i}function Ft(t){var e=this,a=new s((function(t,a){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){bt(e,i,"DELETE FROM "+i.storeName,[],(function(){t()}),(function(t,e){a(e)}))}))})).catch(a)}));return d(a,t),a}function xt(t){var e=this,a=new s((function(t,a){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){bt(e,i,"SELECT COUNT(key) as c FROM "+i.storeName,[],(function(e,a){var i=a.rows.item(0).c;t(i)}),(function(t,e){a(e)}))}))})).catch(a)}));return d(a,t),a}function Et(t,e){var a=this,i=new s((function(e,i){a.ready().then((function(){var o=a._dbInfo;o.db.transaction((function(a){bt(a,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[t+1],(function(t,a){var i=a.rows.length?a.rows.item(0).key:null;e(i)}),(function(t,e){i(e)}))}))})).catch(i)}));return d(i,e),i}function Bt(t){var e=this,a=new s((function(t,a){e.ready().then((function(){var i=e._dbInfo;i.db.transaction((function(e){bt(e,i,"SELECT key FROM "+i.storeName,[],(function(e,a){for(var i=[],o=0;o<a.rows.length;o++)i.push(a.rows.item(o).key);t(i)}),(function(t,e){a(e)}))}))})).catch(a)}));return d(a,t),a}function St(t){return new s((function(e,a){t.transaction((function(i){i.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(a,i){for(var o=[],n=0;n<i.rows.length;n++)o.push(i.rows.item(n).name);e({db:t,storeNames:o})}),(function(t,e){a(e)}))}),(function(t){a(t)}))}))}function Gt(t,e){e=g.apply(this,arguments);var a=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||a.name,t.storeName=t.storeName||a.storeName);var i,o=this;return i=t.name?new s((function(e){var i;i=t.name===a.name?o._dbInfo.db:openDatabase(t.name,"","",0),t.storeName?e({db:i,storeNames:[t.storeName]}):e(St(i))})).then((function(t){return new s((function(e,a){t.db.transaction((function(i){function o(t){return new s((function(e,a){i.executeSql("DROP TABLE IF EXISTS "+t,[],(function(){e()}),(function(t,e){a(e)}))}))}for(var n=[],r=0,c=t.storeNames.length;r<c;r++)n.push(o(t.storeNames[r]));s.all(n).then((function(){e()})).catch((function(t){a(t)}))}),(function(t){a(t)}))}))})):s.reject("Invalid arguments"),d(i,e),i}var Pt={_driver:"webSQLStorage",_initStorage:wt,_support:$(),iterate:At,getItem:yt,setItem:Ct,removeItem:vt,clear:Ft,length:xt,key:Et,keys:Bt,dropInstance:Gt};function Ot(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(t){return!1}}function Ut(t,e){var a=t.name+"/";return t.storeName!==e.storeName&&(a+=t.storeName+"/"),a}function zt(){var t="_localforage_support_test";try{return localStorage.setItem(t,!0),localStorage.removeItem(t),!1}catch(t){return!0}}function qt(){return!zt()||localStorage.length>0}function Qt(t){var e=this,a={};if(t)for(var i in t)a[i]=t[i];return a.keyPrefix=Ut(t,e._defaultConfig),qt()?(e._dbInfo=a,a.serializer=mt,s.resolve()):s.reject()}function Mt(t){var e=this,a=e.ready().then((function(){for(var t=e._dbInfo.keyPrefix,a=localStorage.length-1;a>=0;a--){var i=localStorage.key(a);0===i.indexOf(t)&&localStorage.removeItem(i)}}));return d(a,t),a}function kt(t,e){var a=this;t=f(t);var i=a.ready().then((function(){var e=a._dbInfo,i=localStorage.getItem(e.keyPrefix+t);return i&&(i=e.serializer.deserialize(i)),i}));return d(i,e),i}function Rt(t,e){var a=this,i=a.ready().then((function(){for(var e=a._dbInfo,i=e.keyPrefix,o=i.length,n=localStorage.length,r=1,c=0;c<n;c++){var l=localStorage.key(c);if(0===l.indexOf(i)){var s=localStorage.getItem(l);if(s&&(s=e.serializer.deserialize(s)),void 0!==(s=t(s,l.substring(o),r++)))return s}}}));return d(i,e),i}function Nt(t,e){var a=this,i=a.ready().then((function(){var e,i=a._dbInfo;try{e=localStorage.key(t)}catch(t){e=null}return e&&(e=e.substring(i.keyPrefix.length)),e}));return d(i,e),i}function Tt(t){var e=this,a=e.ready().then((function(){for(var t=e._dbInfo,a=localStorage.length,i=[],o=0;o<a;o++){var n=localStorage.key(o);0===n.indexOf(t.keyPrefix)&&i.push(n.substring(t.keyPrefix.length))}return i}));return d(a,t),a}function Dt(t){var e=this.keys().then((function(t){return t.length}));return d(e,t),e}function jt(t,e){var a=this;t=f(t);var i=a.ready().then((function(){var e=a._dbInfo;localStorage.removeItem(e.keyPrefix+t)}));return d(i,e),i}function Kt(t,e,a){var i=this;t=f(t);var o=i.ready().then((function(){void 0===e&&(e=null);var a=e;return new s((function(o,n){var r=i._dbInfo;r.serializer.serialize(e,(function(e,i){if(i)n(i);else try{localStorage.setItem(r.keyPrefix+t,e),o(a)}catch(t){"QuotaExceededError"!==t.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==t.name||n(t),n(t)}}))}))}));return d(o,a),o}function Vt(t,e){if(e=g.apply(this,arguments),!(t="function"!=typeof t&&t||{}).name){var a=this.config();t.name=t.name||a.name,t.storeName=t.storeName||a.storeName}var i,o=this;return i=t.name?new s((function(e){t.storeName?e(Ut(t,o._defaultConfig)):e(t.name+"/")})).then((function(t){for(var e=localStorage.length-1;e>=0;e--){var a=localStorage.key(e);0===a.indexOf(t)&&localStorage.removeItem(a)}})):s.reject("Invalid arguments"),d(i,e),i}var Ht={_driver:"localStorageWrapper",_initStorage:Qt,_support:Ot(),iterate:Rt,getItem:kt,setItem:Kt,removeItem:jt,clear:Mt,length:Dt,key:Nt,keys:Tt,dropInstance:Vt},$t=function(t,e){return t===e||"number"==typeof t&&"number"==typeof e&&isNaN(t)&&isNaN(e)},Zt=function(t,e){for(var a=t.length,i=0;i<a;){if($t(t[i],e))return!0;i++}return!1},Jt=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},Yt={},Wt={},Xt={INDEXEDDB:H,WEBSQL:Pt,LOCALSTORAGE:Ht},te=[Xt.INDEXEDDB._driver,Xt.WEBSQL._driver,Xt.LOCALSTORAGE._driver],ee=["dropInstance"],ae=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ee),ie={description:"",driver:te.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function oe(t,e){t[e]=function(){var a=arguments;return t.ready().then((function(){return t[e].apply(t,a)}))}}function ne(){for(var t=1;t<arguments.length;t++){var e=arguments[t];if(e)for(var a in e)e.hasOwnProperty(a)&&(Jt(e[a])?arguments[0][a]=e[a].slice():arguments[0][a]=e[a])}return arguments[0]}var re=function(){function t(e){for(var a in o(this,t),Xt)if(Xt.hasOwnProperty(a)){var i=Xt[a],n=i._driver;this[a]=n,Yt[n]||this.defineDriver(i)}this._defaultConfig=ne({},ie),this._config=ne({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return t.prototype.config=function(t){if("object"===(void 0===t?"undefined":i(t))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var e in t){if("storeName"===e&&(t[e]=t[e].replace(/\W/g,"_")),"version"===e&&"number"!=typeof t[e])return new Error("Database version must be a number.");this._config[e]=t[e]}return!("driver"in t)||!t.driver||this.setDriver(this._config.driver)}return"string"==typeof t?this._config[t]:this._config},t.prototype.defineDriver=function(t,e,a){var i=new s((function(e,a){try{var i=t._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!t._driver)return void a(o);for(var n=ae.concat("_initStorage"),r=0,c=n.length;r<c;r++){var l=n[r];if((!Zt(ee,l)||t[l])&&"function"!=typeof t[l])return void a(o)}var u=function(){for(var e=function(t){return function(){var e=new Error("Method "+t+" is not implemented by the current driver"),a=s.reject(e);return d(a,arguments[arguments.length-1]),a}},a=0,i=ee.length;a<i;a++){var o=ee[a];t[o]||(t[o]=e(o))}};u();var f=function(a){Yt[i]&&console.info("Redefining LocalForage driver: "+i),Yt[i]=t,Wt[i]=a,e()};"_support"in t?t._support&&"function"==typeof t._support?t._support().then(f,a):f(!!t._support):f(!0)}catch(t){a(t)}}));return u(i,e,a),i},t.prototype.driver=function(){return this._driver||null},t.prototype.getDriver=function(t,e,a){var i=Yt[t]?s.resolve(Yt[t]):s.reject(new Error("Driver not found."));return u(i,e,a),i},t.prototype.getSerializer=function(t){var e=s.resolve(mt);return u(e,t),e},t.prototype.ready=function(t){var e=this,a=e._driverSet.then((function(){return null===e._ready&&(e._ready=e._initDriver()),e._ready}));return u(a,t,t),a},t.prototype.setDriver=function(t,e,a){var i=this;Jt(t)||(t=[t]);var o=this._getSupportedDrivers(t);function n(){i._config.driver=i.driver()}function r(t){return i._extend(t),n(),i._ready=i._initStorage(i._config),i._ready}function c(t){return function(){var e=0;function a(){for(;e<t.length;){var o=t[e];return e++,i._dbInfo=null,i._ready=null,i.getDriver(o).then(r).catch(a)}n();var c=new Error("No available storage method found.");return i._driverSet=s.reject(c),i._driverSet}return a()}}var l=null!==this._driverSet?this._driverSet.catch((function(){return s.resolve()})):s.resolve();return this._driverSet=l.then((function(){var t=o[0];return i._dbInfo=null,i._ready=null,i.getDriver(t).then((function(t){i._driver=t._driver,n(),i._wrapLibraryMethodsWithReady(),i._initDriver=c(o)}))})).catch((function(){n();var t=new Error("No available storage method found.");return i._driverSet=s.reject(t),i._driverSet})),u(this._driverSet,e,a),this._driverSet},t.prototype.supports=function(t){return!!Wt[t]},t.prototype._extend=function(t){ne(this,t)},t.prototype._getSupportedDrivers=function(t){for(var e=[],a=0,i=t.length;a<i;a++){var o=t[a];this.supports(o)&&e.push(o)}return e},t.prototype._wrapLibraryMethodsWithReady=function(){for(var t=0,e=ae.length;t<e;t++)oe(this,ae[t])},t.prototype.createInstance=function(e){return new t(e)},t}(),ce=new re;e.exports=ce},{3:3}]},{},[4])(4)}));function Ia(t){return String.fromCharCode("a".charCodeAt(0)+t)}async function Ca(t,e){const a=await ga(t+Ia(e),"zky"+Ia(e),1,1,1<<22,1<<24);return a.writingSection={pSectionSize:a.pos},await a.writeULE64(0),a}async function va(t){if(void 0===t.writingSection)throw new Error("Not writing a section");const e=t.pos-t.writingSection.pSectionSize-8,a=t.pos;t.pos=t.writingSection.pSectionSize,await t.writeULE64(e),t.pos=a,await t.close(),delete t.writingSection}async function Fa(t,e,a){const i=t+Ia(e),o="zky"+Ia(e),n=await Aa.getItem(i),r=await ua(new Uint8Array(n)),c=await r.read(4);let l="";for(let t=0;t<4;t++)l+=String.fromCharCode(c[t]);if(l!=o)throw new Error(i+": Invalid File format");if(await r.readULE32()>a)throw new Error("Version not supported");if(1!=await r.readULE32())throw new Error("More than one section found");let s=await r.readULE64();return r.readingSection={size:s,p:r.pos},r}async function xa(t,e){if(void 0===t.readingSection)throw new Error("Not reading a section");if(!e&&t.pos-t.readingSection.p!=t.readingSection.size)throw new Error("Invalid section size reading");await t.close(),delete t.readingSection}async function Ea(t,e,a){const i=await Fa(t,e,a);let o;return o=i.readingSection.size<1<<30?new Uint8Array(i.readingSection.size):new _e(i.readingSection.size),await i.readToBuffer(o,0,i.readingSection.size,i.pos),await xa(i),o}async function Ba(t,e,a){await Je.copyFile(t+Ia(a),e+Ia(a),(t=>{if(t)throw t}))}async function Sa(t,e,a,i){const o=await Fa(t,a,i),n=await Fa(e,a,i),r=16*o.pageSize;if(o.readingSection.size!=n.readingSection.size)return!1;const c=o.readingSection.size;for(let t=0;t<c;t+=r){const e=Math.min(c-t,r),a=await o.read(e),i=await n.read(e);for(let t=0;t<e;t++)if(a[t]!=i[t])return!1}return await xa(o),await xa(n),!0}$e.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001",16),$e.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");const Ga=$e.e("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab",16),Pa=$e.e("21888242871839275222246405745257275088696311157297823662689037894645226208583");async function Oa(t){let e;if($e.eq(t,Pa))e=await je(!0);else{if(!$e.eq(t,Ga))throw new Error(`Curve not supported: ${$e.toString(t)}`);e=await Ke()}return e}async function Ua(t){let e;const a=t.toUpperCase().match(/[A-Za-z0-9]+/g).join("");if(["BN128","BN254","ALTBN128"].indexOf(a)>=0)e=await je();else{if(!(["BLS12381"].indexOf(a)>=0))throw new Error(`Curve not supported: ${t}`);e=await Ke()}return e}var za=function t(e,a){if(!e){var i=new qa(a);throw Error.captureStackTrace&&Error.captureStackTrace(i,t),i}};class qa extends Error{}function Qa(t){return t.length}qa.prototype.name="AssertionError";var Ma={byteLength:Qa,toString:function(t){const e=t.byteLength;let a="";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a},write:function(t,e,a=0,i=Qa(e)){const o=Math.min(i,t.byteLength-a);for(let i=0;i<o;i++)t[a+i]=e.charCodeAt(i);return o}};const ka="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ra=new Uint8Array(256);for(let t=0;t<ka.length;t++)Ra[ka.charCodeAt(t)]=t;function Na(t){let e=t.length;return 61===t.charCodeAt(e-1)&&e--,e>1&&61===t.charCodeAt(e-1)&&e--,3*e>>>2}Ra[45]=62,Ra[95]=63;var Ta={byteLength:Na,toString:function(t){const e=t.byteLength;let a="";for(let i=0;i<e;i+=3)a+=ka[t[i]>>2]+ka[(3&t[i])<<4|t[i+1]>>4]+ka[(15&t[i+1])<<2|t[i+2]>>6]+ka[63&t[i+2]];return e%3==2?a=a.substring(0,a.length-1)+"=":e%3==1&&(a=a.substring(0,a.length-2)+"=="),a},write:function(t,e,a=0,i=Na(e)){const o=Math.min(i,t.byteLength-a);for(let a=0,i=0;a<o;a+=4){const o=Ra[e.charCodeAt(a)],n=Ra[e.charCodeAt(a+1)],r=Ra[e.charCodeAt(a+2)],c=Ra[e.charCodeAt(a+3)];t[i++]=o<<2|n>>4,t[i++]=(15&n)<<4|r>>2,t[i++]=(3&r)<<6|63&c}return o}};function Da(t){return t.length>>>1}var ja={byteLength:Da,toString:function(t){const e=t.byteLength;t=new DataView(t.buffer,t.byteOffset,e);let a="",i=0;for(let o=e-e%4;i<o;i+=4)a+=t.getUint32(i).toString(16).padStart(8,"0");for(;i<e;i++)a+=t.getUint8(i).toString(16).padStart(2,"0");return a},write:function(t,e,a=0,i=Da(e)){const o=Math.min(i,t.byteLength-a);for(let i=0;i<o;i++){const o=Ka(e.charCodeAt(2*i)),n=Ka(e.charCodeAt(2*i+1));if(void 0===o||void 0===n)return t.subarray(0,i);t[a+i]=o<<4|n}return o}};function Ka(t){return t>=48&&t<=57?t-48:t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:void 0}function Va(t){let e=0;for(let a=0,i=t.length;a<i;a++){const o=t.charCodeAt(a);if(o>=55296&&o<=56319&&a+1<i){const i=t.charCodeAt(a+1);if(i>=56320&&i<=57343){e+=4,a++;continue}}e+=o<=127?1:o<=2047?2:3}return e}let Ha,$a;if("undefined"!=typeof TextDecoder){const t=new TextDecoder;Ha=function(e){return t.decode(e)}}else Ha=function(t){const e=t.byteLength;let a="",i=0;for(;i<e;){let o=t[i];if(o<=127){a+=String.fromCharCode(o),i++;continue}let n=0,r=0;if(o<=223?(n=1,r=31&o):o<=239?(n=2,r=15&o):o<=244&&(n=3,r=7&o),e-i-n>0){let e=0;for(;e<n;)o=t[i+e+1],r=r<<6|63&o,e+=1}else r=65533,n=e-i;a+=String.fromCodePoint(r),i+=n+1}return a};if("undefined"!=typeof TextEncoder){const t=new TextEncoder;$a=function(e,a,i=0,o=Va(a)){const n=Math.min(o,e.byteLength-i);return t.encodeInto(a,e.subarray(i,i+n)),n}}else $a=function(t,e,a=0,i=Va(e)){const o=Math.min(i,t.byteLength-a);t=t.subarray(a,a+o);let n=0,r=0;for(;n<e.length;){const a=e.codePointAt(n);if(a<=127){t[r++]=a,n++;continue}let i=0,o=0;for(a<=2047?(i=6,o=192):a<=65535?(i=12,o=224):a<=2097151&&(i=18,o=240),t[r++]=o|a>>i,i-=6;i>=0;)t[r++]=128|a>>i&63,i-=6;n+=a>=65536?2:1}return o};var Za={byteLength:Va,toString:Ha,write:$a};function Ja(t){return 2*t.length}var Ya={byteLength:Ja,toString:function(t){const e=t.byteLength;let a="";for(let i=0;i<e-1;i+=2)a+=String.fromCharCode(t[i]+256*t[i+1]);return a},write:function(t,e,a=0,i=Ja(e)){const o=Math.min(i,t.byteLength-a);let n=o;for(let i=0;i<e.length&&!((n-=2)<0);++i){const o=e.charCodeAt(i),n=o>>8,r=o%256;t[a+2*i]=r,t[a+2*i+1]=n}return o}};function Wa(t){switch(t){case"ascii":return Ma;case"base64":return Ta;case"hex":return ja;case"utf8":case"utf-8":case void 0:return Za;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ya;default:throw new Error(`Unknown encoding: ${t}`)}}function Xa(t){return t instanceof Uint8Array}function ti(t,e,a){return"string"==typeof t?function(t,e){const a=Wa(e),i=new Uint8Array(a.byteLength(t));return a.write(i,t,0,i.byteLength),i}(t,e):Array.isArray(t)?function(t){const e=new Uint8Array(t.length);return e.set(t),e}(t):ArrayBuffer.isView(t)?function(t){const e=new Uint8Array(t.byteLength);return e.set(t),e}(t):function(t,e,a){return new Uint8Array(t,e,a)}(t,e,a)}function ei(t,e,a){const i=t[e];t[e]=t[a],t[a]=i}var ai={isBuffer:Xa,alloc:function(t,e,a){const i=new Uint8Array(t);return void 0!==e&&e(i,e,0,i.byteLength,a),i},allocUnsafe:function(t){return new Uint8Array(t)},allocUnsafeSlow:function(t){return new Uint8Array(t)},byteLength:function(t,e){return Wa(e).byteLength(t)},compare:function(t,e){if(t===e)return 0;const a=Math.min(t.byteLength,e.byteLength);t=new DataView(t.buffer,t.byteOffset,t.byteLength),e=new DataView(e.buffer,e.byteOffset,e.byteLength);let i=0;for(let o=a-a%4;i<o;i+=4){const a=t.getUint32(i),o=e.getUint32(i);if(a<o)return-1;if(a>o)return 1}for(;i<a;i++){const a=t.getUint8(i),o=e.getUint8(i);if(a<o)return-1;if(a>o)return 1}return t.byteLength>e.byteLength?1:t.byteLength<e.byteLength?-1:0},concat:function(t,e){void 0===e&&(e=t.reduce(((t,e)=>t+e.byteLength),0));const a=new Uint8Array(e);return t.reduce(((t,e)=>(a.set(e,t),t+e.byteLength)),0),a},copy:function(t,e,a=0,i=0,o=t.byteLength){if(o>0&&o<i)return 0;if(o===i)return 0;if(0===t.byteLength||0===e.byteLength)return 0;if(a<0)throw new RangeError("targetStart is out of range");if(i<0||i>=t.byteLength)throw new RangeError("sourceStart is out of range");if(o<0)throw new RangeError("sourceEnd is out of range");a>=e.byteLength&&(a=e.byteLength),o>t.byteLength&&(o=t.byteLength),e.byteLength-a<o-i&&(o=e.length-a+i);const n=o-i;return t===e?e.copyWithin(a,i,o):e.set(t.subarray(i,o),a),n},equals:function(t,e){if(t===e)return!0;if(t.byteLength!==e.byteLength)return!1;const a=t.byteLength;t=new DataView(t.buffer,t.byteOffset,t.byteLength),e=new DataView(e.buffer,e.byteOffset,e.byteLength);let i=0;for(let o=a-a%4;i<o;i+=4)if(t.getUint32(i)!==e.getUint32(i))return!1;for(;i<a;i++)if(t.getUint8(i)!==e.getUint8(i))return!1;return!0},fill:function(t,e,a,i,o){if("string"==typeof e?"string"==typeof a?(o=a,a=0,i=t.byteLength):"string"==typeof i&&(o=i,i=t.byteLength):"number"==typeof val?e&=255:"boolean"==typeof val&&(e=+e),a<0||t.byteLength<a||t.byteLength<i)throw new RangeError("Out of range index");if(void 0===a&&(a=0),void 0===i&&(i=t.byteLength),i<=a)return t;if(e||(e=0),"number"==typeof e)for(let o=a;o<i;++o)t[o]=e;else{const n=(e=Xa(e)?e:ti(e,o)).byteLength;for(let o=0;o<i-a;++o)t[o+a]=e[o%n]}return t},from:ti,swap16:function(t){const e=t.byteLength;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let a=0;a<e;a+=2)ei(t,a,a+1);return t},swap32:function(t){const e=t.byteLength;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let a=0;a<e;a+=4)ei(t,a,a+3),ei(t,a+1,a+2);return t},swap64:function(t){const e=t.byteLength;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let a=0;a<e;a+=8)ei(t,a,a+7),ei(t,a+1,a+6),ei(t,a+2,a+5),ei(t,a+3,a+4);return t},toBuffer:function(t){return t},toString:function(t,e,a=0,i=t.byteLength){const o=t.byteLength;return a>=o||i<=a?"":(a<0&&(a=0),i>o&&(i=o),(0!==a||i<o)&&(t=t.subarray(a,i)),Wa(e).toString(t))},write:function(t,e,a,i,o){return void 0===a?o="utf8":void 0===i&&"string"==typeof a?(o=a,a=void 0):void 0===o&&"string"==typeof i&&(o=i,i=void 0),Wa(o).write(t,e,a,i)}},ii=(()=>{for(var t=new Uint8Array(128),e=0;e<64;e++)t[e<26?e+65:e<52?e+71:e<62?e-4:4*e-205]=e;return e=>{for(var a=e.length,i=new Uint8Array(3*(a-("="==e[a-1])-("="==e[a-2]))/4|0),o=0,n=0;o<a;){var r=t[e.charCodeAt(o++)],c=t[e.charCodeAt(o++)],l=t[e.charCodeAt(o++)],s=t[e.charCodeAt(o++)];i[n++]=r<<2|c>>4,i[n++]=c<<4|l>>2,i[n++]=l<<6|s}return i}})(),oi=((t,e)=>function(){return e||(0,t[Object.keys(t)[0]])((e={exports:{}}).exports,e),e.exports})({"wasm-binary:./blake2b.wat"(t,e){e.exports=ii("")}}),ni=oi(),ri=WebAssembly.compile(ni),ci=d((function(t){var e=null,a="undefined"!=typeof WebAssembly&&(async t=>(await WebAssembly.instantiate(await ri,t)).exports)().then((t=>{e=t})),i=64,o=[];t.exports=u;var n=t.exports.BYTES_MIN=16,r=t.exports.BYTES_MAX=64;t.exports.BYTES=32;var c=t.exports.KEYBYTES_MIN=16,l=t.exports.KEYBYTES_MAX=64;t.exports.KEYBYTES=32;var s=t.exports.SALTBYTES=16,d=t.exports.PERSONALBYTES=16;function u(t,a,f,g,_){if(!(this instanceof u))return new u(t,a,f,g,_);if(!e)throw new Error("WASM not loaded. Wait for Blake2b.ready(cb)");t||(t=32),!0!==_&&(za(t>=n,"digestLength must be at least "+n+", was given "+t),za(t<=r,"digestLength must be at most "+r+", was given "+t),null!=a&&(za(a instanceof Uint8Array,"key must be Uint8Array or Buffer"),za(a.length>=c,"key must be at least "+c+", was given "+a.length),za(a.length<=l,"key must be at least "+l+", was given "+a.length)),null!=f&&(za(f instanceof Uint8Array,"salt must be Uint8Array or Buffer"),za(f.length===s,"salt must be exactly "+s+", was given "+f.length)),null!=g&&(za(g instanceof Uint8Array,"personal must be Uint8Array or Buffer"),za(g.length===d,"personal must be exactly "+d+", was given "+g.length))),o.length||(o.push(i),i+=216),this.digestLength=t,this.finalized=!1,this.pointer=o.pop(),this._memory=new Uint8Array(e.memory.buffer),this._memory.fill(0,0,64),this._memory[0]=this.digestLength,this._memory[1]=a?a.length:0,this._memory[2]=1,this._memory[3]=1,f&&this._memory.set(f,32),g&&this._memory.set(g,48),this.pointer+216>this._memory.length&&this._realloc(this.pointer+216),e.blake2b_init(this.pointer,this.digestLength),a&&(this.update(a),this._memory.fill(0,i,i+a.length),this._memory[this.pointer+200]=128)}function f(){}u.prototype._realloc=function(t){e.memory.grow(Math.max(0,Math.ceil(Math.abs(t-this._memory.length)/65536))),this._memory=new Uint8Array(e.memory.buffer)},u.prototype.update=function(t){return za(!1===this.finalized,"Hash instance finalized"),za(t instanceof Uint8Array,"input must be Uint8Array or Buffer"),i+t.length>this._memory.length&&this._realloc(i+t.length),this._memory.set(t,i),e.blake2b_update(this.pointer,i,i+t.length),this},u.prototype.digest=function(t){if(za(!1===this.finalized,"Hash instance finalized"),this.finalized=!0,o.push(this.pointer),e.blake2b_final(this.pointer),!t||"binary"===t)return this._memory.slice(this.pointer+128,this.pointer+128+this.digestLength);if("string"==typeof t)return ai.toString(this._memory,t,this.pointer+128,this.pointer+128+this.digestLength);za(t instanceof Uint8Array&&t.length>=this.digestLength,"input must be Uint8Array or Buffer");for(var a=0;a<this.digestLength;a++)t[a]=this._memory[this.pointer+128+a];return t},u.prototype.final=u.prototype.digest,u.WASM=e,u.SUPPORTED="undefined"!=typeof WebAssembly,u.ready=function(t){return t||(t=f),a?a.then((()=>t()),t):t(new Error("WebAssembly not supported"))},u.prototype.ready=u.ready,u.prototype.getPartialHash=function(){return this._memory.slice(this.pointer,this.pointer+216)},u.prototype.setPartialHash=function(t){this._memory.set(t,this.pointer)}}));const li=[];for(let t=0;t<256;t++)li[t]=si(t,8);function si(t,e){let a=0,i=t;for(let t=0;t<e;t++)a<<=1,a|=1&i,i>>=1;return a}function di(t){return(0!=(4294901760&t)?(t&=4294901760,16):0)|(0!=(4278255360&t)?(t&=4278255360,8):0)|(0!=(4042322160&t)?(t&=4042322160,4):0)|(0!=(3435973836&t)?(t&=3435973836,2):0)|0!=(2863311530&t)}function ui(t,e){const a=new DataView(t.buffer,t.byteOffset,t.byteLength);let i="";for(let t=0;t<4;t++){t>0&&(i+="\n"),i+="\t\t";for(let e=0;e<4;e++)e>0&&(i+=" "),i+=a.getUint32(16*t+4*e).toString(16).padStart(8,"0")}return e&&(i=e+"\n"+i),i}function fi(t,e){if(t.byteLength!=e.byteLength)return!1;for(var a=new Int8Array(t),i=new Int8Array(e),o=0;o!=t.byteLength;o++)if(a[o]!=i[o])return!1;return!0}function gi(t){const e=t.getPartialHash(),a=ci(64);return a.setPartialHash(e),a}async function _i(t,e,a,i,o){if(t.G1.isZero(e))return!1;if(t.G1.isZero(a))return!1;if(t.G2.isZero(i))return!1;if(t.G2.isZero(o))return!1;return await t.pairingEq(e,o,t.G1.neg(a),i)}async function pi(t){for(;!t;)t=await window.prompt("Enter a random text. (Entropy): ","");const e=ci(64);e.update(bt.randomBytes(64));const a=new TextEncoder;e.update(a.encode(t));const i=Buffer.from(e.digest()),o=[];for(let t=0;t<8;t++)o[t]=i.readUInt32BE(4*t);return new wt(o)}function hi(t,e){let a,i;e<32?(a=1<<e>>>0,i=1):(a=4294967296,i=1<<e-32>>>0);let o=t;for(let t=0;t<i;t++)for(let t=0;t<a;t++)o=bt.createHash("sha256").update(o).digest();const n=new DataView(o.buffer,o.byteOffset,o.byteLength),r=[];for(let t=0;t<8;t++)r[t]=n.getUint32(4*t,!1);return new wt(r)}function mi(t){return t instanceof Uint8Array?t:("0x"==t.slice(0,2)&&(t=t.slice(2)),new Uint8Array(t.match(/[\da-f]{2}/gi).map((function(t){return parseInt(t,16)}))))}function Li(t){return Array.prototype.map.call(t,(function(t){return("0"+(255&t).toString(16)).slice(-2)})).join("")}async function wi(t,e){const a=await Ca(t,1);await a.writeULE32(1),await va(a);const i=await Oa(e.q),o=await Ca(t,2),n=i.q,r=8*(Math.floor(($e.bitLength(n)-1)/64)+1),c=i.r,l=8*(Math.floor(($e.bitLength(c)-1)/64)+1);await o.writeULE32(r),await La(o,n,r),await o.writeULE32(l),await La(o,c,l),await o.writeULE32(e.nVars),await o.writeULE32(e.nPublic),await o.writeULE32(e.domainSize),await bi(o,i,e.vk_alpha_1),await bi(o,i,e.vk_beta_1),await yi(o,i,e.vk_beta_2),await yi(o,i,e.vk_gamma_2),await bi(o,i,e.vk_delta_1),await yi(o,i,e.vk_delta_2),await va(o)}async function bi(t,e,a){const i=new Uint8Array(2*e.G1.F.n8);e.G1.toRprLEM(i,0,a),await t.write(i)}async function yi(t,e,a){const i=new Uint8Array(2*e.G2.F.n8);e.G2.toRprLEM(i,0,a),await t.write(i)}async function Ai(t,e,a){const i=await t.read(2*e.G1.F.n8),o=e.G1.fromRprLEM(i,0);return a?e.G1.toObject(o):o}async function Ii(t,e,a){const i=await t.read(2*e.G2.F.n8),o=e.G2.fromRprLEM(i,0);return a?e.G2.toObject(o):o}async function Ci(t,e){const a=await Fa(t,1,e),i=await a.readULE32();if(await xa(a),1==i)return await async function(t,e,a){const i={protocol:"groth16"},o=await Fa(t,2,e),n=await o.readULE32();i.n8q=n,i.q=await wa(o,n);const r=await o.readULE32();i.n8r=r,i.r=await wa(o,r);let c=await Oa(i.q);return i.nVars=await o.readULE32(),i.nPublic=await o.readULE32(),i.domainSize=await o.readULE32(),i.power=di(i.domainSize),i.vk_alpha_1=await Ai(o,c,a),i.vk_beta_1=await Ai(o,c,a),i.vk_beta_2=await Ii(o,c,a),i.vk_gamma_2=await Ii(o,c,a),i.vk_delta_1=await Ai(o,c,a),i.vk_delta_2=await Ii(o,c,a),await xa(o),i}(t,e);throw new Error("Protocol not supported: ")}async function vi(t,e){const a=await zkeyUtils.readHeader(zkeyFileName,2);if("groth16"!=a.protocol)throw new Error("zkey file is not groth16");const i=new Et(a.r),o=$e.mod($e.shl(1,8*a.n8r),a.r),n=i.inv(o),r=i.mul(n,n);let c=await Oa(a.q);const l=await Fa(zkeyFileName,3,2);a.IC=[];for(let t=0;t<=a.nPublic;t++){const t=await Ai(l,c,e);a.IC.push(t)}await xa(l);const s=await Fa(zkeyFileName,4,2),d=await s.readULE32();a.ccoefs=[];for(let t=0;t<d;t++){const t=await s.readULE32(),e=await s.readULE32(),i=await s.readULE32(),o=await h(s);a.ccoefs.push({matrix:t,constraint:e,signal:i,value:o})}await xa(s);const u=await Fa(zkeyFileName,5,2);a.A=[];for(let t=0;t<a.nVars;t++){const i=await Ai(u,c,e);a.A[t]=i}await xa(u);const f=await Fa(zkeyFileName,6,2);a.B1=[];for(let t=0;t<a.nVars;t++){const i=await Ai(f,c,e);a.B1[t]=i}await xa(f);const g=await Fa(zkeyFileName,7,2);a.B2=[];for(let t=0;t<a.nVars;t++){const i=await Ii(g,c,e);a.B2[t]=i}await xa(g);const _=await Fa(zkeyFileName,8,2);a.C=[];for(let t=a.nPublic+1;t<a.nVars;t++){const i=await Ai(_,c,e);a.C[t]=i}await xa(_);const p=await Fa(zkeyFileName,9,2);a.hExps=[];for(let t=0;t<a.domainSize;t++){const t=await Ai(p,c,e);a.hExps.push(t)}return await xa(p),a;async function h(t,e){const o=await wa(t,a.n8r);return i.mul(o,r)}}async function Fi(t,e,a){const i={delta:{}};i.deltaAfter=await Ai(t,e,a),i.delta.g1_s=await Ai(t,e,a),i.delta.g1_sx=await Ai(t,e,a),i.delta.g2_spx=await Ii(t,e,a),i.transcript=await t.read(64),i.type=await t.readULE32();const o=await t.readULE32(),n=t.pos;let r=0;for(;t.pos-n<o;){const e=await t.read(1);if(e[0]<=r)throw new Error("Parameters in the contribution must be sorted");if(r=e[0],1==e[0]){const e=await t.read(1),a=await t.read(e[0]);i.name=(new TextDecoder).decode(a)}else if(2==e[0]){const e=await t.read(1);i.numIterationsExp=e[0]}else{if(3!=e[0])throw new Error("Parameter not recognized");{const e=await t.read(1);i.beaconHash=await t.read(e[0])}}}if(t.pos!=n+o)throw new Error("Parametes do not match");return i}async function xi(t,e,a){const i=await Fa(t,10,e),o={contributions:[]};o.csHash=await i.read(64);const n=await i.readULE32();for(let t=0;t<n;t++){const t=await Fi(i,a);o.contributions.push(t)}return await xa(i),o}async function Ei(t,e,a){await bi(t,e,a.deltaAfter),await bi(t,e,a.delta.g1_s),await bi(t,e,a.delta.g1_sx),await yi(t,e,a.delta.g2_spx),await t.write(a.transcript),await t.writeULE32(a.type||0);const i=[];if(a.name){i.push(1);const t=new TextEncoder("utf-8").encode(a.name.substring(0,64));i.push(t.byteLength);for(let e=0;e<t.byteLength;e++)i.push(t[e])}if(1==a.type){i.push(2),i.push(a.numIterationsExp),i.push(3),i.push(a.beaconHash.byteLength);for(let t=0;t<a.beaconHash.byteLength;t++)i.push(a.beaconHash[t])}if(i.length>0){const e=new Uint8Array(i);await t.writeULE32(e.byteLength),await t.write(e)}else await t.writeULE32(0)}async function Bi(t,e,a){const i=await Ca(t,10);await i.write(a.csHash),await i.writeULE32(a.contributions.length);for(let t=0;t<a.contributions.length;t++)await Ei(i,e,a.contributions[t]);await va(i)}function Si(t,e,a){const i=new Uint8Array(2*e.G1.F.n8);e.G1.toRprUncompressed(i,0,a),t.update(i)}function Gi(t,e,a){Si(t,e,a.deltaAfter),Si(t,e,a.delta.g1_s),Si(t,e,a.delta.g1_sx),function(t,e,a){const i=new Uint8Array(2*e.G2.F.n8);e.G2.toRprUncompressed(i,0,a),t.update(i)}(t,e,a.delta.g2_spx),t.update(a.transcript)}async function Pi(t,e){await ha(t,e,1);const a=await t.readULE32(),i=await wa(t,a),o=await t.readULE32();return await ma(t),{n8:a,q:i,nWitness:o}}const{stringifyBigInts:Oi}=Ze;async function Ui(t,e,a){const{fd:i,sections:o}=await fa(e,"wtns",2),n=await Pi(i,o),r=await Ci(t,2);if("groth16"!=r.protocol)throw new Error("zkey file is not groth16");if(!$e.eq(r.r,n.q))throw new Error("Curve of the witness does not match the curve of the proving key");if(n.nWitness!=r.nVars)throw new Error(`Invalid witness length. Circuit: ${r.nVars}, witness: ${n.nWitness}`);const c=await Oa(r.q),l=c.Fr,s=c.G1,d=c.G2,u=di(r.domainSize);a&&a.debug("Reading Wtns");const f=await ya(i,o,2);a&&a.debug("Reading Coeffs");const g=await Ea(t,4,2);a&&a.debug("Building ABC");const[_,p,h]=await async function(t,e,a,i,o){const n=t.Fr.n8,r=12+e.n8r,c=(i.byteLength-4)/r,l=new _e(e.domainSize*n),s=new _e(e.domainSize*n),d=new _e(e.domainSize*n),u=[l,s];for(let e=0;e<c;e++){o&&e%1e6==0&&o.debug(`QAP AB: ${e}/${c}`);const l=i.slice(4+e*r,4+e*r+r),s=new DataView(l.buffer),d=s.getUint32(0,!0),f=s.getUint32(4,!0),g=s.getUint32(8,!0),_=l.slice(12,12+n);u[d].set(t.Fr.add(u[d].slice(f*n,f*n+n),t.Fr.mul(_,a.slice(g*n,g*n+n))),f*n)}for(let a=0;a<e.domainSize;a++)o&&a%1e6==0&&o.debug(`QAP C: ${a}/${e.domainSize}`),d.set(t.Fr.mul(l.slice(a*n,a*n+n),s.slice(a*n,a*n+n)),a*n);return[l,s,d]}(c,r,f,g,a),m=u==l.s?c.Fr.shift:c.Fr.w[u+1],L=await l.ifft(_,"","",a,"IFFT_A"),w=await l.batchApplyKey(L,l.e(1),m),b=await l.fft(w,"","",a,"FFT_A"),y=await l.ifft(p,"","",a,"IFFT_B"),A=await l.batchApplyKey(y,l.e(1),m),I=await l.fft(A,"","",a,"FFT_B"),C=await l.ifft(h,"","",a,"IFFT_C"),v=await l.batchApplyKey(C,l.e(1),m),F=await l.fft(v,"","",a,"FFT_C");a&&a.debug("Join ABC");const x=await async function(t,e,a,i,o,n){const r=1<<22,c=t.Fr.n8,l=Math.floor(a.byteLength/t.Fr.n8),s=[];for(let e=0;e<l;e+=r){n&&n.debug(`JoinABC: ${e}/${l}`);const d=Math.min(l-e,r),u=[],f=a.slice(e*c,(e+d)*c),g=i.slice(e*c,(e+d)*c),_=o.slice(e*c,(e+d)*c);u.push({cmd:"ALLOCSET",var:0,buff:f}),u.push({cmd:"ALLOCSET",var:1,buff:g}),u.push({cmd:"ALLOCSET",var:2,buff:_}),u.push({cmd:"ALLOC",var:3,len:d*c}),u.push({cmd:"CALL",fnName:"qap_joinABC",params:[{var:0},{var:1},{var:2},{val:d},{var:3}]}),u.push({cmd:"CALL",fnName:"frm_batchFromMontgomery",params:[{var:3},{val:d},{var:3}]}),u.push({cmd:"GET",out:0,var:3,len:d*c}),s.push(t.tm.queueAction(u))}const d=await Promise.all(s);let u;u=a instanceof _e?new _e(a.byteLength):new Uint8Array(a.byteLength);let f=0;for(let t=0;t<d.length;t++)u.set(d[t][0],f),f+=d[t][0].byteLength;return u}(c,0,b,I,F,a);let E={};a&&a.debug("Reading A Points");const B=await Ea(t,5,2);E.pi_a=await c.G1.multiExpAffine(B,f,a,"multiexp A"),a&&a.debug("Reading B1 Points");const S=await Ea(t,6,2);let G=await c.G1.multiExpAffine(S,f,a,"multiexp B1");a&&a.debug("Reading B2 Points");const P=await Ea(t,7,2);E.pi_b=await c.G2.multiExpAffine(P,f,a,"multiexp B2"),a&&a.debug("Reading C Points");const O=await Ea(t,8,2);E.pi_c=await c.G1.multiExpAffine(O,f.slice((r.nPublic+1)*c.Fr.n8),a,"multiexp C"),a&&a.debug("Reading H Points");const U=await Ea(t,9,2),z=await c.G1.multiExpAffine(U,x,a,"multiexp H"),q=c.Fr.random(),Q=c.Fr.random();E.pi_a=s.add(E.pi_a,r.vk_alpha_1),E.pi_a=s.add(E.pi_a,s.timesFr(r.vk_delta_1,q)),E.pi_b=d.add(E.pi_b,r.vk_beta_2),E.pi_b=d.add(E.pi_b,d.timesFr(r.vk_delta_2,Q)),G=s.add(G,r.vk_beta_1),G=s.add(G,s.timesFr(r.vk_delta_1,Q)),E.pi_c=s.add(E.pi_c,z),E.pi_c=s.add(E.pi_c,s.timesFr(E.pi_a,Q)),E.pi_c=s.add(E.pi_c,s.timesFr(G,q)),E.pi_c=s.add(E.pi_c,s.timesFr(r.vk_delta_1,l.neg(l.mul(q,Q))));let M=[];for(let t=1;t<=r.nPublic;t++){const e=f.slice(t*l.n8,t*l.n8+l.n8);M.push($e.fromRprLE(e))}return E.pi_a=s.toObject(s.toAffine(E.pi_a)),E.pi_b=d.toObject(d.toAffine(E.pi_b)),E.pi_c=s.toObject(s.toAffine(E.pi_c)),E.protocol="groth16",E.curve=c.name,await i.close(),E=Oi(E),M=Oi(M),await c.terminate(),{proof:E,publicSignals:M}}function zi(t){var e=[];return function t(e,a){if(Array.isArray(a))for(let i=0;i<a.length;i++)t(e,a[i]);else e.push(a)}(e,t),e}function qi(t){const e=BigInt(2)**BigInt(64);let a=BigInt("0xCBF29CE484222325");for(var i=0;i<t.length;i++)a^=BigInt(t[i].charCodeAt()),a*=BigInt(1099511628211),a%=e;let o=a.toString(16),n=16-o.length;return o="0".repeat(n).concat(o),o}function Qi(t,e){const a=[];let i=BigInt(t);const o=BigInt(4294967296);for(;i;)a.unshift(Number(i%o)),i/=o;if(e)for(var n=e-a.length;n>0;)a.unshift(0),n--;return a}async function Mi(t,e){e=e||{};let a,i=32767,o=!1;for(;!o;)try{a=new WebAssembly.Memory({initial:i}),o=!0}catch(t){if(1===i)throw t;console.warn("Could not allocate "+1024*i*64+" bytes. This may cause severe instability. Trying with "+1024*i*64/2+" bytes"),i=Math.floor(i/2)}const n=await WebAssembly.compile(t);let r;const c=await WebAssembly.instantiate(n,{env:{memory:a},runtime:{exceptionHandler:function(t){let e;throw e=1==t?"Signal not found. ":2==t?"Too many signals set. ":3==t?"Signal already set. ":4==t?"Assert Failed. ":5==t?"Not enough memory. ":"Unknown error.",console.log("ERROR: ",t,e),new Error(e)},showSharedRWMemory:function(){const t=c.exports.getFieldNumLen32(),e=new Uint32Array(t);for(let a=0;a<t;a++)e[t-1-a]=c.exports.readSharedRWMemory(a);console.log($e.fromArray(e,4294967296))},error:function(t,a,i,o,n,c){let l;throw l=7==t?s(a)+" "+r.getFr(o).toString()+" != "+r.getFr(n).toString()+" "+s(c):9==t?s(a)+" "+r.getFr(o).toString()+" "+s(n):5==t&&e.sym?s(a)+" "+e.sym.labelIdx2Name[n]:s(a)+" "+i+" "+o+" "+n+" "+c,console.log("ERROR: ",t,l),new Error(l)},log:function(t){console.log(r.getFr(t).toString())},logGetSignal:function(t,a){e.logGetSignal&&e.logGetSignal(t,r.getFr(a))},logSetSignal:function(t,a){e.logSetSignal&&e.logSetSignal(t,r.getFr(a))},logStartComponent:function(t){e.logStartComponent&&e.logStartComponent(t)},logFinishComponent:function(t){e.logFinishComponent&&e.logFinishComponent(t)}}}),l=e&&(e.sanityCheck||e.logGetSignal||e.logSetSignal||e.logStartComponent||e.logFinishComponent);return r="function"==typeof c.exports.getVersion?new Ri(c,l):new ki(a,c,l),r;function s(t){const e=new Uint8Array(a.buffer),i=[];for(let a=0;e[t+a]>0;a++)i.push(e[t+a]);return String.fromCharCode.apply(null,i)}}class ki{constructor(t,e,a){this.memory=t,this.i32=new Uint32Array(t.buffer),this.instance=e,this.n32=(this.instance.exports.getFrLen()>>2)-2;const i=this.instance.exports.getPRawPrime(),o=new Array(this.n32);for(let t=0;t<this.n32;t++)o[this.n32-1-t]=this.i32[(i>>2)+t];this.prime=$e.fromArray(o,4294967296),this.Fr=new Et(this.prime),this.mask32=$e.fromString("FFFFFFFF",16),this.NVars=this.instance.exports.getNVars(),this.n64=Math.floor((this.Fr.bitLength-1)/64)+1,this.R=this.Fr.e($e.shiftLeft(1,64*this.n64)),this.RInv=this.Fr.inv(this.R),this.sanityCheck=a}circom_version(){return 1}async _doCalculateWitness(t,e){this.instance.exports.init(this.sanityCheck||e?1:0);const a=this.allocInt(),i=this.allocFr();Object.keys(t).forEach((e=>{const o=qi(e),n=parseInt(o.slice(0,8),16),r=parseInt(o.slice(8,16),16);try{this.instance.exports.getSignalOffset32(a,0,n,r)}catch(t){throw new Error(`Signal ${e} is not an input of the circuit.`)}const c=this.getInt(a),l=zi(t[e]);for(let t=0;t<l.length;t++)this.setFr(i,l[t]),this.instance.exports.setSignal(0,0,c+t,i)}))}async calculateWitness(t,e){const a=this,i=a.i32[0],o=[];await a._doCalculateWitness(t,e);for(let t=0;t<a.NVars;t++){const e=a.instance.exports.getPWitness(t);o.push(a.getFr(e))}return a.i32[0]=i,o}async calculateBinWitness(t,e){const a=this,i=a.i32[0];await a._doCalculateWitness(t,e);const o=a.instance.exports.getWitnessBuffer();a.i32[0]=i;const n=a.memory.buffer.slice(o,o+a.NVars*a.n64*8);return new Uint8Array(n)}allocInt(){const t=this.i32[0];return this.i32[0]=t+8,t}allocFr(){const t=this.i32[0];return this.i32[0]=t+4*this.n32+8,t}getInt(t){return this.i32[t>>2]}setInt(t,e){this.i32[t>>2]=e}getFr(t){const e=this,a=t>>2;if(2147483648&e.i32[a+1]){const t=new Array(e.n32);for(let i=0;i<e.n32;i++)t[e.n32-1-i]=e.i32[a+2+i];const o=e.Fr.e($e.fromArray(t,4294967296));return 1073741824&e.i32[a+1]?(i=o,e.Fr.mul(e.RInv,i)):o}return 2147483648&e.i32[a]?e.Fr.e(e.i32[a]-4294967296):e.Fr.e(e.i32[a]);var i}setFr(t,e){const a=this;e=a.Fr.e(e);const i=a.Fr.neg(a.Fr.e("80000000",16)),o=a.Fr.e("7FFFFFFF",16);if(a.Fr.geq(e,i)&&a.Fr.leq(e,o)){let o;return a.Fr.geq(e,a.Fr.zero)?o=$e.toNumber(e):(o=$e.toNumber(a.Fr.sub(e,i)),o-=2147483648,o=4294967296+o),a.i32[t>>2]=o,void(a.i32[1+(t>>2)]=0)}a.i32[t>>2]=0,a.i32[1+(t>>2)]=2147483648;const n=$e.toArray(e,4294967296);for(let e=0;e<a.n32;e++){const i=n.length-1-e;a.i32[2+(t>>2)+e]=i>=0?n[i]:0}}}class Ri{constructor(t,e){this.instance=t,this.version=this.instance.exports.getVersion(),this.n32=this.instance.exports.getFieldNumLen32(),this.instance.exports.getRawPrime();const a=new Array(this.n32);for(let t=0;t<this.n32;t++)a[this.n32-1-t]=this.instance.exports.readSharedRWMemory(t);this.prime=$e.fromArray(a,4294967296),this.witnessSize=this.instance.exports.getWitnessSize(),this.sanityCheck=e}circom_version(){return this.instance.exports.getVersion()}async _doCalculateWitness(t,e){this.instance.exports.init(this.sanityCheck||e?1:0);const a=Object.keys(t);var i=0;if(a.forEach((e=>{const a=qi(e),o=parseInt(a.slice(0,8),16),n=parseInt(a.slice(8,16),16),r=zi(t[e]);for(let t=0;t<r.length;t++){const e=Qi(r[t],this.n32);for(let t=0;t<this.n32;t++)this.instance.exports.writeSharedRWMemory(t,e[this.n32-1-t]);try{this.instance.exports.setInputSignal(o,n,t),i++}catch(t){throw new Error(t)}}})),i<this.instance.exports.getInputSize())throw new Error(`Not all inputs have been set. Only ${i} out of ${this.instance.exports.getInputSize()}`)}async calculateWitness(t,e){const a=[];await this._doCalculateWitness(t,e);for(let t=0;t<this.witnessSize;t++){this.instance.exports.getWitness(t);const e=new Uint32Array(this.n32);for(let t=0;t<this.n32;t++)e[this.n32-1-t]=this.instance.exports.readSharedRWMemory(t);a.push(fromArray32(e))}return a}async calculateWTNSBin(t,e){const a=new Uint32Array(this.witnessSize*this.n32+this.n32+11),i=new Uint8Array(a.buffer);await this._doCalculateWitness(t,e),i[0]="w".charCodeAt(0),i[1]="t".charCodeAt(0),i[2]="n".charCodeAt(0),i[3]="s".charCodeAt(0),a[1]=2,a[2]=2,a[3]=1;const o=4*this.n32,n=(8+o).toString(16);a[4]=parseInt(n.slice(0,8),16),a[5]=parseInt(n.slice(8,16),16),a[6]=o,this.instance.exports.getRawPrime();var r=7;for(let t=0;t<this.n32;t++)a[r+t]=this.instance.exports.readSharedRWMemory(t);a[r+=this.n32]=this.witnessSize,a[++r]=2,r++;const c=(o*this.witnessSize).toString(16);a[r]=parseInt(c.slice(0,8),16),a[r+1]=parseInt(c.slice(8,16),16),r+=2;for(let t=0;t<this.witnessSize;t++){this.instance.exports.getWitness(t);for(let t=0;t<this.n32;t++)a[r+t]=this.instance.exports.readSharedRWMemory(t);r+=this.n32}return i}}async function Ni(t,e,a,i){const o=await ua(e),n=await o.read(o.totalSize);await o.close();const r=await Mi(n);if(1==r.circom_version()){const e=await r.calculateBinWitness(t),i=await ga(a,"wtns",2,2);await async function(t,e,a){await _a(t,1);const i=8*(Math.floor(($e.bitLength(a)-1)/64)+1);if(await t.writeULE32(i),await La(t,a,i),e.byteLength%i!=0)throw new Error("Invalid witness length");await t.writeULE32(e.byteLength/i),await pa(t),await _a(t,2),await t.write(e),await pa(t)}(i,e,r.prime),await i.close()}else{const e=await da(a),i=await r.calculateWTNSBin(t);await e.write(i),await e.close()}}const{unstringifyBigInts:Ti}=Ze;function Di(t){let e=t.toString(16);for(;e.length<64;)e="0"+e;return e=`"0x${e}"`,e}var ji=Object.freeze({__proto__:null,fullProve:async function(t,e,a,i){const o={type:"mem"};console.time("witness calculation"),await Ni(t,e,o),console.timeEnd("witness calculation"),console.time("groth16 prove");const n=await Ui(a,o,i);return console.timeEnd("groth16 prove"),n},prove:Ui,verify:async function(t,e,a,i){t=Ti(t),a=Ti(a),e=Ti(e);const o=await Ua(t.curve),n=o.G1.fromObject(t.IC[0]),r=new Uint8Array(2*o.G1.F.n8*e.length),c=new Uint8Array(o.Fr.n8*e.length);for(let a=0;a<e.length;a++){const i=o.G1.fromObject(t.IC[a+1]);r.set(i,a*o.G1.F.n8*2),$e.toRprLE(c,o.Fr.n8*a,e[a],o.Fr.n8)}let l=await o.G1.multiExpAffine(r,c);l=o.G1.add(l,n);const s=o.G1.fromObject(a.pi_a),d=o.G2.fromObject(a.pi_b),u=o.G1.fromObject(a.pi_c),f=o.G2.fromObject(t.vk_gamma_2),g=o.G2.fromObject(t.vk_delta_2),_=o.G1.fromObject(t.vk_alpha_1),p=o.G2.fromObject(t.vk_beta_2);return await o.pairingEq(o.G1.neg(s),d,l,f,u,g,_,p)?(i&&i.info("OK!"),!0):(i&&i.error("Invalid proof"),!1)},exportSolidityCallData:async function(t,e){let a,i="";for(let t=0;t<e.length;t++)""!=i&&(i+=","),i+=Di(e[t]);return a=`[${Di(t.pi_a[0])}, ${Di(t.pi_a[1])}],[[${Di(t.pi_b[0][1])}, ${Di(t.pi_b[0][0])}],[${Di(t.pi_b[1][1])}, ${Di(t.pi_b[1][0])}]],[${Di(t.pi_c[0])}, ${Di(t.pi_c[1])}],[${i}]`,a}});function Ki(t,e){const a=new DataView(e.buffer,e.byteOffset,e.byteLength),i=[];for(let t=0;t<8;t++)i[t]=a.getUint32(4*t);const o=new wt(i);return t.G2.fromRng(o)}function Vi(t,e,a,i,o){const n=ci(64),r=new Uint8Array([e]);n.update(r),n.update(a);const c=t.G1.toUncompressed(i);n.update(c);const l=t.G1.toUncompressed(o);n.update(l);return Ki(t,n.digest())}function Hi(t,e,a,i,o){return t.g1_s=e.G1.toAffine(e.G1.fromRng(o)),t.g1_sx=e.G1.toAffine(e.G1.timesFr(t.g1_s,t.prvKey)),t.g2_sp=e.G2.toAffine(Vi(e,a,i,t.g1_s,t.g1_sx)),t.g2_spx=e.G2.toAffine(e.G2.timesFr(t.g2_sp,t.prvKey)),t}function $i(t,e,a){const i={tau:{},alpha:{},beta:{}};return i.tau.prvKey=t.Fr.fromRng(a),i.alpha.prvKey=t.Fr.fromRng(a),i.beta.prvKey=t.Fr.fromRng(a),Hi(i.tau,t,0,e,a),Hi(i.alpha,t,1,e,a),Hi(i.beta,t,2,e,a),i}async function Zi(t,e,a,i){i||(i=a),await t.writeULE32(1);const o=t.pos;await t.writeULE64(0),await t.writeULE32(8*e.F1.n64);const n=new Uint8Array(e.F1.n8);$e.toRprLE(n,0,e.q,e.F1.n8),await t.write(n),await t.writeULE32(a),await t.writeULE32(i);const r=t.pos-o-8,c=t.pos;await t.writeULE64(r,o),t.pos=c}async function Ji(t,e){if(!e[1])throw new Error(t.fileName+": File has no  header");if(e[1].length>1)throw new Error(t.fileName+": File has more than one header");t.pos=e[1][0].p;const a=await t.readULE32(),i=await t.read(a),o=$e.fromRprLE(i),n=await Oa(o);if(8*n.F1.n64!=a)throw new Error(t.fileName+": Invalid size");const r=await t.readULE32(),c=await t.readULE32();if(t.pos-e[1][0].p!=e[1][0].size)throw new Error("Invalid PTau header size");return{curve:n,power:r,ceremonyPower:c}}function Yi(t,e,a,i){const o={tau:{},alpha:{},beta:{}};return o.tau.g1_s=n(),o.tau.g1_sx=n(),o.alpha.g1_s=n(),o.alpha.g1_sx=n(),o.beta.g1_s=n(),o.beta.g1_sx=n(),o.tau.g2_spx=r(),o.alpha.g2_spx=r(),o.beta.g2_spx=r(),o;function n(){let o;return o=i?a.G1.fromRprLEM(t,e):a.G1.fromRprUncompressed(t,e),e+=2*a.G1.F.n8,o}function r(){let o;return o=i?a.G2.fromRprLEM(t,e):a.G2.fromRprUncompressed(t,e),e+=2*a.G2.F.n8,o}}function Wi(t,e,a,i,o){async function n(i){o?a.G1.toRprLEM(t,e,i):a.G1.toRprUncompressed(t,e,i),e+=2*a.F1.n8}async function r(i){o?a.G2.toRprLEM(t,e,i):a.G2.toRprUncompressed(t,e,i),e+=2*a.F2.n8}return n(i.tau.g1_s),n(i.tau.g1_sx),n(i.alpha.g1_s),n(i.alpha.g1_sx),n(i.beta.g1_s),n(i.beta.g1_sx),r(i.tau.g2_spx),r(i.alpha.g2_spx),r(i.beta.g2_spx),t}async function Xi(t,e){const a={};a.tauG1=await l(),a.tauG2=await s(),a.alphaG1=await l(),a.betaG1=await l(),a.betaG2=await s(),a.key=await async function(t,e,a){return Yi(await t.read(2*e.F1.n8*6+2*e.F2.n8*3),0,e,a)}(t,e,!0),a.partialHash=await t.read(216),a.nextChallenge=await t.read(64),a.type=await t.readULE32();const i=new Uint8Array(2*e.G1.F.n8*6+2*e.G2.F.n8*3);Wi(i,0,e,a.key,!1);const o=ci(64);o.setPartialHash(a.partialHash),o.update(i),a.responseHash=o.digest();const n=await t.readULE32(),r=t.pos;let c=0;for(;t.pos-r<n;){const t=await d(1);if(t[0]<=c)throw new Error("Parameters in the contribution must be sorted");if(c=t[0],1==t[0]){const t=await d(1),e=await d(t[0]);a.name=(new TextDecoder).decode(e)}else if(2==t[0]){const t=await d(1);a.numIterationsExp=t[0]}else{if(3!=t[0])throw new Error("Parameter not recognized");{const t=await d(1);a.beaconHash=await d(t[0])}}}if(t.pos!=r+n)throw new Error("Parametes do not match");return a;async function l(){const a=await t.read(2*e.G1.F.n8);return e.G1.fromRprLEM(a)}async function s(){const a=await t.read(2*e.G2.F.n8);return e.G2.fromRprLEM(a)}async function d(e){const a=await t.read(e);return new Uint8Array(a)}}async function to(t,e,a){if(!a[7])throw new Error(t.fileName+": File has no  contributions");if(a[7][0].length>1)throw new Error(t.fileName+": File has more than one contributions section");t.pos=a[7][0].p;const i=await t.readULE32(),o=[];for(let a=0;a<i;a++){const i=await Xi(t,e);i.id=a+1,o.push(i)}if(t.pos-a[7][0].p!=a[7][0].size)throw new Error("Invalid contribution section size");return o}async function eo(t,e,a){const i=new Uint8Array(2*e.F1.n8),o=new Uint8Array(2*e.F2.n8);await r(a.tauG1),await c(a.tauG2),await r(a.alphaG1),await r(a.betaG1),await c(a.betaG2),await async function(t,e,a,i){const o=new Uint8Array(2*e.F1.n8*6+2*e.F2.n8*3);Wi(o,0,e,a,i),await t.write(o)}(t,e,a.key,!0),await t.write(a.partialHash),await t.write(a.nextChallenge),await t.writeULE32(a.type||0);const n=[];if(a.name){n.push(1);const t=new TextEncoder("utf-8").encode(a.name.substring(0,64));n.push(t.byteLength);for(let e=0;e<t.byteLength;e++)n.push(t[e])}if(1==a.type){n.push(2),n.push(a.numIterationsExp),n.push(3),n.push(a.beaconHash.byteLength);for(let t=0;t<a.beaconHash.byteLength;t++)n.push(a.beaconHash[t])}if(n.length>0){const e=new Uint8Array(n);await t.writeULE32(e.byteLength),await t.write(e)}else await t.writeULE32(0);async function r(a){e.G1.toRprLEM(i,0,a),await t.write(i)}async function c(a){e.G2.toRprLEM(o,0,a),await t.write(o)}}async function ao(t,e,a){await t.writeULE32(7);const i=t.pos;await t.writeULE64(0),await t.writeULE32(a.length);for(let i=0;i<a.length;i++)await eo(t,e,a[i]);const o=t.pos-i-8,n=t.pos;await t.writeULE64(o,i),t.pos=n}function io(t,e,a){a&&a.debug("Calculating First Challenge Hash");const i=new ci(64),o=new Uint8Array(2*t.G1.F.n8),n=new Uint8Array(2*t.G2.F.n8);let r;return t.G1.toRprUncompressed(o,0,t.G1.g),t.G2.toRprUncompressed(n,0,t.G2.g),i.update(ci(64).digest()),r=2**e*2-1,a&&a.debug("Calculate Initial Hash: tauG1"),c(o,r),r=2**e,a&&a.debug("Calculate Initial Hash: tauG2"),c(n,r),a&&a.debug("Calculate Initial Hash: alphaTauG1"),c(o,r),a&&a.debug("Calculate Initial Hash: betaTauG1"),c(o,r),i.update(n),i.digest();function c(t,e){const o=5e5,n=Math.floor(e/o),r=e%o,c=new Uint8Array(o*t.byteLength);for(let e=0;e<o;e++)c.set(t,e*t.byteLength);for(let t=0;t<n;t++)i.update(c),a&&a.debug("Initial hash: "+t*o);for(let e=0;e<r;e++)i.update(t)}}function oo(t,e,a,i){return $i(t,e,hi(a,i))}const no=_i;async function ro(t,e,a,i){let o;if(1==e.type){const o=oo(t,a.nextChallenge,e.beaconHash,e.numIterationsExp);if(!t.G1.eq(e.key.tau.g1_s,o.tau.g1_s))return i&&i.error(`BEACON key (tauG1_s) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G1.eq(e.key.tau.g1_sx,o.tau.g1_sx))return i&&i.error(`BEACON key (tauG1_sx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G2.eq(e.key.tau.g2_spx,o.tau.g2_spx))return i&&i.error(`BEACON key (tauG2_spx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G1.eq(e.key.alpha.g1_s,o.alpha.g1_s))return i&&i.error(`BEACON key (alphaG1_s) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G1.eq(e.key.alpha.g1_sx,o.alpha.g1_sx))return i&&i.error(`BEACON key (alphaG1_sx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G2.eq(e.key.alpha.g2_spx,o.alpha.g2_spx))return i&&i.error(`BEACON key (alphaG2_spx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G1.eq(e.key.beta.g1_s,o.beta.g1_s))return i&&i.error(`BEACON key (betaG1_s) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G1.eq(e.key.beta.g1_sx,o.beta.g1_sx))return i&&i.error(`BEACON key (betaG1_sx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1;if(!t.G2.eq(e.key.beta.g2_spx,o.beta.g2_spx))return i&&i.error(`BEACON key (betaG2_spx) is not generated correctly in challenge #${e.id}  ${e.name||""}`),!1}return e.key.tau.g2_sp=t.G2.toAffine(Vi(t,0,a.nextChallenge,e.key.tau.g1_s,e.key.tau.g1_sx)),e.key.alpha.g2_sp=t.G2.toAffine(Vi(t,1,a.nextChallenge,e.key.alpha.g1_s,e.key.alpha.g1_sx)),e.key.beta.g2_sp=t.G2.toAffine(Vi(t,2,a.nextChallenge,e.key.beta.g1_s,e.key.beta.g1_sx)),o=await no(t,e.key.tau.g1_s,e.key.tau.g1_sx,e.key.tau.g2_sp,e.key.tau.g2_spx),!0!==o?(i&&i.error("INVALID key (tau) in challenge #"+e.id),!1):(o=await no(t,e.key.alpha.g1_s,e.key.alpha.g1_sx,e.key.alpha.g2_sp,e.key.alpha.g2_spx),!0!==o?(i&&i.error("INVALID key (alpha) in challenge #"+e.id),!1):(o=await no(t,e.key.beta.g1_s,e.key.beta.g1_sx,e.key.beta.g2_sp,e.key.beta.g2_spx),!0!==o?(i&&i.error("INVALID key (beta) in challenge #"+e.id),!1):(o=await no(t,a.tauG1,e.tauG1,e.key.tau.g2_sp,e.key.tau.g2_spx),!0!==o?(i&&i.error("INVALID tau*G1. challenge #"+e.id+" It does not follow the previous contribution"),!1):(o=await no(t,e.key.tau.g1_s,e.key.tau.g1_sx,a.tauG2,e.tauG2),!0!==o?(i&&i.error("INVALID tau*G2. challenge #"+e.id+" It does not follow the previous contribution"),!1):(o=await no(t,a.alphaG1,e.alphaG1,e.key.alpha.g2_sp,e.key.alpha.g2_spx),!0!==o?(i&&i.error("INVALID alpha*G1. challenge #"+e.id+" It does not follow the previous contribution"),!1):(o=await no(t,a.betaG1,e.betaG1,e.key.beta.g2_sp,e.key.beta.g2_spx),!0!==o?(i&&i.error("INVALID beta*G1. challenge #"+e.id+" It does not follow the previous contribution"),!1):(o=await no(t,e.key.beta.g1_s,e.key.beta.g1_sx,a.betaG2,e.betaG2),!0!==o?(i&&i.error("INVALID beta*G2. challenge #"+e.id+"It does not follow the previous contribution"),!1):(i&&i.info("Powers Of tau file OK!"),!0))))))))}async function co(t,e,a,i,o,n,r,c,l,s){const d=o[n],u=2*d.F.n8,f=await Fa(t,i,e),g=await Ca(a,i),_=f.readingSection.size/u;let p=r;for(let t=0;t<_;t+=65536){s&&s.debug(`Applying key: ${l}: ${t}/${_}`);const e=Math.min(_-t,65536);let a;a=await f.read(e*u),a=await d.batchApplyKey(a,p,c),await g.write(a),p=o.Fr.mul(p,o.Fr.exp(c,e))}await va(g),await xa(f)}async function lo(t,e,a,i,o,n,r,c,l,s,d){const u=i[o],f=2*u.F.n8,g=Math.floor((1<<20)/f);let _=r;for(let o=0;o<n;o+=g){d&&d.debug(`Applying key ${s}: ${o}/${n}`);const r=Math.min(n-o,g),p=await t.read(r*f),h=await u.batchUtoLEM(p),m=await u.batchApplyKey(h,_,c);let L;L="COMPRESSED"==l?await u.batchLEMtoC(m):await u.batchLEMtoU(m),a&&a.update(L),await e.write(L),_=i.Fr.mul(_,i.Fr.exp(c,r))}}var so=Object.freeze({__proto__:null,newAccumulator:async function(t,e,a,i){await ci.ready();const o=await ga(a,"ptau",1,7);await Zi(o,t,e,0);const n=t.G1.oneAffine,r=t.G2.oneAffine;await _a(o,2);const c=2**e*2-1;for(let t=0;t<c;t++)await o.write(n),i&&t%1e5==0&&t&&i.log("tauG1: "+t);await pa(o),await _a(o,3);const l=2**e;for(let t=0;t<l;t++)await o.write(r),i&&t%1e5==0&&t&&i.log("tauG2: "+t);await pa(o),await _a(o,4);const s=2**e;for(let t=0;t<s;t++)await o.write(n),i&&t%1e5==0&&t&&i.log("alphaTauG1: "+t);await pa(o),await _a(o,5);const d=2**e;for(let t=0;t<d;t++)await o.write(n),i&&t%1e5==0&&t&&i.log("betaTauG1: "+t);await pa(o),await _a(o,6),await o.write(r),await pa(o),await _a(o,7),await o.writeULE32(0),await pa(o),await o.close();const u=io(t,e,i);return i&&i.debug(ui(ci(64).digest(),"Blank Contribution Hash:")),i&&i.info(ui(u,"First Contribution Hash:")),u},exportChallenge:async function(t,e,a){await ci.ready();const{fd:i,sections:o}=await fa(t,"ptau",1),{curve:n,power:r}=await Ji(i,o),c=await to(i,n,o);let l,s;0==c.length?(l=ci(64).digest(),s=io(n,r)):(l=c[c.length-1].responseHash,s=c[c.length-1].nextChallenge),a&&a.info(ui(l,"Last Response Hash: ")),a&&a.info(ui(s,"New Challenge Hash: "));const d=await da(e),u=ci(64);await d.write(l),u.update(l),await g(2,"G1",2**r*2-1,"tauG1"),await g(3,"G2",2**r,"tauG2"),await g(4,"G1",2**r,"alphaTauG1"),await g(5,"G1",2**r,"betaTauG1"),await g(6,"G2",1,"betaG2"),await i.close(),await d.close();const f=u.digest();if(!fi(s,f))throw a&&a.info(ui(f,"Calc Curret Challenge Hash: ")),a&&a.error("PTau file is corrupted. Calculated new challenge hash does not match with the eclared one"),new Error("PTau file is corrupted. Calculated new challenge hash does not match with the eclared one");return s;async function g(t,e,r,c){const l=n[e],s=2*l.F.n8,f=Math.floor((1<<24)/s);await ha(i,o,t);for(let t=0;t<r;t+=f){a&&a.debug(`Exporting ${c}: ${t}/${r}`);const e=Math.min(r-t,f);let o;o=await i.read(e*s),o=await l.batchLEMtoU(o),await d.write(o),u.update(o)}await ma(i)}},importResponse:async function(t,e,a,i,o,n){await ci.ready();const r=new Uint8Array(64);for(let t=0;t<64;t++)r[t]=255;const{fd:c,sections:l}=await fa(t,"ptau",1),{curve:s,power:d}=await Ji(c,l),u=await to(c,s,l),f={};i&&(f.name=i);const g=2*s.F1.n8,_=s.F1.n8,p=2*s.F2.n8,h=s.F2.n8,m=await ua(e);if(m.totalSize!=64+(2**d*2-1)*_+2**d*h+2**d*_+2**d*_+h+6*g+3*p)throw new Error("Size of the contribution is invalid");let L;L=u.length>0?u[u.length-1].nextChallenge:io(s,d,n);const w=await ga(a,"ptau",1,o?7:2);await Zi(w,s,d);const b=await m.read(64);if(fi(r,L)&&(L=b,u[u.length-1].nextChallenge=L),!fi(b,L))throw new Error("Wrong contribution. this contribution is not based on the previus hash");const y=new ci(64);y.update(b);const A=[];let I;I=await F(m,w,"G1",2,2**d*2-1,[1],"tauG1"),f.tauG1=I[0],I=await F(m,w,"G2",3,2**d,[1],"tauG2"),f.tauG2=I[0],I=await F(m,w,"G1",4,2**d,[0],"alphaG1"),f.alphaG1=I[0],I=await F(m,w,"G1",5,2**d,[0],"betaG1"),f.betaG1=I[0],I=await F(m,w,"G2",6,1,[0],"betaG2"),f.betaG2=I[0],f.partialHash=y.getPartialHash();const C=await m.read(2*s.F1.n8*6+2*s.F2.n8*3);f.key=Yi(C,0,s,!1),y.update(new Uint8Array(C));const v=y.digest();if(n&&n.info(ui(v,"Contribution Response Hash imported: ")),o){const t=new ci(64);t.update(v),await x(t,w,"G1",2,2**d*2-1,"tauG1",n),await x(t,w,"G2",3,2**d,"tauG2",n),await x(t,w,"G1",4,2**d,"alphaTauG1",n),await x(t,w,"G1",5,2**d,"betaTauG1",n),await x(t,w,"G2",6,1,"betaG2",n),f.nextChallenge=t.digest(),n&&n.info(ui(f.nextChallenge,"Next Challenge Hash: "))}else f.nextChallenge=r;return u.push(f),await ao(w,s,u),await m.close(),await w.close(),await c.close(),f.nextChallenge;async function F(t,e,a,i,r,c,l){return o?await async function(t,e,a,i,o,r,c){const l=s[a],d=l.F.n8,u=2*l.F.n8,f=[];await _a(e,i);const g=Math.floor((1<<24)/u);A[i]=e.pos;for(let a=0;a<o;a+=g){n&&n.debug(`Importing ${c}: ${a}/${o}`);const i=Math.min(o-a,g),s=await t.read(i*d);y.update(s);const _=await l.batchCtoLEM(s);await e.write(_);for(let t=0;t<r.length;t++){const e=r[t];if(e>=a&&e<a+i){const t=l.fromRprLEM(_,(e-a)*u);f.push(t)}}}return await pa(e),f}(t,e,a,i,r,c,l):await async function(t,e,a,i,o,r,c){const l=s[a],d=l.F.n8,u=[],f=Math.floor((1<<24)/d);for(let e=0;e<o;e+=f){n&&n.debug(`Importing ${c}: ${e}/${o}`);const a=Math.min(o-e,f),i=await t.read(a*d);y.update(i);for(let t=0;t<r.length;t++){const o=r[t];if(o>=e&&o<e+a){const t=l.fromRprCompressed(i,(o-e)*d);u.push(t)}}}return u}(t,0,a,0,r,c,l)}async function x(t,e,a,i,o,n,r){const c=s[a],l=2*c.F.n8,d=Math.floor((1<<24)/l),u=e.pos;e.pos=A[i];for(let a=0;a<o;a+=d){r&&r.debug(`Hashing ${n}: ${a}/${o}`);const i=Math.min(o-a,d),s=await e.read(i*l),u=await c.batchLEMtoU(s);t.update(u)}e.pos=u}},verify:async function(t,e){let a;await ci.ready();const{fd:i,sections:o}=await fa(t,"ptau",1),{curve:n,power:r,ceremonyPower:c}=await Ji(i,o),l=await to(i,n,o);e&&e.debug("power: 2**"+r),e&&e.debug("Computing initial contribution hash");const s={tauG1:n.G1.g,tauG2:n.G2.g,alphaG1:n.G1.g,betaG1:n.G1.g,betaG2:n.G2.g,nextChallenge:io(n,c,e),responseHash:ci(64).digest()};if(0==l.length)return e&&e.error("This file has no contribution! It cannot be used in production"),!1;let d;d=l.length>1?l[l.length-2]:s;const u=l[l.length-1];if(e&&e.debug("Validating contribution #"+l[l.length-1].id),!await ro(n,u,d,e))return!1;const f=ci(64);f.update(u.responseHash),e&&e.debug("Verifying powers in tau*G1 section");const g=await b(2,"G1","tauG1",2**r*2-1,[0,1],e);if(a=await no(n,g.R1,g.R2,n.G2.g,u.tauG2),!0!==a)return e&&e.error("tauG1 section. Powers do not match"),!1;if(!n.G1.eq(n.G1.g,g.singularPoints[0]))return e&&e.error("First element of tau*G1 section must be the generator"),!1;if(!n.G1.eq(u.tauG1,g.singularPoints[1]))return e&&e.error("Second element of tau*G1 section does not match the one in the contribution section"),!1;e&&e.debug("Verifying powers in tau*G2 section");const _=await b(3,"G2","tauG2",2**r,[0,1],e);if(a=await no(n,n.G1.g,u.tauG1,_.R1,_.R2),!0!==a)return e&&e.error("tauG2 section. Powers do not match"),!1;if(!n.G2.eq(n.G2.g,_.singularPoints[0]))return e&&e.error("First element of tau*G2 section must be the generator"),!1;if(!n.G2.eq(u.tauG2,_.singularPoints[1]))return e&&e.error("Second element of tau*G2 section does not match the one in the contribution section"),!1;e&&e.debug("Verifying powers in alpha*tau*G1 section");const p=await b(4,"G1","alphatauG1",2**r,[0],e);if(a=await no(n,p.R1,p.R2,n.G2.g,u.tauG2),!0!==a)return e&&e.error("alphaTauG1 section. Powers do not match"),!1;if(!n.G1.eq(u.alphaG1,p.singularPoints[0]))return e&&e.error("First element of alpha*tau*G1 section (alpha*G1) does not match the one in the contribution section"),!1;e&&e.debug("Verifying powers in beta*tau*G1 section");const h=await b(5,"G1","betatauG1",2**r,[0],e);if(a=await no(n,h.R1,h.R2,n.G2.g,u.tauG2),!0!==a)return e&&e.error("betaTauG1 section. Powers do not match"),!1;if(!n.G1.eq(u.betaG1,h.singularPoints[0]))return e&&e.error("First element of beta*tau*G1 section (beta*G1) does not match the one in the contribution section"),!1;const m=await async function(t){const e=n.G2,a=2*e.F.n8,r=new Uint8Array(a);if(!o[6])throw t.error("File has no BetaG2 section"),new Error("File has no BetaG2 section");if(o[6].length>1)throw t.error("File has no BetaG2 section"),new Error("File has more than one GetaG2 section");i.pos=o[6][0].p;const c=await i.read(a),l=e.fromRprLEM(c);return e.toRprUncompressed(r,0,l),f.update(r),l}(e);if(!n.G2.eq(u.betaG2,m))return e&&e.error("betaG2 element in betaG2 section does not match the one in the contribution section"),!1;const L=f.digest();if(r==c&&!fi(L,u.nextChallenge))return e&&e.error("Hash of the values does not match the next challenge of the last contributor in the contributions section"),!1;e&&e.info(ui(L,"Next challenge hash: ")),w(u,d);for(let t=l.length-2;t>=0;t--){const a=l[t],i=t>0?l[t-1]:s;if(!await ro(n,a,i,e))return!1;w(a,i)}if(e&&e.info("-----------------------------------------------------"),o[12]&&o[13]&&o[14]&&o[15]){let t;if(t=await y("G1",2,12,"tauG1",e),!t)return!1;if(t=await y("G2",3,13,"tauG2",e),!t)return!1;if(t=await y("G1",4,14,"alphaTauG1",e),!t)return!1;if(t=await y("G1",5,15,"betaTauG1",e),!t)return!1}else e&&e.warn('this file does not contain phase2 precalculated values. Please run: \n   snarkjs "powersoftau preparephase2" to prepare this file to be used in the phase2 ceremony.');return await i.close(),e&&e.info("Powers of Tau Ok!"),!0;function w(t,a){if(!e)return;e.info("-----------------------------------------------------"),e.info(`Contribution #${t.id}: ${t.name||""}`),e.info(ui(t.nextChallenge,"Next Challenge: "));const i=new Uint8Array(2*n.G1.F.n8*6+2*n.G2.F.n8*3);Wi(i,0,n,t.key,!1);const o=ci(64);o.setPartialHash(t.partialHash),o.update(i);const r=o.digest();e.info(ui(r,"Response Hash:")),e.info(ui(a.nextChallenge,"Response Hash:")),1==t.type&&(e.info(`Beacon generator: ${Li(t.beaconHash)}`),e.info(`Beacon iterations Exp: ${t.numIterationsExp}`))}async function b(t,e,a,r,c,l){const s=n[e],d=2*s.F.n8;await ha(i,o,t);const u=[];let g=s.zero,_=s.zero,p=s.zero;for(let t=0;t<r;t+=65536){l&&l.debug(`points relations: ${a}: ${t}/${r} `);const e=Math.min(r-t,65536),o=await i.read(e*d),n=await s.batchLEMtoU(o);f.update(n);const h=new Uint8Array(4*(e-1));if(bt.randomFillSync(h),t>0){const t=s.fromRprLEM(o,0),e=bt.randomBytes(4).readUInt32BE(0,!0);g=s.add(g,s.timesScalar(p,e)),_=s.add(_,s.timesScalar(t,e))}const m=await s.multiExpAffine(o.slice(0,(e-1)*d),h),L=await s.multiExpAffine(o.slice(d),h);g=s.add(g,m),_=s.add(_,L),p=s.fromRprLEM(o,(e-1)*d);for(let a=0;a<c.length;a++){const i=c[a];if(i>=t&&i<t+e){const e=s.fromRprLEM(o,(i-t)*d);u.push(e)}}}return await ma(i),{R1:g,R2:_,singularPoints:u}}async function y(t,e,a,c,l){l&&l.debug(`Verifying phase2 calculated values ${c}...`);const s=n[t],d=2*s.F.n8,u=new Array(8);for(let t=0;t<8;t++)u[t]=bt.randomBytes(4).readUInt32BE(0,!0);for(let t=0;t<=r;t++){if(!await f(t))return!1}if(2==e){if(!await f(r+1))return!1}return!0;async function f(t){l&&l.debug(`Power ${t}...`);const f=n.Fr.n8,g=2**t;let _,p=new Uint32Array(g),h=new wt(u);l&&l.debug(`Creating random numbers Powers${t}...`);for(let e=0;e<g;e++)p[e]=t==r+1&&e==g-1?0:h.nextU32();p=new Uint8Array(p.buffer,p.byteOffset,p.byteLength),l&&l.debug(`reading points Powers${t}...`),await ha(i,o,e),_=new _e(g*d),t==r+1?(await i.readToBuffer(_,0,(g-1)*d),_.set(n.G1.zeroAffine,(g-1)*d)):await i.readToBuffer(_,0,g*d),await ma(i,!0);const m=await s.multiExpAffine(_,p,l,c+"_"+t);p=new _e(g*f),h=new wt(u);const L=new Uint8Array(4),w=new DataView(L.buffer);l&&l.debug(`Creating random numbers Powers${t}...`);for(let e=0;e<g;e++)e==g-1&&t==r+1||(w.setUint32(0,h.nextU32(),!0),p.set(L,e*f));l&&l.debug(`batchToMontgomery ${t}...`),p=await n.Fr.batchToMontgomery(p),l&&l.debug(`fft ${t}...`),p=await n.Fr.fft(p),l&&l.debug(`batchFromMontgomery ${t}...`),p=await n.Fr.batchFromMontgomery(p),l&&l.debug(`reading points Lagrange${t}...`),await ha(i,o,a),i.pos+=d*(2**t-1),await i.readToBuffer(_,0,g*d),await ma(i,!0);const b=await s.multiExpAffine(_,p,l,c+"_"+t+"_transformed");return!!s.eq(m,b)||(l&&l.error("Phase2 caclutation does not match with powers of tau"),!1)}}},challengeContribute:async function(t,e,a,i,o){await ci.ready();const n=await ua(e),r=8*t.F1.n64*2,c=8*t.F2.n64*2,l=(n.totalSize+r-64-c)/(4*r+c);let s=l,d=0;for(;s>1;)s/=2,d+=1;if(2**d!=l)throw new Error("Invalid file size");o&&o.debug("Power to tau size: "+d);const u=await pi(i),f=await da(a),g=ci(64);for(let t=0;t<n.totalSize;t+=n.pageSize){o&&o.debug(`Hashing challenge ${t}/${n.totalSize}`);const e=Math.min(n.totalSize-t,n.pageSize),a=await n.read(e);g.update(a)}const _=await n.read(64,0);o&&o.info(ui(_,"Claimed Previous Response Hash: "));const p=g.digest();o&&o.info(ui(p,"Current Challenge Hash: "));const h=$i(t,p,u);o&&["tau","alpha","beta"].forEach((e=>{o.debug(e+".g1_s: "+t.G1.toString(h[e].g1_s,16)),o.debug(e+".g1_sx: "+t.G1.toString(h[e].g1_sx,16)),o.debug(e+".g2_sp: "+t.G2.toString(h[e].g2_sp,16)),o.debug(e+".g2_spx: "+t.G2.toString(h[e].g2_spx,16)),o.debug("")}));const m=ci(64);await f.write(p),m.update(p),await lo(n,f,m,t,"G1",2**d*2-1,t.Fr.one,h.tau.prvKey,"COMPRESSED","tauG1",o),await lo(n,f,m,t,"G2",2**d,t.Fr.one,h.tau.prvKey,"COMPRESSED","tauG2",o),await lo(n,f,m,t,"G1",2**d,h.alpha.prvKey,h.tau.prvKey,"COMPRESSED","alphaTauG1",o),await lo(n,f,m,t,"G1",2**d,h.beta.prvKey,h.tau.prvKey,"COMPRESSED","betaTauG1",o),await lo(n,f,m,t,"G2",1,h.beta.prvKey,h.tau.prvKey,"COMPRESSED","betaTauG2",o);const L=new Uint8Array(2*t.F1.n8*6+2*t.F2.n8*3);Wi(L,0,t,h,!1),await f.write(L),m.update(L);const w=m.digest();o&&o.info(ui(w,"Contribution Response Hash: ")),await f.close(),await n.close()},beacon:async function(t,e,a,i,o,n){const r=mi(i);if(0==r.byteLength||2*r.byteLength!=i.length)return n&&n.error("Invalid Beacon Hash. (It must be a valid hexadecimal sequence)"),!1;if(r.length>=256)return n&&n.error("Maximum lenght of beacon hash is 255 bytes"),!1;if((o=parseInt(o))<10||o>63)return n&&n.error("Invalid numIterationsExp. (Must be between 10 and 63)"),!1;await ci.ready();const{fd:c,sections:l}=await fa(t,"ptau",1),{curve:s,power:d,ceremonyPower:u}=await Ji(c,l);if(d!=u)return n&&n.error("This file has been reduced. You cannot contribute into a reduced file."),!1;l[12]&&n&&n.warn("Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.");const f=await to(c,s,l),g={name:a,type:1,numIterationsExp:o,beaconHash:r};let _;_=f.length>0?f[f.length-1].nextChallenge:io(s,d,n),g.key=oo(s,_,r,o);const p=new ci(64);p.update(_);const h=await ga(e,"ptau",1,7);await Zi(h,s,d);const m=[];let L;L=await A(2,"G1",2**d*2-1,s.Fr.e(1),g.key.tau.prvKey,"tauG1",n),g.tauG1=L[1],L=await A(3,"G2",2**d,s.Fr.e(1),g.key.tau.prvKey,"tauG2",n),g.tauG2=L[1],L=await A(4,"G1",2**d,g.key.alpha.prvKey,g.key.tau.prvKey,"alphaTauG1",n),g.alphaG1=L[0],L=await A(5,"G1",2**d,g.key.beta.prvKey,g.key.tau.prvKey,"betaTauG1",n),g.betaG1=L[0],L=await A(6,"G2",1,g.key.beta.prvKey,g.key.tau.prvKey,"betaTauG2",n),g.betaG2=L[0],g.partialHash=p.getPartialHash();const w=new Uint8Array(2*s.F1.n8*6+2*s.F2.n8*3);Wi(w,0,s,g.key,!1),p.update(new Uint8Array(w));const b=p.digest();n&&n.info(ui(b,"Contribution Response Hash imported: "));const y=new ci(64);return y.update(b),await I(h,"G1",2,2**d*2-1,"tauG1",n),await I(h,"G2",3,2**d,"tauG2",n),await I(h,"G1",4,2**d,"alphaTauG1",n),await I(h,"G1",5,2**d,"betaTauG1",n),await I(h,"G2",6,1,"betaG2",n),g.nextChallenge=y.digest(),n&&n.info(ui(g.nextChallenge,"Next Challenge Hash: ")),f.push(g),await ao(h,s,f),await c.close(),await h.close(),b;async function A(t,e,a,i,o,n,r){const d=[];c.pos=l[t][0].p,await _a(h,t),m[t]=h.pos;const u=s[e],f=2*u.F.n8,g=Math.floor((1<<20)/f);let _=i;for(let t=0;t<a;t+=g){r&&r.debug(`applying key${n}: ${t}/${a}`);const e=Math.min(a-t,g),i=await c.read(e*f),l=await u.batchApplyKey(i,_,o),m=h.write(l),L=await u.batchLEMtoC(l);if(p.update(L),await m,0==t)for(let t=0;t<Math.min(2,a);t++)d.push(u.fromRprLEM(l,t*f));_=s.Fr.mul(_,s.Fr.exp(o,e))}return await pa(h),d}async function I(t,e,a,i,o,n){const r=s[e],c=2*r.F.n8,l=Math.floor((1<<24)/c),d=t.pos;t.pos=m[a];for(let e=0;e<i;e+=l){n&&n.debug(`Hashing ${o}: ${e}/${i}`);const a=Math.min(i-e,l),s=await t.read(a*c),d=await r.batchLEMtoU(s);y.update(d)}t.pos=d}},contribute:async function(t,e,a,i,o){await ci.ready();const{fd:n,sections:r}=await fa(t,"ptau",1),{curve:c,power:l,ceremonyPower:s}=await Ji(n,r);if(l!=s)throw o&&o.error("This file has been reduced. You cannot contribute into a reduced file."),new Error("This file has been reduced. You cannot contribute into a reduced file.");r[12]&&o&&o.warn("WARNING: Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.");const d=await to(n,c,r),u={name:a,type:0};let f;const g=await pi(i);f=d.length>0?d[d.length-1].nextChallenge:io(c,l,o),u.key=$i(c,f,g);const _=new ci(64);_.update(f);const p=await ga(e,"ptau",1,7);await Zi(p,c,l);const h=[];let m;m=await y(2,"G1",2**l*2-1,c.Fr.e(1),u.key.tau.prvKey,"tauG1"),u.tauG1=m[1],m=await y(3,"G2",2**l,c.Fr.e(1),u.key.tau.prvKey,"tauG2"),u.tauG2=m[1],m=await y(4,"G1",2**l,u.key.alpha.prvKey,u.key.tau.prvKey,"alphaTauG1"),u.alphaG1=m[0],m=await y(5,"G1",2**l,u.key.beta.prvKey,u.key.tau.prvKey,"betaTauG1"),u.betaG1=m[0],m=await y(6,"G2",1,u.key.beta.prvKey,u.key.tau.prvKey,"betaTauG2"),u.betaG2=m[0],u.partialHash=_.getPartialHash();const L=new Uint8Array(2*c.F1.n8*6+2*c.F2.n8*3);Wi(L,0,c,u.key,!1),_.update(new Uint8Array(L));const w=_.digest();o&&o.info(ui(w,"Contribution Response Hash imported: "));const b=new ci(64);return b.update(w),await A(p,"G1",2,2**l*2-1,"tauG1"),await A(p,"G2",3,2**l,"tauG2"),await A(p,"G1",4,2**l,"alphaTauG1"),await A(p,"G1",5,2**l,"betaTauG1"),await A(p,"G2",6,1,"betaG2"),u.nextChallenge=b.digest(),o&&o.info(ui(u.nextChallenge,"Next Challenge Hash: ")),d.push(u),await ao(p,c,d),await n.close(),await p.close(),w;async function y(t,e,a,i,l,s){const d=[];n.pos=r[t][0].p,await _a(p,t),h[t]=p.pos;const u=c[e],f=2*u.F.n8,g=Math.floor((1<<20)/f);let m=i;for(let t=0;t<a;t+=g){o&&o.debug(`processing: ${s}: ${t}/${a}`);const e=Math.min(a-t,g),i=await n.read(e*f),r=await u.batchApplyKey(i,m,l),h=p.write(r),L=await u.batchLEMtoC(r);if(_.update(L),await h,0==t)for(let t=0;t<Math.min(2,a);t++)d.push(u.fromRprLEM(r,t*f));m=c.Fr.mul(m,c.Fr.exp(l,e))}return await pa(p),d}async function A(t,e,a,i,n){const r=c[e],l=2*r.F.n8,s=Math.floor((1<<24)/l),d=t.pos;t.pos=h[a];for(let e=0;e<i;e+=s){o&&e&&o.debug(`Hashing ${n}: `+e);const a=Math.min(i-e,s),c=await t.read(a*l),d=await r.batchLEMtoU(c);b.update(d)}t.pos=d}},preparePhase2:async function(t,e,a){const{fd:i,sections:o}=await fa(t,"ptau",1),{curve:n,power:r}=await Ji(i,o),c=await ga(e,"ptau",1,11);return await Zi(c,n,r),await ba(i,o,c,2),await ba(i,o,c,3),await ba(i,o,c,4),await ba(i,o,c,5),await ba(i,o,c,6),await ba(i,o,c,7),await l(2,12,"G1","tauG1"),await l(3,13,"G2","tauG2"),await l(4,14,"G1","alphaTauG1"),await l(5,15,"G1","betaTauG1"),await i.close(),void await c.close();async function l(t,e,l,s){a&&a.debug("Starting section: "+s),await _a(c,e);for(let t=0;t<=r;t++)await d(t);async function d(e){const d=2**e,u=n[l];n.Fr;const f=2*u.F.n8;let g;u.F.n8,g=new _e(d*f),await ha(i,o,t),2==t&&e==r+1?(await i.readToBuffer(g,0,(d-1)*f),g.set(n.G1.zeroAffine,(d-1)*f)):await i.readToBuffer(g,0,d*f),await ma(i,!0),g=await u.lagrangeEvaluations(g,"affine","affine",a,s),await c.write(g)}2==t&&await d(r+1),await pa(c)}},truncate:async function(t,e,a){const{fd:i,sections:o}=await fa(t,"ptau",1),{curve:n,power:r,ceremonyPower:c}=await Ji(i,o),l=2*n.G1.F.n8,s=2*n.G2.F.n8;for(let t=1;t<r;t++)await d(t);return await i.close(),!0;async function d(t){let r=t.toString();for(;r.length<2;)r="0"+r;a&&a.debug("Writing Power: "+r);const d=await ga(e+r+".ptau","ptau",1,11);await Zi(d,n,t,c),await ba(i,o,d,2,(2**t*2-1)*l),await ba(i,o,d,3,2**t*s),await ba(i,o,d,4,2**t*l),await ba(i,o,d,5,2**t*l),await ba(i,o,d,6,s),await ba(i,o,d,7),await ba(i,o,d,12,(2**(t+1)*2-1)*l),await ba(i,o,d,13,(2**t*2-1)*s),await ba(i,o,d,14,(2**t*2-1)*l),await ba(i,o,d,15,(2**t*2-1)*l),await d.close()}},convert:async function(t,e,a){const{fd:i,sections:o}=await fa(t,"ptau",1),{curve:n,power:r}=await Ji(i,o),c=await ga(e,"ptau",1,11);return await Zi(c,n,r),await ba(i,o,c,2),await ba(i,o,c,3),await ba(i,o,c,4),await ba(i,o,c,5),await ba(i,o,c,6),await ba(i,o,c,7),await async function(t,e,l,s){a&&a.debug("Starting section: "+s);await _a(c,e);const d=o[e][0].size,u=i.pageSize;await ha(i,o,e);for(let t=0;t<d;t+=u){const e=Math.min(d-t,u),a=await i.read(e);await c.write(a)}await ma(i),2==t&&await async function(e){const d=2**e,u=n[l],f=2*u.F.n8;let g;g=new _e(d*f),await ha(i,o,t),2==t&&e==r+1?(await i.readToBuffer(g,0,(d-1)*f),g.set(n.G1.zeroAffine,(d-1)*f)):await i.readToBuffer(g,0,d*f);await ma(i,!0),g=await u.lagrangeEvaluations(g,"affine","affine",a,s),await c.write(g)}(r+1);await pa(c)}(2,12,"G1","tauG1"),await ba(i,o,c,13),await ba(i,o,c,14),await ba(i,o,c,15),await i.close(),void await c.close()},exportJson:async function(t,e){const{fd:a,sections:i}=await fa(t,"ptau",1),{curve:o,power:n}=await Ji(a,i),r={};return r.q=o.q,r.power=n,r.contributions=await to(a,o,i),r.tauG1=await c(2,"G1",2**n*2-1,"tauG1"),r.tauG2=await c(3,"G2",2**n,"tauG2"),r.alphaTauG1=await c(4,"G1",2**n,"alphaTauG1"),r.betaTauG1=await c(5,"G1",2**n,"betaTauG1"),r.betaG2=await c(6,"G2",1,"betaG2"),r.lTauG1=await l(12,"G1","lTauG1"),r.lTauG2=await l(13,"G2","lTauG2"),r.lAlphaTauG1=await l(14,"G1","lAlphaTauG2"),r.lBetaTauG1=await l(15,"G1","lBetaTauG2"),await a.close(),r;async function c(t,n,r,c){const l=o[n],s=2*l.F.n8,d=[];await ha(a,i,t);for(let t=0;t<r;t++){e&&t&&t%1e4==0&&console.log(`${c}: `+t);const i=await a.read(s);d.push(l.fromRprLEM(i,0))}return await ma(a),d}async function l(t,r,c){const l=o[r],s=2*l.F.n8,d=[];await ha(a,i,t);for(let t=0;t<=n;t++){e&&console.log(`${c}: Power: ${t}`),d[t]=[];const i=2**t;for(let o=0;o<i;o++){e&&o&&o%1e4==0&&console.log(`${c}: ${o}/${i}`);const n=await a.read(s);d[t].push(l.fromRprLEM(n,0))}}return await ma(a),d}}});const uo=262144,fo={get:function(t,e){return isNaN(e)?t[e]:t.getElement(e)},set:function(t,e,a){return isNaN(e)?(t[e]=a,!0):t.setElement(e,a)}};class go{constructor(t){this.length=t||0,this.arr=new Array(uo);for(let e=0;e<t;e+=uo)this.arr[e/uo]=new Array(Math.min(uo,t-e));return this}push(){for(let t=0;t<arguments.length;t++)this.setElement(this.length,arguments[t])}slice(t,e){const a=new Array(e-t);for(let i=t;i<e;i++)a[i-t]=this.getElement(i);return a}getElement(t){t=parseInt(t);const e=Math.floor(t/uo),a=t%uo;return this.arr[e]?this.arr[e][a]:void 0}setElement(t,e){t=parseInt(t);const a=Math.floor(t/uo);this.arr[a]||(this.arr[a]=new Array(uo));const i=t%uo;return this.arr[a][i]=e,t>=this.length&&(this.length=t+1),!0}getKeys(){const t=new _o;for(let e=0;e<this.arr.length;e++)if(this.arr[e])for(let a=0;a<this.arr[e].length;a++)void 0!==this.arr[e][a]&&t.push(e*uo+a);return t}}class _o{constructor(t){const e=new go(t);return new Proxy(e,fo)}}async function po(t,e,a){const i={};return await ha(t,e,1),i.n8=await t.readULE32(),i.prime=await wa(t,i.n8),i.curve=await async function(t,e,a){let i;if(et(t,He))i=await je(e,a);else{if(!et(t,Ve))throw new Error(`Curve not supported: ${F(t)}`);i=await Ke(e,a)}return i}(i.prime,a),i.nVars=await t.readULE32(),i.nOutputs=await t.readULE32(),i.nPubInputs=await t.readULE32(),i.nPrvInputs=await t.readULE32(),i.nLabels=await t.readULE64(),i.nConstraints=await t.readULE32(),await ma(t),i}async function ho(t,e,a,i,o,n){const{fd:r,sections:c}=await fa(t,"r1cs",1),l=await po(r,c,i);return e&&(l.constraints=await async function(t,e,a,i,o){const n=await ya(t,e,2);let r,c=0;r=a.nConstraints>1<<20?new _o:[];for(let t=0;t<a.nConstraints;t++){i&&t%1e5==0&&i.info(`${o}: Loading constraints: ${t}/${a.nConstraints}`);const e=l();r.push(e)}return r;function l(){const t=[];return t[0]=s(),t[1]=s(),t[2]=s(),t}function s(){const t={},e=n.slice(c,c+4);c+=4;const i=new DataView(e.buffer).getUint32(0,!0),o=n.slice(c,c+(4+a.n8)*i);c+=(4+a.n8)*i;const r=new DataView(o.buffer);for(let e=0;e<i;e++){const i=r.getUint32(e*(4+a.n8),!0),n=a.curve.Fr.fromRprLE(o,e*(4+a.n8)+4);t[i]=n}return t}}(r,c,l,o,n)),a&&(l.map=await async function(t,e,a,i,o){const n=await ya(t,e,3);let r,c=0;r=a.nVars>1<<20?new _o:[];for(let t=0;t<a.nVars;t++){i&&t%1e4==0&&i.info(`${o}: Loading map: ${t}/${a.nVars}`);const e=l();r.push(e)}return r;function l(){const t=n.slice(c,c+8);c+=8;const e=new DataView(t.buffer),a=e.getUint32(0,!0);return 4294967296*e.getUint32(4,!0)+a}}(r,c,l,o,n)),await r.close(),l}const mo=$e.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001",16),Lo=$e.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");function wo(t,e){if(e instanceof Uint8Array)return t.toString(e);if(Array.isArray(e))return e.map(wo.bind(null,t));if("object"==typeof e){const a={};return Object.keys(e).forEach((i=>{a[i]=wo(t,e[i])})),a}return"bigint"==typeof e||void 0!==e.eq?e.toString(10):e}var bo=Object.freeze({__proto__:null,print:function(t,e,a){for(let e=0;e<t.constraints.length;e++)i(t.constraints[e]);function i(i){const o=a=>{let i="";return Object.keys(a).forEach((o=>{let n=e.varIdx2Name[o];"one"==n&&(n="");let r=t.curve.Fr.toString(a[o]);"1"==r&&(r=""),"-1"==r&&(r="-"),""!=i&&"-"!=r[0]&&(r="+"+r),""!=i&&(r=" "+r),i=i+r+n})),i},n=`[ ${o(i[0])} ] * [ ${o(i[1])} ] - [ ${o(i[2])} ] = 0`;a&&a.info(n)}},info:async function(t,e){const a=await ho(t);return $e.eq(a.prime,Lo)?e&&e.info("Curve: bn-128"):$e.eq(a.prime,mo)?e&&e.info("Curve: bls12-381"):e&&e.info(`Unknown Curve. Prime: ${$e.toString(a.prime)}`),e&&e.info(`# of Wires: ${a.nVars}`),e&&e.info(`# of Constraints: ${a.nConstraints}`),e&&e.info(`# of Private Inputs: ${a.nPrvInputs}`),e&&e.info(`# of Public Inputs: ${a.nPubInputs}`),e&&e.info(`# of Labels: ${a.nLabels}`),e&&e.info(`# of Outputs: ${a.nOutputs}`),a},exportJson:async function(t,e){const a=await ho(t,!0,!0,!0,e),i=a.curve.Fr;return delete a.curve,wo(i,a)}});async function yo(t){const e={labelIdx2Name:["one"],varIdx2Name:["one"],componentIdx2Name:[]},a=await ua(t),i=await a.read(a.totalSize),o=new TextDecoder("utf-8").decode(i).split("\n");for(let t=0;t<o.length;t++){const a=o[t].split(",");4==a.length&&(e.varIdx2Name[a[1]]?e.varIdx2Name[a[1]]+="|"+a[3]:e.varIdx2Name[a[1]]=a[3],e.labelIdx2Name[a[0]]=a[3],e.componentIdx2Name[a[2]]||(e.componentIdx2Name[a[2]]=n(a[3])))}return await a.close(),e;function n(t){const e=t.split(".");return e.pop(),e.join(".")}}var Ao=Object.freeze({__proto__:null,calculate:Ni,debug:async function(t,e,a,i,o,n){const r=await ua(e),c=await r.read(r.totalSize);await r.close();let l={sanityCheck:!0},s=await yo(i);o.set&&(s||(s=await yo(i)),l.logSetSignal=function(t,e){n&&n.info("SET "+s.labelIdx2Name[t]+" <-- "+e.toString())}),o.get&&(s||(s=await yo(i)),l.logGetSignal=function(t,e){n&&n.info("GET "+s.labelIdx2Name[t]+" --\x3e "+e.toString())}),o.trigger&&(s||(s=await yo(i)),l.logStartComponent=function(t){n&&n.info("START: "+s.componentIdx2Name[t])},l.logFinishComponent=function(t){n&&n.info("FINISH: "+s.componentIdx2Name[t])}),l.sym=s;const d=await Mi(c,l),u=await d.calculateWitness(t),f=await ga(a,"wtns",2,2);await async function(t,e,a){await _a(t,1);const i=8*(Math.floor(($e.bitLength(a)-1)/64)+1);await t.writeULE32(i),await La(t,a,i),await t.writeULE32(e.length),await pa(t),await _a(t,2);for(let a=0;a<e.length;a++)await La(t,e[a],i);await pa(t)}(f,u,d.prime),await f.close()},exportJson:async function(t){return await async function(t){const{fd:e,sections:a}=await fa(t,"wtns",2),{n8:i,nWitness:o}=await Pi(e,a);await ha(e,a,2);const n=[];for(let t=0;t<o;t++){const t=await wa(e,i);n.push(t)}return await ma(e),await e.close(),n}(t)}});const Io=262144,Co={get:function(t,e){return isNaN(e)?t[e]:t.getElement(e)},set:function(t,e,a){return isNaN(e)?(t[e]=a,!0):t.setElement(e,a)}};class vo{constructor(t){this.length=t||0,this.arr=new Array(Io);for(let e=0;e<t;e+=Io)this.arr[e/Io]=new Array(Math.min(Io,t-e));return this}push(){for(let t=0;t<arguments.length;t++)this.setElement(this.length,arguments[t])}slice(t,e){const a=new Array(e-t);for(let i=t;i<e;i++)a[i-t]=this.getElement(i);return a}getElement(t){t=parseInt(t);const e=Math.floor(t/Io),a=t%Io;return this.arr[e]?this.arr[e][a]:void 0}setElement(t,e){t=parseInt(t);const a=Math.floor(t/Io);this.arr[a]||(this.arr[a]=new Array(Io));const i=t%Io;return this.arr[a][i]=e,t>=this.length&&(this.length=t+1),!0}getKeys(){const t=new Fo;for(let e=0;e<this.arr.length;e++)if(this.arr[e])for(let a=0;a<this.arr[e].length;a++)void 0!==this.arr[e][a]&&t.push(e*Io+a);return t}}class Fo{constructor(t){const e=new vo(t);return new Proxy(e,Co)}}async function xo(t,e,a,i){await ci.ready();const o=ci(64),{fd:n,sections:r}=await fa(e,"ptau",1),{curve:c,power:l}=await Ji(n,r),{fd:s,sections:d}=await fa(t,"r1cs",1),u=await po(s,d,!1),f=2*c.G1.F.n8,g=2*c.G2.F.n8;if(u.prime!=c.r)return i&&i.error("r1cs curve does not match powers of tau ceremony curve"),-1;const _=di(u.nConstraints+u.nPubInputs+u.nOutputs+1-1)+1;if(_>l)return i&&i.error(`circuit too big for this power of tau ceremony. ${u.nConstraints}*2 > 2**${l}`),-1;if(!r[12])return i&&i.error("Powers of tau is not prepared."),-1;const p=u.nOutputs+u.nPubInputs,h=2**_,m=await Ca(a,1);await m.writeULE32(1),await va(m);const L=await Ca(a,2),w=c.q,b=8*(Math.floor(($e.bitLength(w)-1)/64)+1),y=c.r,A=8*(Math.floor(($e.bitLength(y)-1)/64)+1),I=$e.mod($e.shl(1,8*A),y),C=c.Fr.e($e.mod($e.mul(I,I),y));let v,F,x;await L.writeULE32(b),await La(L,w,b),await L.writeULE32(A),await La(L,y,A),await L.writeULE32(u.nVars),await L.writeULE32(p),await L.writeULE32(h),v=await n.read(f,r[4][0].p),await L.write(v),v=await c.G1.batchLEMtoU(v),o.update(v),F=await n.read(f,r[5][0].p),await L.write(F),F=await c.G1.batchLEMtoU(F),o.update(F),x=await n.read(g,r[6][0].p),await L.write(x),x=await c.G2.batchLEMtoU(x),o.update(x);const E=new Uint8Array(f);c.G1.toRprLEM(E,0,c.G1.g);const B=new Uint8Array(g);c.G2.toRprLEM(B,0,c.G2.g);const S=new Uint8Array(f);c.G1.toRprUncompressed(S,0,c.G1.g);const G=new Uint8Array(g);c.G2.toRprUncompressed(G,0,c.G2.g),await L.write(B),await L.write(E),await L.write(B),o.update(G),o.update(S),o.update(G),await va(L),i&&i.info("Reading r1cs");let P=await ya(s,d,2);const O=new Fo(u.nVars),U=new Fo(u.nVars),z=new Fo(u.nVars),q=new Fo(u.nVars-p-1),Q=new Array(p+1);i&&i.info("Reading tauG1");let M=await ya(n,r,12,(h-1)*f,h*f);i&&i.info("Reading tauG2");let k=await ya(n,r,13,(h-1)*g,h*g);i&&i.info("Reading alphatauG1");let R=await ya(n,r,14,(h-1)*f,h*f);i&&i.info("Reading betatauG1");let N=await ya(n,r,15,(h-1)*f,h*f);await async function(){const t=new Uint8Array(12+c.Fr.n8),e=new DataView(t.buffer),o=new Uint8Array(c.Fr.n8);c.Fr.toRprLE(o,0,c.Fr.e(1));let n=0;function r(){const t=P.slice(n,n+4);n+=4;return new DataView(t.buffer).getUint32(0,!0)}const l=new Fo;for(let t=0;t<u.nConstraints;t++){i&&t%1e4==0&&i.debug(`processing constraints: ${t}/${u.nConstraints}`);const e=r();for(let a=0;a<e;a++){const e=r(),a=n;n+=c.Fr.n8;const i=0,o=f*t,s=3,d=f*t;void 0===O[e]&&(O[e]=[]),O[e].push([i,o,a]),e<=p?(void 0===Q[e]&&(Q[e]=[]),Q[e].push([s,d,a])):(void 0===q[e-p-1]&&(q[e-p-1]=[]),q[e-p-1].push([s,d,a])),l.push([0,t,e,a])}const a=r();for(let e=0;e<a;e++){const e=r(),a=n;n+=c.Fr.n8;const i=0,o=f*t,s=1,d=g*t,u=2,_=f*t;void 0===U[e]&&(U[e]=[]),U[e].push([i,o,a]),void 0===z[e]&&(z[e]=[]),z[e].push([s,d,a]),e<=p?(void 0===Q[e]&&(Q[e]=[]),Q[e].push([u,_,a])):(void 0===q[e-p-1]&&(q[e-p-1]=[]),q[e-p-1].push([u,_,a])),l.push([1,t,e,a])}const o=r();for(let e=0;e<o;e++){const e=r(),a=n;n+=c.Fr.n8;const i=0,o=f*t;e<=p?(void 0===Q[e]&&(Q[e]=[]),Q[e].push([i,o,a])):(void 0===q[e-p-1]&&(q[e-p-1]=[]),q[e-p-1].push([i,o,a]))}}for(let t=0;t<=p;t++){const e=0,a=f*(u.nConstraints+t),i=3,o=f*(u.nConstraints+t);void 0===O[t]&&(O[t]=[]),O[t].push([e,a,-1]),void 0===Q[t]&&(Q[t]=[]),Q[t].push([i,o,-1]),l.push([0,u.nConstraints+t,t,-1])}const s=new _e(l.length*(12+c.Fr.n8)+4),d=new Uint8Array(4);new DataView(d.buffer).setUint32(0,l.length,!0),s.set(d);let _=4;for(let t=0;t<l.length;t++)i&&t%1e5==0&&i.debug(`writing coeffs: ${t}/${l.length}`),m(l[t]);const h=await Ca(a,4);function m(a){let i;e.setUint32(0,a[0],!0),e.setUint32(4,a[1],!0),e.setUint32(8,a[2],!0),i=a[3]>=0?c.Fr.fromRprLE(P.slice(a[3],a[3]+c.Fr.n8),0):c.Fr.fromRprLE(o,0);const n=c.Fr.mul(i,C);c.Fr.toRprLE(t,12,n),s.set(t,_),_+=t.length}await h.write(s),await va(h)}(),await j(3,"G1",Q,"IC"),await async function(){const t=new _e(h*f);if(_<c.Fr.s){let e=await ya(n,r,12,(2*h-1)*f,2*h*f);for(let a=0;a<h;a++){i&&a%1e4==0&&i.debug(`spliting buffer: ${a}/${h}`);const o=e.slice((2*a+1)*f,(2*a+1)*f+f);t.set(o,a*f)}}else{if(_!=c.Fr.s)throw i&&i.error("Circuit too big"),new Error("Circuit too big for this curve");{const e=r[12][0].p+(2**(_+1)-1)*f;await n.readToBuffer(t,0,h*f,e+h*f)}}const e=await Ca(a,9);await e.write(t),await va(e)}(),await async function(){$(h-1);for(let t=0;t<h-1;t+=16384){i&&i.debug(`HashingHPoints: ${t}/${h}`);const e=Math.min(h-1,16384);await V(t,e)}}(),await j(8,"G1",q,"C"),await j(5,"G1",O,"A"),await j(6,"G1",U,"B1"),await j(7,"G2",z,"B2");const T=o.digest(),D=await Ca(a,10);return await D.write(T),await D.writeULE32(0),await va(D),i&&i.info(ui(T,"Circuit hash: ")),await s.close(),await n.close(),T;async function j(t,e,n,r){const l=c[e];$(n.length);const s=await Ca(a,t);let d=[],u=0;for(;u<n.length;){let t=0;for(;u<n.length&&t<c.tm.concurrency;){i&&i.debug(`Writing points start ${r}: ${u}/${n.length}`);let a=1,o=n[u]?n[u].length:0;for(;u+a<n.length&&o+(n[u+a]?n[u+a].length:0)<32768&&a<32768;)o+=n[u+a]?n[u+a].length:0,a++;const c=n.slice(u,u+a),l=u;d.push(K(e,c,i,r).then((t=>(i&&i.debug(`Writing points end ${r}: ${l}/${n.length}`),t)))),u+=a,t++}const a=await Promise.all(d);for(let t=0;t<a.length;t++){await s.write(a[t][0]);const e=await l.batchLEMtoU(a[t][0]);o.update(e)}d=[]}await va(s)}async function K(t,e,a,i){const o=c[t],n=2*o.F.n8,r=3*o.F.n8,l=2*o.F.n8;let s,d,u,f;if("G1"==t)s="g1m_timesScalarAffine",d="g1m_multiexpAffine",u="g1m_batchToAffine",f="g1m_zero";else{if("G2"!=t)throw new Error("Invalid group");s="g2m_timesScalarAffine",d="g2m_multiexpAffine",u="g2m_batchToAffine",f="g2m_zero"}let g,_,p=0;for(let t=0;t<e.length;t++)p+=e[t]?e[t].length:0;p>32768?(g=new _e(p*n),_=new _e(p*c.Fr.n8)):(g=new Uint8Array(p*n),_=new Uint8Array(p*c.Fr.n8));let h=0,m=0;const L=[M,k,R,N],w=new Uint8Array(c.Fr.n8);c.Fr.toRprLE(w,0,c.Fr.e(1));let b=0;for(let t=0;t<e.length;t++)if(e[t])for(let o=0;o<e[t].length;o++)a&&o&&o%1e4==0&&a.debug(`Configuring big array ${i}: ${o}/${e[t].length}`),g.set(L[e[t][o][0]].slice(e[t][o][1],e[t][o][1]+n),b*n),e[t][o][2]>=0?_.set(P.slice(e[t][o][2],e[t][o][2]+c.Fr.n8),b*c.Fr.n8):_.set(w,b*c.Fr.n8),b++;if(e.length>1){const t=[];t.push({cmd:"ALLOCSET",var:0,buff:g}),t.push({cmd:"ALLOCSET",var:1,buff:_}),t.push({cmd:"ALLOC",var:2,len:e.length*r}),h=0,m=0;let a=0;for(let i=0;i<e.length;i++)e[i]?(1==e[i].length?t.push({cmd:"CALL",fnName:s,params:[{var:0,offset:h},{var:1,offset:m},{val:c.Fr.n8},{var:2,offset:a}]}):t.push({cmd:"CALL",fnName:d,params:[{var:0,offset:h},{var:1,offset:m},{val:c.Fr.n8},{val:e[i].length},{var:2,offset:a}]}),h+=n*e[i].length,m+=c.Fr.n8*e[i].length,a+=r):(t.push({cmd:"CALL",fnName:f,params:[{var:2,offset:a}]}),a+=r);t.push({cmd:"CALL",fnName:u,params:[{var:2},{val:e.length},{var:2}]}),t.push({cmd:"GET",out:0,var:2,len:e.length*l});return await c.tm.queueAction(t)}{let t=await o.multiExpAffine(g,_,a,i);return t=[o.toAffine(t)],t}}async function V(t,e){const a=await n.read(e*f,r[2][0].p+(t+h)*f),i=await n.read(e*f,r[2][0].p+t*f),l=c.tm.concurrency,s=Math.floor(e/l),d=[];for(let t=0;t<l;t++){let o;if(o=t<l-1?s:e-t*s,0==o)continue;const n=a.slice(t*s*f,(t*s+o)*f),r=i.slice(t*s*f,(t*s+o)*f);d.push(H(n,r))}const u=await Promise.all(d);for(let t=0;t<u.length;t++)o.update(u[t][0])}async function H(t,e){const a=t.byteLength/f,i=3*c.G1.F.n8,o=[];o.push({cmd:"ALLOCSET",var:0,buff:t}),o.push({cmd:"ALLOCSET",var:1,buff:e}),o.push({cmd:"ALLOC",var:2,len:a*i});for(let t=0;t<a;t++)o.push({cmd:"CALL",fnName:"g1m_subAffine",params:[{var:0,offset:t*f},{var:1,offset:t*f},{var:2,offset:t*i}]});o.push({cmd:"CALL",fnName:"g1m_batchToAffine",params:[{var:2},{val:a},{var:2}]}),o.push({cmd:"CALL",fnName:"g1m_batchLEMtoU",params:[{var:2},{val:a},{var:2}]}),o.push({cmd:"GET",out:0,var:2,len:a*f});return await c.tm.queueAction(o)}function $(t){const e=new Uint8Array(4);new DataView(e.buffer,e.byteOffset,e.byteLength).setUint32(0,t,!1),o.update(e)}}const Eo=_i;async function Bo(t,e,a,i){let o;await ci.ready();const n=await Ci(a,2);if("groth16"!=n.protocol)throw new Error("zkey file is not groth16");const r=await Oa(n.q),c=2*r.G1.F.n8,l=await xi(a,2,r),s=ci(64);s.update(l.csHash);let d=r.G1.g;for(let t=0;t<l.contributions.length;t++){const e=l.contributions[t],a=gi(s);if(Si(a,r,e.delta.g1_s),Si(a,r,e.delta.g1_sx),!fi(a.digest(),e.transcript))return console.log(`INVALID(${t}): Inconsistent transcript `),!1;const i=Ki(r,e.transcript);if(o=await Eo(r,e.delta.g1_s,e.delta.g1_sx,i,e.delta.g2_spx),!0!==o)return console.log(`INVALID(${t}): public key G1 and G2 do not have the same ration `),!1;if(o=await Eo(r,d,e.deltaAfter,i,e.delta.g2_spx),!0!==o)return console.log(`INVALID(${t}): deltaAfter does not fillow the public key `),!1;if(1==e.type){const a=hi(e.beaconHash,e.numIterationsExp),i=r.Fr.fromRng(a),o=r.G1.toAffine(r.G1.fromRng(a)),n=r.G1.toAffine(r.G1.timesFr(o,i));if(!0!==r.G1.eq(o,e.delta.g1_s))return console.log(`INVALID(${t}): Key of the beacon does not match. g1_s `),!1;if(!0!==r.G1.eq(n,e.delta.g1_sx))return console.log(`INVALID(${t}): Key of the beacon does not match. g1_sx `),!1}Gi(s,r,e);const n=ci(64);Gi(n,r,e),e.contributionHash=n.digest(),d=e.deltaAfter}const u=await Ci(t,2);if("groth16"!=u.protocol)throw new Error("zkeyinit file is not groth16");if(!$e.eq(u.q,n.q)||!$e.eq(u.r,n.r)||u.n8q!=n.n8q||u.n8r!=n.n8r)return i&&i.error("INVALID:  Different curves"),!1;if(u.nVars!=n.nVars||u.nPublic!=n.nPublic||u.domainSize!=n.domainSize)return i&&i.error("INVALID:  Different circuit parameters"),!1;if(!r.G1.eq(n.vk_alpha_1,u.vk_alpha_1))return i&&i.error("INVALID:  Invalid alpha1"),!1;if(!r.G1.eq(n.vk_beta_1,u.vk_beta_1))return i&&i.error("INVALID:  Invalid beta1"),!1;if(!r.G2.eq(n.vk_beta_2,u.vk_beta_2))return i&&i.error("INVALID:  Invalid beta2"),!1;if(!r.G2.eq(n.vk_gamma_2,u.vk_gamma_2))return i&&i.error("INVALID:  Invalid gamma2"),!1;if(!r.G1.eq(n.vk_delta_1,d))return i&&i.error("INVALID:  Invalid delta1"),!1;if(o=await Eo(r,r.G1.g,d,r.G2.g,n.vk_delta_2),!0!==o)return i&&i.error("INVALID:  Invalid delta2"),!1;const f=await xi(t,2,r);if(!fi(l.csHash,f.csHash))return i&&i.error("INVALID:  Circuit does not match"),!1;let g;if(g=await Sa(t,a,3,2),!g)return i&&i.error("INVALID:  IC section is not identical"),!1;if(g=await Sa(t,a,4,2),!g)return i&&i.error("Coeffs section is not identical"),!1;if(g=await Sa(t,a,5,2),!g)return i&&i.error("A section is not identical"),!1;if(g=await Sa(t,a,6,2),!g)return i&&i.error("B1 section is not identical"),!1;if(g=await Sa(t,a,7,2),!g)return i&&i.error("B2 section is not identical"),!1;if(o=await async function(t,e,a,n,c,l,s,d){const u=1<<20,f=r[t],g=2*f.F.n8,_=await Fa(e,c,n),p=await Fa(a,c,n);let h=f.zero,m=f.zero;const L=_.readingSection.size/g;for(let t=0;t<L;t+=u){i&&i.debug(`Same ratio check ${d}:  ${t}/${L}`);const e=Math.min(L-t,u),a=await _.read(e*g),o=await p.read(e*g),n=new Uint8Array(4*e);bt.randomFillSync(n);const r=await f.multiExpAffine(a,n),c=await f.multiExpAffine(o,n);h=f.add(h,r),m=f.add(m,c)}return await xa(_),await xa(p),0==L||(o=await Eo(r,h,m,l,s),!0===o)}("G1",t,a,2,8,n.vk_delta_2,u.vk_delta_2,"L section"),!0!==o)return i&&i.error("L section does not match"),!1;if(o=await async function(){const t=1<<20,c=r.G1,l=r.Fr,s=2*c.F.n8,{fd:d,sections:f}=await fa(e,"ptau",1);let g=new _e(n.domainSize*n.n8r);const p=new Array(8);for(let t=0;t<8;t++)p[t]=bt.randomBytes(4).readUInt32BE(0,!0);const h=new wt(p);for(let t=0;t<n.domainSize-1;t++){const e=l.fromRng(h);l.toRprLE(g,t*n.n8r,e)}l.toRprLE(g,(n.domainSize-1)*n.n8r,l.zero);let m,L=c.zero;for(let e=0;e<n.domainSize;e+=t){i&&i.debug(`H Verificaition(tau):  ${e}/${n.domainSize}`);const a=Math.min(n.domainSize-e,t),o=await d.read(s*a,f[2][0].p+n.domainSize*s+e*s),r=await d.read(s*a,f[2][0].p+e*s),l=await _(o,r),u=g.slice(e*n.n8r,(e+a)*n.n8r),p=await c.multiExpAffine(l,u);L=c.add(L,p)}if(g=await l.batchToMontgomery(g),n.power<l.s)m=l.neg(l.e(2));else{const t=2**l.s,e=l.exp(l.shift,t);m=l.sub(e,l.one)}const w=n.power<l.s?l.w[n.power+1]:l.shift;g=await l.batchApplyKey(g,m,w),g=await l.fft(g),g=await l.batchFromMontgomery(g);const b=await Fa(a,9,2);let y=c.zero;for(let e=0;e<n.domainSize;e+=t){i&&i.debug(`H Verificaition(lagrange):  ${e}/${n.domainSize}`);const a=Math.min(n.domainSize-e,t),o=await b.read(s*a),r=g.slice(e*n.n8r,(e+a)*n.n8r),l=await c.multiExpAffine(o,r);y=c.add(y,l)}return await xa(b),o=await Eo(r,L,y,n.vk_delta_2,u.vk_delta_2),!0===o}(),!0!==o)return i&&i.error("H section does not match"),!1;i&&i.info(ui(l.csHash,"Circuit Hash: "));for(let t=l.contributions.length-1;t>=0;t--){const e=l.contributions[t];i&&i.info("-------------------------"),i&&i.info(ui(e.contributionHash,`contribution #${t+1} ${e.name?e.name:""}:`)),1==e.type&&(i&&i.info(`Beacon generator: ${Li(e.beaconHash)}`),i&&i.info(`Beacon iterations Exp: ${e.numIterationsExp}`))}return i&&i.info("-------------------------"),i&&i.info("ZKey Ok!"),!0;async function _(t,e){const a=2*r.G1.F.n8,i=t.byteLength/a,o=r.tm.concurrency,n=Math.floor(i/o),l=[];for(let a=0;a<o;a++){let r;if(r=a<o-1?n:i-a*n,0==r)continue;const s=t.slice(a*n*c,(a*n+r)*c),d=e.slice(a*n*c,(a*n+r)*c);l.push(p(s,d))}const s=await Promise.all(l),d=new Uint8Array(i*a);let u=0;for(let t=0;t<s.length;t++)d.set(s[t][0],u),u+=s[t][0].byteLength;return d}async function p(t,e){const a=2*r.G1.F.n8,i=3*r.G1.F.n8,o=t.byteLength/a,n=[];n.push({cmd:"ALLOCSET",var:0,buff:t}),n.push({cmd:"ALLOCSET",var:1,buff:e}),n.push({cmd:"ALLOC",var:2,len:o*i});for(let t=0;t<o;t++)n.push({cmd:"CALL",fnName:"g1m_subAffine",params:[{var:0,offset:t*a},{var:1,offset:t*a},{var:2,offset:t*i}]});n.push({cmd:"CALL",fnName:"g1m_batchToAffine",params:[{var:2},{val:o},{var:2}]}),n.push({cmd:"GET",out:0,var:2,len:o*a});return await r.tm.queueAction(n)}}const{stringifyBigInts:So}=Ze;async function Go(t){const e=await Ci(t,2);let a;if("groth16"==e.protocol)a=await async function(t,e,a){const i=await Oa(t.q),o=2*i.G1.F.n8,n=await i.pairing(t.vk_alpha_1,t.vk_beta_2);let r={protocol:t.protocol,curve:i.name,nPublic:t.nPublic,vk_alpha_1:i.G1.toObject(t.vk_alpha_1),vk_beta_2:i.G2.toObject(t.vk_beta_2),vk_gamma_2:i.G2.toObject(t.vk_gamma_2),vk_delta_2:i.G2.toObject(t.vk_delta_2),vk_alphabeta_12:i.Gt.toObject(n)};const c=await Fa(e,3,a);r.IC=[];for(let e=0;e<=t.nPublic;e++){const t=await c.read(o),e=i.G1.toObject(t);r.IC.push(e)}return await xa(c),r=So(r),r}(e,t,2);else{if("plonk"!=e.protocol)throw new Error("zkey file is not groth16");a=await async function(t){const e=await Oa(t.q);let a={protocol:t.protocol,curve:e.name,nPublic:t.nPublic,power:t.power,k1:e.Fr.toObject(t.k1),k2:e.Fr.toObject(t.k2),Qm:e.G1.toObject(t.Qm),Ql:e.G1.toObject(t.Ql),Qr:e.G1.toObject(t.Qr),Qo:e.G1.toObject(t.Qo),Qc:e.G1.toObject(t.Qc),S1:e.G1.toObject(t.S1),S2:e.G1.toObject(t.S2),S3:e.G1.toObject(t.S3),X_2:e.G2.toObject(t.X_2),w:e.Fr.toObject(e.Fr.w[t.power])};return a=So(a),a}(e)}return a}var Po={};var Oo=Object.freeze({__proto__:null,newZKey:xo,exportBellman:async function(t,e,a){const{fd:i,sections:o}=await fa(t,"zkey",2),n=await Ci(i,o);if("groth16"!=n.protocol)throw new Error("zkey file is not groth16");const r=await Oa(n.q),c=2*r.G1.F.n8,l=2*r.G2.F.n8,s=await xi(i,r,o),d=await da(e);let u;await L(n.vk_alpha_1),await L(n.vk_beta_1),await w(n.vk_beta_2),await w(n.vk_gamma_2),await L(n.vk_delta_1),await w(n.vk_delta_2),u=await ya(i,o,3),u=await r.G1.batchLEMtoU(u),await b("G1",u);const f=await ya(i,o,9);let g,_,p,h,m;g=await r.G1.fft(f,"affine","jacobian",a),g=await r.G1.batchApplyKey(g,r.Fr.neg(r.Fr.e(2)),r.Fr.w[n.power+1],"jacobian","affine",a),g=g.slice(0,g.byteLength-c),g=await r.G1.batchLEMtoU(g),await b("G1",g),_=await ya(i,o,8),_=await r.G1.batchLEMtoU(_),await b("G1",_),p=await ya(i,o,5),p=await r.G1.batchLEMtoU(p),await b("G1",p),h=await ya(i,o,6),h=await r.G1.batchLEMtoU(h),await b("G1",h),m=await ya(i,o,7),m=await r.G2.batchLEMtoU(m),await b("G2",m),await d.write(s.csHash),await async function(t){const e=new Uint8Array(4);new DataView(e.buffer,e.byteOffset,e.byteLength).setUint32(0,t,!1),await d.write(e)}(s.contributions.length);for(let t=0;t<s.contributions.length;t++){const e=s.contributions[t];await L(e.deltaAfter),await L(e.delta.g1_s),await L(e.delta.g1_sx),await w(e.delta.g2_spx),await d.write(e.transcript)}async function L(t){const e=new Uint8Array(c);r.G1.toRprUncompressed(e,0,t),await d.write(e)}async function w(t){const e=new Uint8Array(l);r.G2.toRprUncompressed(e,0,t),await d.write(e)}async function b(t,e){let a;a="G1"==t?c:l;const i=new Uint8Array(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,e.byteLength/a,!1),await d.write(i),await d.write(e)}await i.close(),await d.close()},importBellman:async function(t,e,a,i,o){const{fd:n,sections:r}=await fa(t,"zkey",2),c=await Ci(n,r);if("groth16"!=c.protocol)throw new Error("zkey file is not groth16");const l=await Oa(c.q),s=2*l.G1.F.n8,d=2*l.G2.F.n8,u=await xi(n,l,r),f={},g=await ua(e);g.pos=3*s+3*d+8+s*c.nVars+4+s*(c.domainSize-1)+4+s*c.nVars+4+s*c.nVars+4+d*c.nVars,f.csHash=await g.read(64);const _=await g.readUBE32();f.contributions=[];for(let t=0;t<_;t++){const e={delta:{}};e.deltaAfter=await A(g),e.delta.g1_s=await A(g),e.delta.g1_sx=await A(g),e.delta.g2_spx=await I(g),e.transcript=await g.read(64),t<u.contributions.length&&(e.type=u.contributions[t].type,1==e.type&&(e.beaconHash=u.contributions[t].beaconHash,e.numIterationsExp=u.contributions[t].numIterationsExp),u.contributions[t].name&&(e.name=u.contributions[t].name)),f.contributions.push(e)}if(!fi(f.csHash,u.csHash))return o&&o.error("Hash of the original circuit does not match with the MPC one"),!1;if(u.contributions.length>f.contributions.length)return o&&o.error("The impoerted file does not include new contributions"),!1;for(let t=0;t<u.contributions.length;t++)if(!C(u.contributions[t],f.contributions[t]))return o&&o.error(`Previos contribution ${t} does not match`),!1;if(i)for(let t=u.contributions.length;t<f.contributions.length;t++)f.contributions[t].name=i;const p=await ga(a,"zkey",1,10);if(g.pos=0,g.pos+=s,g.pos+=s,g.pos+=d,g.pos+=d,c.vk_delta_1=await A(g),c.vk_delta_2=await I(g),await wi(p,c),await g.readUBE32()!=c.nPublic+1)return o&&o.error("Invalid number of points in IC"),await p.discard(),!1;if(g.pos+=s*(c.nPublic+1),await ba(n,r,p,3),await ba(n,r,p,4),await g.readUBE32()!=c.domainSize-1)return o&&o.error("Invalid number of points in H"),await p.discard(),!1;let h;const m=await g.read(s*(c.domainSize-1)),L=await l.G1.batchUtoLEM(m);h=new Uint8Array(c.domainSize*s),h.set(L),l.G1.toRprLEM(h,s*(c.domainSize-1),l.G1.zeroAffine);const w=l.Fr.neg(l.Fr.inv(l.Fr.e(2))),b=l.Fr.inv(l.Fr.w[c.power+1]);if(h=await l.G1.batchApplyKey(h,w,b,"affine","jacobian",o),h=await l.G1.ifft(h,"jacobian","affine",o),await _a(p,9),await p.write(h),await pa(p),await g.readUBE32()!=c.nVars-c.nPublic-1)return o&&o.error("Invalid number of points in L"),await p.discard(),!1;let y;return y=await g.read(s*(c.nVars-c.nPublic-1)),y=await l.G1.batchUtoLEM(y),await _a(p,8),await p.write(y),await pa(p),await g.readUBE32()!=c.nVars?(o&&o.error("Invalid number of points in A"),await p.discard(),!1):(g.pos+=s*c.nVars,await ba(n,r,p,5),await g.readUBE32()!=c.nVars?(o&&o.error("Invalid number of points in B1"),await p.discard(),!1):(g.pos+=s*c.nVars,await ba(n,r,p,6),await g.readUBE32()!=c.nVars?(o&&o.error("Invalid number of points in B2"),await p.discard(),!1):(g.pos+=d*c.nVars,await ba(n,r,p,7),await Bi(p,l,f),await g.close(),await p.close(),await n.close(),!0)));async function A(t){const e=await t.read(2*l.G1.F.n8);return l.G1.fromRprUncompressed(e,0)}async function I(t){const e=await t.read(2*l.G2.F.n8);return l.G2.fromRprUncompressed(e,0)}function C(t,e){return!!l.G1.eq(t.deltaAfter,e.deltaAfter)&&(!!l.G1.eq(t.delta.g1_s,e.delta.g1_s)&&(!!l.G1.eq(t.delta.g1_sx,e.delta.g1_sx)&&(!!l.G2.eq(t.delta.g2_spx,e.delta.g2_spx)&&!!fi(t.transcript,e.transcript))))}},verifyFromR1cs:async function(t,e,a,i){const o="~"+a+".init";return await xo(t,e,o,i),await Bo(o,e,a,i)},verifyFromInit:Bo,contribute:async function(t,e,a,i,o){await ci.ready();const{fd:n,sections:r}=await fa(t,"zkey",2),c=await Ci(n,r);if("groth16"!=c.protocol)throw new Error("zkey file is not groth16");const l=await Oa(c.q),s=await xi(n,l,r),d=await ga(e,"zkey",1,10),u=await pi(i),f=ci(64);f.update(s.csHash);for(let t=0;t<s.contributions.length;t++)Gi(f,l,s.contributions[t]);const g={delta:{}};g.delta.prvKey=l.Fr.fromRng(u),g.delta.g1_s=l.G1.toAffine(l.G1.fromRng(u)),g.delta.g1_sx=l.G1.toAffine(l.G1.timesFr(g.delta.g1_s,g.delta.prvKey)),Si(f,l,g.delta.g1_s),Si(f,l,g.delta.g1_sx),g.transcript=f.digest(),g.delta.g2_sp=Ki(l,g.transcript),g.delta.g2_spx=l.G2.toAffine(l.G2.timesFr(g.delta.g2_sp,g.delta.prvKey)),c.vk_delta_1=l.G1.timesFr(c.vk_delta_1,g.delta.prvKey),c.vk_delta_2=l.G2.timesFr(c.vk_delta_2,g.delta.prvKey),g.deltaAfter=c.vk_delta_1,g.type=0,a&&(g.name=a),s.contributions.push(g),await wi(d,c),await ba(n,r,d,3),await ba(n,r,d,4),await ba(n,r,d,5),await ba(n,r,d,6),await ba(n,r,d,7);const _=l.Fr.inv(g.delta.prvKey);await co(n,r,d,8,l,"G1",_,l.Fr.e(1),"L Section",o),await co(n,r,d,9,l,"G1",_,l.Fr.e(1),"H Section",o),await Bi(d,l,s),await n.close(),await d.close();const p=ci(64);Gi(p,l,g);const h=p.digest();return o&&o.info(ui(s.csHash,"Circuit Hash: ")),o&&o.info(ui(h,"Contribution Hash: ")),h},beacon:async function(t,e,a,i,o,n){await ci.ready();const r=mi(i);if(0==r.byteLength||2*r.byteLength!=i.length)return n&&n.error("Invalid Beacon Hash. (It must be a valid hexadecimal sequence)"),!1;if(r.length>=256)return n&&n.error("Maximum lenght of beacon hash is 255 bytes"),!1;if((o=parseInt(o))<10||o>63)return n&&n.error("Invalid numIterationsExp. (Must be between 10 and 63)"),!1;const c=await Ci(t,2);if("groth16"!=c.protocol)throw new Error("zkey file is not groth16");const l=await Oa(c.q),s=await xi(t,2,l);await ga(e,"zkey",1,10);const d=await hi(r,o),u=ci(64);u.update(s.csHash);for(let t=0;t<s.contributions.length;t++)Gi(u,l,s.contributions[t]);const f={delta:{}};f.delta.prvKey=l.Fr.fromRng(d),f.delta.g1_s=l.G1.toAffine(l.G1.fromRng(d)),f.delta.g1_sx=l.G1.toAffine(l.G1.timesFr(f.delta.g1_s,f.delta.prvKey)),Si(u,l,f.delta.g1_s),Si(u,l,f.delta.g1_sx),f.transcript=u.digest(),f.delta.g2_sp=Ki(l,f.transcript),f.delta.g2_spx=l.G2.toAffine(l.G2.timesFr(f.delta.g2_sp,f.delta.prvKey)),c.vk_delta_1=l.G1.timesFr(c.vk_delta_1,f.delta.prvKey),c.vk_delta_2=l.G2.timesFr(c.vk_delta_2,f.delta.prvKey),f.deltaAfter=c.vk_delta_1,f.type=1,f.numIterationsExp=o,f.beaconHash=r,a&&(f.name=a),s.contributions.push(f),await wi(e,c),await Ba(t,e,3),await Ba(t,e,4),await Ba(t,e,5),await Ba(t,e,6),await Ba(t,e,7);const g=l.Fr.inv(f.delta.prvKey);await co(t,2,e,8,l,"G1",g,l.Fr.e(1),"L Section",n),await co(t,2,e,9,l,"G1",g,l.Fr.e(1),"H Section",n),await Bi(e,l,s);const _=ci(64);Gi(_,l,f);const p=_.digest();return n&&n.info(ui(p,"Contribution Hash: ")),p},exportJson:async function(t){return await vi(0,!0)},bellmanContribute:async function(t,e,a,i,o){await ci.ready();const n=await pi(i),r=t.Fr.fromRng(n),c=t.Fr.inv(r),l=2*t.G1.F.n8,s=2*t.G2.F.n8,d=await ua(e),u=await da(a);await E(l),await E(l),await E(s),await E(s);const f=await B(),g=t.G1.timesFr(f,r);await G(g);const _=await S(),p=t.G2.timesFr(_,r);await P(p);const h=await d.readUBE32();await u.writeUBE32(h),await E(h*l);const m=await d.readUBE32();await u.writeUBE32(m),await lo(d,u,null,t,"G1",m,c,t.Fr.e(1),"UNCOMPRESSED","H",o);const L=await d.readUBE32();await u.writeUBE32(L),await lo(d,u,null,t,"G1",L,c,t.Fr.e(1),"UNCOMPRESSED","L",o);const w=await d.readUBE32();await u.writeUBE32(w),await E(w*l);const b=await d.readUBE32();await u.writeUBE32(b),await E(b*l);const y=await d.readUBE32();await u.writeUBE32(y),await E(y*s);const A=ci(64),I={};I.csHash=await d.read(64),A.update(I.csHash);const C=await d.readUBE32();I.contributions=[];for(let e=0;e<C;e++){const e={delta:{}};e.deltaAfter=await B(),e.delta.g1_s=await B(),e.delta.g1_sx=await B(),e.delta.g2_spx=await S(),e.transcript=await d.read(64),I.contributions.push(e),Gi(A,t,e)}const v={delta:{}};v.delta.prvKey=r,v.delta.g1_s=t.G1.toAffine(t.G1.fromRng(n)),v.delta.g1_sx=t.G1.toAffine(t.G1.timesFr(v.delta.g1_s,r)),Si(A,t,v.delta.g1_s),Si(A,t,v.delta.g1_sx),v.transcript=A.digest(),v.delta.g2_sp=Ki(t,v.transcript),v.delta.g2_spx=t.G2.toAffine(t.G2.timesFr(v.delta.g2_sp,r)),v.deltaAfter=g,v.type=0,I.contributions.push(v),await u.write(I.csHash),await u.writeUBE32(I.contributions.length);for(let t=0;t<I.contributions.length;t++){const e=I.contributions[t];await G(e.deltaAfter),await G(e.delta.g1_s),await G(e.delta.g1_sx),await P(e.delta.g2_spx),await u.write(e.transcript)}const F=ci(64);Gi(F,t,v);const x=F.digest();return o&&o.info(ui(x,"Contribution Hash: ")),await u.close(),await d.close(),x;async function E(t){const e=2*d.pageSize;for(let a=0;a<t;a+=e){const i=Math.min(t-a,e),o=await d.read(i);await u.write(o)}}async function B(){const e=await d.read(2*t.G1.F.n8);return t.G1.fromRprUncompressed(e,0)}async function S(){const e=await d.read(2*t.G2.F.n8);return t.G2.fromRprUncompressed(e,0)}async function G(e){const a=new Uint8Array(l);t.G1.toRprUncompressed(a,0,e),await u.write(a)}async function P(e){const a=new Uint8Array(s);t.G2.toRprUncompressed(a,0,e),await u.write(a)}},exportVerificationKey:Go,exportSolidityVerifier:async function(t,e,a){const i=await Go(t);let o=e[i.protocol];return Po.render(o,i)}});
/**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */
var Uo=d((function(t){!function(){var e="input is invalid type",a="object"==typeof window,i=a?window:{};i.JS_SHA3_NO_WINDOW&&(a=!1);var o=!a&&"object"==typeof self;!i.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?i=s:o&&(i=self);var n=!i.JS_SHA3_NO_COMMON_JS&&t.exports,r=!i.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),l=[4,1024,262144,67108864],d=[0,8,16,24],u=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],f=[224,256,384,512],g=[128,256],_=["hex","buffer","arrayBuffer","array","digest"],p={128:168,256:136};!i.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!r||!i.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var h=function(t,e,a){return function(i){return new G(t,e,t).update(i)[a]()}},m=function(t,e,a){return function(i,o){return new G(t,e,o).update(i)[a]()}},L=function(t,e,a){return function(e,i,o,n){return I["cshake"+t].update(e,i,o,n)[a]()}},w=function(t,e,a){return function(e,i,o,n){return I["kmac"+t].update(e,i,o,n)[a]()}},b=function(t,e,a,i){for(var o=0;o<_.length;++o){var n=_[o];t[n]=e(a,i,n)}return t},y=function(t,e){var a=h(t,e,"hex");return a.create=function(){return new G(t,e,t)},a.update=function(t){return a.create().update(t)},b(a,h,t,e)},A=[{name:"keccak",padding:[1,256,65536,16777216],bits:f,createMethod:y},{name:"sha3",padding:[6,1536,393216,100663296],bits:f,createMethod:y},{name:"shake",padding:[31,7936,2031616,520093696],bits:g,createMethod:function(t,e){var a=m(t,e,"hex");return a.create=function(a){return new G(t,e,a)},a.update=function(t,e){return a.create(e).update(t)},b(a,m,t,e)}},{name:"cshake",padding:l,bits:g,createMethod:function(t,e){var a=p[t],i=L(t,0,"hex");return i.create=function(i,o,n){return o||n?new G(t,e,i).bytepad([o,n],a):I["shake"+t].create(i)},i.update=function(t,e,a,o){return i.create(e,a,o).update(t)},b(i,L,t,e)}},{name:"kmac",padding:l,bits:g,createMethod:function(t,e){var a=p[t],i=w(t,0,"hex");return i.create=function(i,o,n){return new P(t,e,o).bytepad(["KMAC",n],a).bytepad([i],a)},i.update=function(t,e,a,o){return i.create(t,a,o).update(e)},b(i,w,t,e)}}],I={},C=[],v=0;v<A.length;++v)for(var F=A[v],x=F.bits,E=0;E<x.length;++E){var B=F.name+"_"+x[E];if(C.push(B),I[B]=F.createMethod(x[E],F.padding),"sha3"!==F.name){var S=F.name+x[E];C.push(S),I[S]=I[B]}}function G(t,e,a){this.blocks=[],this.s=[],this.padding=e,this.outputBits=a,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=a>>5,this.extraBytes=(31&a)>>3;for(var i=0;i<50;++i)this.s[i]=0}function P(t,e,a){G.call(this,t,e,a)}G.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var a,i=typeof t;if("string"!==i){if("object"!==i)throw new Error(e);if(null===t)throw new Error(e);if(r&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||r&&ArrayBuffer.isView(t)))throw new Error(e);a=!0}for(var o,n,c=this.blocks,l=this.byteCount,s=t.length,u=this.blockCount,f=0,g=this.s;f<s;){if(this.reset)for(this.reset=!1,c[0]=this.block,o=1;o<u+1;++o)c[o]=0;if(a)for(o=this.start;f<s&&o<l;++f)c[o>>2]|=t[f]<<d[3&o++];else for(o=this.start;f<s&&o<l;++f)(n=t.charCodeAt(f))<128?c[o>>2]|=n<<d[3&o++]:n<2048?(c[o>>2]|=(192|n>>6)<<d[3&o++],c[o>>2]|=(128|63&n)<<d[3&o++]):n<55296||n>=57344?(c[o>>2]|=(224|n>>12)<<d[3&o++],c[o>>2]|=(128|n>>6&63)<<d[3&o++],c[o>>2]|=(128|63&n)<<d[3&o++]):(n=65536+((1023&n)<<10|1023&t.charCodeAt(++f)),c[o>>2]|=(240|n>>18)<<d[3&o++],c[o>>2]|=(128|n>>12&63)<<d[3&o++],c[o>>2]|=(128|n>>6&63)<<d[3&o++],c[o>>2]|=(128|63&n)<<d[3&o++]);if(this.lastByteIndex=o,o>=l){for(this.start=o-l,this.block=c[u],o=0;o<u;++o)g[o]^=c[o];O(g),this.reset=!0}else this.start=o}return this},G.prototype.encode=function(t,e){var a=255&t,i=1,o=[a];for(a=255&(t>>=8);a>0;)o.unshift(a),a=255&(t>>=8),++i;return e?o.push(i):o.unshift(i),this.update(o),o.length},G.prototype.encodeString=function(t){var a,i=typeof t;if("string"!==i){if("object"!==i)throw new Error(e);if(null===t)throw new Error(e);if(r&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||r&&ArrayBuffer.isView(t)))throw new Error(e);a=!0}var o=0,n=t.length;if(a)o=n;else for(var c=0;c<t.length;++c){var l=t.charCodeAt(c);l<128?o+=1:l<2048?o+=2:l<55296||l>=57344?o+=3:(l=65536+((1023&l)<<10|1023&t.charCodeAt(++c)),o+=4)}return o+=this.encode(8*o),this.update(t),o},G.prototype.bytepad=function(t,e){for(var a=this.encode(e),i=0;i<t.length;++i)a+=this.encodeString(t[i]);var o=e-a%e,n=[];return n.length=o,this.update(n),this},G.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,a=this.blockCount,i=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[a],e=1;e<a+1;++e)t[e]=0;for(t[a-1]|=2147483648,e=0;e<a;++e)i[e]^=t[e];O(i)}},G.prototype.toString=G.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,a=this.s,i=this.outputBlocks,o=this.extraBytes,n=0,r=0,l="";r<i;){for(n=0;n<e&&r<i;++n,++r)t=a[n],l+=c[t>>4&15]+c[15&t]+c[t>>12&15]+c[t>>8&15]+c[t>>20&15]+c[t>>16&15]+c[t>>28&15]+c[t>>24&15];r%e==0&&(O(a),n=0)}return o&&(t=a[n],l+=c[t>>4&15]+c[15&t],o>1&&(l+=c[t>>12&15]+c[t>>8&15]),o>2&&(l+=c[t>>20&15]+c[t>>16&15])),l},G.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,a=this.s,i=this.outputBlocks,o=this.extraBytes,n=0,r=0,c=this.outputBits>>3;t=o?new ArrayBuffer(i+1<<2):new ArrayBuffer(c);for(var l=new Uint32Array(t);r<i;){for(n=0;n<e&&r<i;++n,++r)l[r]=a[n];r%e==0&&O(a)}return o&&(l[n]=a[n],t=t.slice(0,c)),t},G.prototype.buffer=G.prototype.arrayBuffer,G.prototype.digest=G.prototype.array=function(){this.finalize();for(var t,e,a=this.blockCount,i=this.s,o=this.outputBlocks,n=this.extraBytes,r=0,c=0,l=[];c<o;){for(r=0;r<a&&c<o;++r,++c)t=c<<2,e=i[r],l[t]=255&e,l[t+1]=e>>8&255,l[t+2]=e>>16&255,l[t+3]=e>>24&255;c%a==0&&O(i)}return n&&(t=c<<2,e=i[r],l[t]=255&e,n>1&&(l[t+1]=e>>8&255),n>2&&(l[t+2]=e>>16&255)),l},P.prototype=new G,P.prototype.finalize=function(){return this.encode(this.outputBits,!0),G.prototype.finalize.call(this)};var O=function(t){var e,a,i,o,n,r,c,l,s,d,f,g,_,p,h,m,L,w,b,y,A,I,C,v,F,x,E,B,S,G,P,O,U,z,q,Q,M,k,R,N,T,D,j,K,V,H,$,Z,J,Y,W,X,tt,et,at,it,ot,nt,rt,ct,lt,st,dt;for(i=0;i<48;i+=2)o=t[0]^t[10]^t[20]^t[30]^t[40],n=t[1]^t[11]^t[21]^t[31]^t[41],r=t[2]^t[12]^t[22]^t[32]^t[42],c=t[3]^t[13]^t[23]^t[33]^t[43],l=t[4]^t[14]^t[24]^t[34]^t[44],s=t[5]^t[15]^t[25]^t[35]^t[45],d=t[6]^t[16]^t[26]^t[36]^t[46],f=t[7]^t[17]^t[27]^t[37]^t[47],e=(g=t[8]^t[18]^t[28]^t[38]^t[48])^(r<<1|c>>>31),a=(_=t[9]^t[19]^t[29]^t[39]^t[49])^(c<<1|r>>>31),t[0]^=e,t[1]^=a,t[10]^=e,t[11]^=a,t[20]^=e,t[21]^=a,t[30]^=e,t[31]^=a,t[40]^=e,t[41]^=a,e=o^(l<<1|s>>>31),a=n^(s<<1|l>>>31),t[2]^=e,t[3]^=a,t[12]^=e,t[13]^=a,t[22]^=e,t[23]^=a,t[32]^=e,t[33]^=a,t[42]^=e,t[43]^=a,e=r^(d<<1|f>>>31),a=c^(f<<1|d>>>31),t[4]^=e,t[5]^=a,t[14]^=e,t[15]^=a,t[24]^=e,t[25]^=a,t[34]^=e,t[35]^=a,t[44]^=e,t[45]^=a,e=l^(g<<1|_>>>31),a=s^(_<<1|g>>>31),t[6]^=e,t[7]^=a,t[16]^=e,t[17]^=a,t[26]^=e,t[27]^=a,t[36]^=e,t[37]^=a,t[46]^=e,t[47]^=a,e=d^(o<<1|n>>>31),a=f^(n<<1|o>>>31),t[8]^=e,t[9]^=a,t[18]^=e,t[19]^=a,t[28]^=e,t[29]^=a,t[38]^=e,t[39]^=a,t[48]^=e,t[49]^=a,p=t[0],h=t[1],H=t[11]<<4|t[10]>>>28,$=t[10]<<4|t[11]>>>28,B=t[20]<<3|t[21]>>>29,S=t[21]<<3|t[20]>>>29,ct=t[31]<<9|t[30]>>>23,lt=t[30]<<9|t[31]>>>23,D=t[40]<<18|t[41]>>>14,j=t[41]<<18|t[40]>>>14,z=t[2]<<1|t[3]>>>31,q=t[3]<<1|t[2]>>>31,m=t[13]<<12|t[12]>>>20,L=t[12]<<12|t[13]>>>20,Z=t[22]<<10|t[23]>>>22,J=t[23]<<10|t[22]>>>22,G=t[33]<<13|t[32]>>>19,P=t[32]<<13|t[33]>>>19,st=t[42]<<2|t[43]>>>30,dt=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,at=t[4]<<30|t[5]>>>2,Q=t[14]<<6|t[15]>>>26,M=t[15]<<6|t[14]>>>26,w=t[25]<<11|t[24]>>>21,b=t[24]<<11|t[25]>>>21,Y=t[34]<<15|t[35]>>>17,W=t[35]<<15|t[34]>>>17,O=t[45]<<29|t[44]>>>3,U=t[44]<<29|t[45]>>>3,v=t[6]<<28|t[7]>>>4,F=t[7]<<28|t[6]>>>4,it=t[17]<<23|t[16]>>>9,ot=t[16]<<23|t[17]>>>9,k=t[26]<<25|t[27]>>>7,R=t[27]<<25|t[26]>>>7,y=t[36]<<21|t[37]>>>11,A=t[37]<<21|t[36]>>>11,X=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,K=t[8]<<27|t[9]>>>5,V=t[9]<<27|t[8]>>>5,x=t[18]<<20|t[19]>>>12,E=t[19]<<20|t[18]>>>12,nt=t[29]<<7|t[28]>>>25,rt=t[28]<<7|t[29]>>>25,N=t[38]<<8|t[39]>>>24,T=t[39]<<8|t[38]>>>24,I=t[48]<<14|t[49]>>>18,C=t[49]<<14|t[48]>>>18,t[0]=p^~m&w,t[1]=h^~L&b,t[10]=v^~x&B,t[11]=F^~E&S,t[20]=z^~Q&k,t[21]=q^~M&R,t[30]=K^~H&Z,t[31]=V^~$&J,t[40]=et^~it&nt,t[41]=at^~ot&rt,t[2]=m^~w&y,t[3]=L^~b&A,t[12]=x^~B&G,t[13]=E^~S&P,t[22]=Q^~k&N,t[23]=M^~R&T,t[32]=H^~Z&Y,t[33]=$^~J&W,t[42]=it^~nt&ct,t[43]=ot^~rt&lt,t[4]=w^~y&I,t[5]=b^~A&C,t[14]=B^~G&O,t[15]=S^~P&U,t[24]=k^~N&D,t[25]=R^~T&j,t[34]=Z^~Y&X,t[35]=J^~W&tt,t[44]=nt^~ct&st,t[45]=rt^~lt&dt,t[6]=y^~I&p,t[7]=A^~C&h,t[16]=G^~O&v,t[17]=P^~U&F,t[26]=N^~D&z,t[27]=T^~j&q,t[36]=Y^~X&K,t[37]=W^~tt&V,t[46]=ct^~st&et,t[47]=lt^~dt&at,t[8]=I^~p&m,t[9]=C^~h&L,t[18]=O^~v&x,t[19]=U^~F&E,t[28]=D^~z&Q,t[29]=j^~q&M,t[38]=X^~K&H,t[39]=tt^~V&$,t[48]=st^~et&it,t[49]=dt^~at&ot,t[0]^=u[i],t[1]^=u[i+1]};if(n)t.exports=I;else for(v=0;v<C.length;++v)i[C[v]]=I[C[v]]}()}));const{stringifyBigInts:zo}=Ze,{keccak256:qo}=Uo;async function Qo(t,e,a){const{fd:i,sections:o}=await fa(e,"wtns",2),n=await Pi(i,o),{fd:r,sections:c}=await fa(t,"zkey",2),l=await Ci(r,c);if("plonk"!=l.protocol)throw new Error("zkey file is not groth16");if(!$e.eq(l.r,n.q))throw new Error("Curve of the witness does not match the curve of the proving key");if(n.nWitness!=l.nVars-l.nAdditions)throw new Error(`Invalid witness length. Circuit: ${l.nVars}, witness: ${n.nWitness}, ${l.nAdditions}`);const s=await Oa(l.q),d=s.Fr,u=s.G1,f=s.Fr.n8;a&&a.debug("Reading Wtns");const g=await ya(i,o,2);g.set(d.zero,0);const _=new _e(f*l.nAdditions);let p,h,m,L,w,b,y,A,I,C,v,F,x,E;await async function(){const t=await ya(r,c,3),e=8+2*s.Fr.n8;for(let a=0;a<l.nAdditions;a++){const i=Q(t,a*e),o=Q(t,a*e+4),n=t.slice(a*e+8,a*e+8+f),r=t.slice(a*e+8+f,a*e+8+2*f),c=M(i),l=M(o),d=s.Fr.add(s.Fr.mul(n,c),s.Fr.mul(r,l));_.set(d,f*a)}}();let B={};const S=new _e(l.domainSize*f*4*3);let G=c[12][0].p+l.domainSize*f;await r.readToBuffer(S,0,l.domainSize*f*4,G),G+=l.domainSize*f*5,await r.readToBuffer(S,l.domainSize*f*4,l.domainSize*f*4,G),G+=l.domainSize*f*5,await r.readToBuffer(S,l.domainSize*f*8,l.domainSize*f*4,G);const P=new _e(l.domainSize*f);await r.readToBuffer(P,0,l.domainSize*f,c[12][0].p);const O=new _e(l.domainSize*f);await r.readToBuffer(O,0,l.domainSize*f,c[12][0].p+5*l.domainSize*f);const U=await ya(r,c,14),z={};await async function(){z.b=[];for(let t=1;t<=9;t++)z.b[t]=s.Fr.random();[p,h,m]=await async function(){let t=new _e(l.domainSize*f),e=new _e(l.domainSize*f),a=new _e(l.domainSize*f);const i=await ya(r,c,4),o=await ya(r,c,5),n=await ya(r,c,6);for(let r=0;r<l.nConstrains;r++){const c=Q(i,4*r);t.set(M(c),r*f);const l=Q(o,4*r);e.set(M(l),r*f);const s=Q(n,4*r);a.set(M(s),r*f)}return t=await d.batchToMontgomery(t),e=await d.batchToMontgomery(e),a=await d.batchToMontgomery(a),[t,e,a]}(),[I,w]=await D(p,[z.b[2],z.b[1]]),[C,b]=await D(h,[z.b[4],z.b[3]]),[v,y]=await D(m,[z.b[6],z.b[5]]),B.A=await T(I,"multiexp A"),B.B=await T(C,"multiexp B"),B.C=await T(v,"multiexp C")}(),await async function(){const t=new Uint8Array(2*u.F.n8*3);u.toRprUncompressed(t,0,B.A),u.toRprUncompressed(t,2*u.F.n8,B.B),u.toRprUncompressed(t,4*u.F.n8,B.C),z.beta=k(t),a&&a.debug("beta: "+d.toString(z.beta));const e=new Uint8Array(f);d.toRprBE(e,0,z.beta),z.gamma=k(e),a&&a.debug("gamma: "+d.toString(z.gamma));let i=new _e(d.n8*l.domainSize),o=new _e(d.n8*l.domainSize);i.set(d.one,0),o.set(d.one,0);let n=d.one;for(let t=0;t<l.domainSize;t++){let e=p.slice(t*f,(t+1)*f);e=d.add(e,d.mul(z.beta,n)),e=d.add(e,z.gamma);let a=h.slice(t*f,(t+1)*f);a=d.add(a,d.mul(l.k1,d.mul(z.beta,n))),a=d.add(a,z.gamma);let r=m.slice(t*f,(t+1)*f);r=d.add(r,d.mul(l.k2,d.mul(z.beta,n))),r=d.add(r,z.gamma);const c=d.mul(e,d.mul(a,r));let s=p.slice(t*f,(t+1)*f);s=d.add(s,d.mul(S.slice(t*f*4,t*f*4+f),z.beta)),s=d.add(s,z.gamma);let u=h.slice(t*f,(t+1)*f);u=d.add(u,d.mul(S.slice(4*(l.domainSize+t)*f,4*(l.domainSize+t)*f+f),z.beta)),u=d.add(u,z.gamma);let g=m.slice(t*f,(t+1)*f);g=d.add(g,d.mul(S.slice(4*(2*l.domainSize+t)*f,4*(2*l.domainSize+t)*f+f),z.beta)),g=d.add(g,z.gamma);const _=d.mul(s,d.mul(u,g));i.set(d.mul(i.slice(t*f,(t+1)*f),c),(t+1)%l.domainSize*f),o.set(d.mul(o.slice(t*f,(t+1)*f),_),(t+1)%l.domainSize*f),n=d.mul(n,d.w[l.power])}o=await d.batchInverse(o);for(let t=0;t<l.domainSize;t++)i.set(d.mul(i.slice(t*f,(t+1)*f),o.slice(t*f,(t+1)*f)),t*f);if(!d.eq(i.slice(0,f),d.one))throw new Error("Copy constraints does not match");L=i,[F,A]=await D(L,[z.b[9],z.b[8],z.b[7]]),B.Z=await T(F,"multiexp Z")}(),await async function(){a&&a.debug("phse3: Reading QM4");const t=new _e(4*l.domainSize*f);await r.readToBuffer(t,0,l.domainSize*f*4,c[7][0].p+l.domainSize*f),a&&a.debug("phse3: Reading QL4");const e=new _e(4*l.domainSize*f);await r.readToBuffer(e,0,l.domainSize*f*4,c[8][0].p+l.domainSize*f),a&&a.debug("phse3: Reading QR4");const i=new _e(4*l.domainSize*f);await r.readToBuffer(i,0,l.domainSize*f*4,c[9][0].p+l.domainSize*f),a&&a.debug("phse3: Reading QO4");const o=new _e(4*l.domainSize*f);await r.readToBuffer(o,0,l.domainSize*f*4,c[10][0].p+l.domainSize*f),a&&a.debug("phse3: Reading QC4");const n=new _e(4*l.domainSize*f);await r.readToBuffer(n,0,l.domainSize*f*4,c[11][0].p+l.domainSize*f);const s=await ya(r,c,13),g=new Uint8Array(2*u.F.n8);u.toRprUncompressed(g,0,B.Z),z.alpha=k(g),a&&a.debug("alpha: "+d.toString(z.alpha));const _=[d.zero,d.add(d.e(-1),d.w[2]),d.e(-2),d.sub(d.e(-1),d.w[2])],h=[d.zero,d.add(d.zero,d.mul(d.e(-2),d.w[2])),d.e(4),d.sub(d.zero,d.mul(d.e(-2),d.w[2]))],m=[d.zero,d.add(d.e(2),d.mul(d.e(2),d.w[2])),d.e(-8),d.sub(d.e(2),d.mul(d.e(2),d.w[2]))],L=new _e(4*l.domainSize*f),I=new _e(4*l.domainSize*f);let C=d.one;for(let r=0;r<4*l.domainSize;r++){r%4096==0&&a&&a.debug(`calculating t ${r}/${4*l.domainSize}`);const c=w.slice(r*f,r*f+f),u=b.slice(r*f,r*f+f),g=y.slice(r*f,r*f+f),_=A.slice(r*f,r*f+f),h=A.slice((r+4*l.domainSize+4)%(4*l.domainSize)*f,(r+4*l.domainSize+4)%(4*l.domainSize)*f+f),m=t.slice(r*f,r*f+f),v=e.slice(r*f,r*f+f),F=i.slice(r*f,r*f+f),x=o.slice(r*f,r*f+f),B=n.slice(r*f,r*f+f),P=S.slice(r*f,r*f+f),O=S.slice((r+4*l.domainSize)*f,(r+4*l.domainSize)*f+f),U=S.slice((r+8*l.domainSize)*f,(r+8*l.domainSize)*f+f),q=d.add(z.b[2],d.mul(z.b[1],C)),Q=d.add(z.b[4],d.mul(z.b[3],C)),M=d.add(z.b[6],d.mul(z.b[5],C)),k=d.square(C),R=d.add(d.add(d.mul(z.b[7],k),d.mul(z.b[8],C)),z.b[9]),N=d.mul(C,d.w[l.power]),T=d.square(N),D=d.add(d.add(d.mul(z.b[7],T),d.mul(z.b[8],N)),z.b[9]);let j=d.zero;for(let t=0;t<l.nPublic;t++)j=d.sub(j,d.mul(s.slice((5*t*l.domainSize+l.domainSize+r)*f,(5*t*l.domainSize+l.domainSize+r+1)*f),p.slice(t*f,(t+1)*f)));let[K,V]=E(c,u,q,Q,r%4);K=d.mul(K,m),V=d.mul(V,m),K=d.add(K,d.mul(c,v)),V=d.add(V,d.mul(q,v)),K=d.add(K,d.mul(u,F)),V=d.add(V,d.mul(Q,F)),K=d.add(K,d.mul(g,x)),V=d.add(V,d.mul(M,x)),K=d.add(K,j),K=d.add(K,B);const H=d.mul(z.beta,C);let $=c;$=d.add($,H),$=d.add($,z.gamma);let Z=u;Z=d.add(Z,d.mul(H,l.k1)),Z=d.add(Z,z.gamma);let J=g;J=d.add(J,d.mul(H,l.k2)),J=d.add(J,z.gamma);let Y=_,[W,X]=G($,Z,J,Y,q,Q,M,R,r%4);W=d.mul(W,z.alpha),X=d.mul(X,z.alpha);let tt=c;tt=d.add(tt,d.mul(z.beta,P)),tt=d.add(tt,z.gamma);let et=u;et=d.add(et,d.mul(z.beta,O)),et=d.add(et,z.gamma);let at=g;at=d.add(at,d.mul(z.beta,U)),at=d.add(at,z.gamma);let it=h,[ot,nt]=G(tt,et,at,it,q,Q,M,D,r%4);ot=d.mul(ot,z.alpha),nt=d.mul(nt,z.alpha);let rt=d.sub(_,d.one);rt=d.mul(rt,s.slice((l.domainSize+r)*f,(l.domainSize+r+1)*f)),rt=d.mul(rt,d.mul(z.alpha,z.alpha));let ct=d.mul(R,s.slice((l.domainSize+r)*f,(l.domainSize+r+1)*f));ct=d.mul(ct,d.mul(z.alpha,z.alpha));let lt=d.add(d.sub(d.add(K,W),ot),rt),st=d.add(d.sub(d.add(V,X),nt),ct);L.set(lt,r*f),I.set(st,r*f),C=d.mul(C,d.w[l.power+2])}a&&a.debug("ifft T");let v=await d.ifft(L);a&&a.debug("dividing T/Z");for(let t=0;t<l.domainSize;t++)v.set(d.neg(v.slice(t*f,t*f+f)),t*f);for(let t=l.domainSize;t<4*l.domainSize;t++){const e=d.sub(v.slice((t-l.domainSize)*f,(t-l.domainSize)*f+f),v.slice(t*f,t*f+f));if(v.set(e,t*f),t>3*l.domainSize-4&&!d.isZero(e))throw new Error("T Polynomial is not divisible")}a&&a.debug("ifft Tz");const F=await d.ifft(I);for(let t=0;t<4*l.domainSize;t++){const e=F.slice(t*f,(t+1)*f);if(t>3*l.domainSize+5){if(!d.isZero(e))throw new Error("Tz Polynomial is not well calculated")}else v.set(d.add(v.slice(t*f,(t+1)*f),e),t*f)}function E(t,e,a,i,o){let n,r;const c=d.mul(t,e),l=d.mul(t,i),s=d.mul(a,e);n=c;let u=d.mul(a,i);return r=d.add(l,s),o&&(r=d.add(r,d.mul(_[o],u))),[n,r]}function G(t,e,a,i,o,n,r,c,l){let s,u;const f=d.mul(t,e),g=d.mul(t,n),p=d.mul(o,e),L=d.mul(o,n),w=d.mul(a,i),b=d.mul(a,c),y=d.mul(r,i),A=d.mul(r,c);s=d.mul(f,w);let I=d.mul(p,w);I=d.add(I,d.mul(g,w)),I=d.add(I,d.mul(f,y)),I=d.add(I,d.mul(f,b));let C=d.mul(L,w);C=d.add(C,d.mul(p,y)),C=d.add(C,d.mul(p,b)),C=d.add(C,d.mul(g,y)),C=d.add(C,d.mul(g,b)),C=d.add(C,d.mul(f,A));let v=d.mul(g,A);v=d.add(v,d.mul(p,A)),v=d.add(v,d.mul(L,b)),v=d.add(v,d.mul(L,y));let F=d.mul(L,A);return u=I,l&&(u=d.add(u,d.mul(_[l],C)),u=d.add(u,d.mul(h[l],v)),u=d.add(u,d.mul(m[l],F))),[s,u]}x=v.slice(0,(3*l.domainSize+6)*f),B.T1=await T(v.slice(0,l.domainSize*f),"multiexp T1"),B.T2=await T(v.slice(l.domainSize*f,2*l.domainSize*f),"multiexp T2"),B.T3=await T(v.slice(2*l.domainSize*f,(3*l.domainSize+6)*f),"multiexp T3")}(),await async function(){const t=new _e(l.domainSize*f);await r.readToBuffer(t,0,l.domainSize*f,c[7][0].p);const e=new _e(l.domainSize*f);await r.readToBuffer(e,0,l.domainSize*f,c[8][0].p);const i=new _e(l.domainSize*f);await r.readToBuffer(i,0,l.domainSize*f,c[9][0].p);const o=new _e(l.domainSize*f);await r.readToBuffer(o,0,l.domainSize*f,c[10][0].p);const n=new _e(l.domainSize*f);await r.readToBuffer(n,0,l.domainSize*f,c[11][0].p);const s=new _e(l.domainSize*f);await r.readToBuffer(s,0,l.domainSize*f,c[12][0].p+10*l.domainSize*f);const g=new Uint8Array(2*u.F.n8*3);u.toRprUncompressed(g,0,B.T1),u.toRprUncompressed(g,2*u.F.n8,B.T2),u.toRprUncompressed(g,4*u.F.n8,B.T3),z.xi=k(g),a&&a.debug("xi: "+d.toString(z.xi));B.eval_a=R(I,z.xi),B.eval_b=R(C,z.xi),B.eval_c=R(v,z.xi),B.eval_s1=R(P,z.xi),B.eval_s2=R(O,z.xi),B.eval_t=R(x,z.xi),B.eval_zw=R(F,d.mul(z.xi,d.w[l.power]));const _=d.mul(B.eval_a,B.eval_b);let p=B.eval_a;const h=d.mul(z.beta,z.xi);p=d.add(p,h),p=d.add(p,z.gamma);let m=B.eval_b;m=d.add(m,d.mul(h,l.k1)),m=d.add(m,z.gamma);let L=B.eval_c;L=d.add(L,d.mul(h,l.k2)),L=d.add(L,z.gamma);const w=d.mul(d.mul(d.mul(p,m),L),z.alpha);let b=B.eval_a;b=d.add(b,d.mul(z.beta,B.eval_s1)),b=d.add(b,z.gamma);let y=B.eval_b;y=d.add(y,d.mul(z.beta,B.eval_s2)),y=d.add(y,z.gamma);let A=d.mul(b,y);A=d.mul(A,z.beta),A=d.mul(A,B.eval_zw),A=d.mul(A,z.alpha),z.xim=z.xi;for(let t=0;t<l.power;t++)z.xim=d.mul(z.xim,z.xim);const S=d.div(d.sub(z.xim,d.one),d.mul(d.sub(z.xi,d.one),d.e(l.domainSize))),G=d.mul(S,d.mul(z.alpha,z.alpha)),U=A,q=d.add(w,G);E=new _e((l.domainSize+3)*f);for(let a=0;a<l.domainSize+3;a++){let r=d.mul(q,F.slice(a*f,(a+1)*f));a<l.domainSize&&(r=d.add(r,d.mul(_,t.slice(a*f,(a+1)*f))),r=d.add(r,d.mul(B.eval_a,e.slice(a*f,(a+1)*f))),r=d.add(r,d.mul(B.eval_b,i.slice(a*f,(a+1)*f))),r=d.add(r,d.mul(B.eval_c,o.slice(a*f,(a+1)*f))),r=d.add(r,n.slice(a*f,(a+1)*f)),r=d.sub(r,d.mul(U,s.slice(a*f,(a+1)*f)))),E.set(r,a*f)}B.eval_r=R(E,z.xi)}(),await async function(){const t=new Uint8Array(7*f);d.toRprBE(t,0,B.eval_a),d.toRprBE(t,f,B.eval_b),d.toRprBE(t,2*f,B.eval_c),d.toRprBE(t,3*f,B.eval_s1),d.toRprBE(t,4*f,B.eval_s2),d.toRprBE(t,5*f,B.eval_zw),d.toRprBE(t,6*f,B.eval_r),z.v=[],z.v[1]=k(t),a&&a.debug("v: "+d.toString(z.v[1]));for(let t=2;t<=6;t++)z.v[t]=d.mul(z.v[t-1],z.v[1]);let e=new _e((l.domainSize+6)*f);const i=d.mul(z.xim,z.xim);for(let t=0;t<l.domainSize+6;t++){let a=d.zero;a=d.add(a,d.mul(i,x.slice((2*l.domainSize+t)*f,(2*l.domainSize+t+1)*f))),t<l.domainSize+3&&(a=d.add(a,d.mul(z.v[1],E.slice(t*f,(t+1)*f)))),t<l.domainSize+2&&(a=d.add(a,d.mul(z.v[2],I.slice(t*f,(t+1)*f))),a=d.add(a,d.mul(z.v[3],C.slice(t*f,(t+1)*f))),a=d.add(a,d.mul(z.v[4],v.slice(t*f,(t+1)*f)))),t<l.domainSize&&(a=d.add(a,x.slice(t*f,(t+1)*f)),a=d.add(a,d.mul(z.xim,x.slice((l.domainSize+t)*f,(l.domainSize+t+1)*f))),a=d.add(a,d.mul(z.v[5],P.slice(t*f,(t+1)*f))),a=d.add(a,d.mul(z.v[6],O.slice(t*f,(t+1)*f)))),e.set(a,t*f)}let o=e.slice(0,f);o=d.sub(o,B.eval_t),o=d.sub(o,d.mul(z.v[1],B.eval_r)),o=d.sub(o,d.mul(z.v[2],B.eval_a)),o=d.sub(o,d.mul(z.v[3],B.eval_b)),o=d.sub(o,d.mul(z.v[4],B.eval_c)),o=d.sub(o,d.mul(z.v[5],B.eval_s1)),o=d.sub(o,d.mul(z.v[6],B.eval_s2)),e.set(o,0),e=N(e,z.xi),B.Wxi=await T(e,"multiexp Wxi");let n=new _e((l.domainSize+3)*f);for(let t=0;t<l.domainSize+3;t++){const e=F.slice(t*f,(t+1)*f);n.set(e,t*f)}o=n.slice(0,f),o=d.sub(o,B.eval_zw),n.set(o,0),n=N(n,d.mul(z.xi,d.w[l.power])),B.Wxiw=await T(n,"multiexp Wxiw")}(),B.protocol="plonk",B.curve=s.name,await r.close(),await i.close();let q=[];for(let t=1;t<=l.nPublic;t++){const e=g.slice(t*d.n8,t*d.n8+d.n8);q.push($e.fromRprLE(e))}return B.A=u.toObject(B.A),B.B=u.toObject(B.B),B.C=u.toObject(B.C),B.Z=u.toObject(B.Z),B.T1=u.toObject(B.T1),B.T2=u.toObject(B.T2),B.T3=u.toObject(B.T3),B.eval_a=d.toObject(B.eval_a),B.eval_b=d.toObject(B.eval_b),B.eval_c=d.toObject(B.eval_c),B.eval_s1=d.toObject(B.eval_s1),B.eval_s2=d.toObject(B.eval_s2),B.eval_zw=d.toObject(B.eval_zw),B.eval_t=d.toObject(B.eval_t),B.eval_r=d.toObject(B.eval_r),B.Wxi=u.toObject(B.Wxi),B.Wxiw=u.toObject(B.Wxiw),delete B.eval_t,B=zo(B),q=zo(q),{proof:B,publicSignals:q};function Q(t,e){const a=t.slice(e,e+4);return new DataView(a.buffer,a.byteOffset,a.byteLength).getUint32(0,!0)}function M(t){return t<l.nVars-l.nAdditions?g.slice(t*f,t*f+f):t<l.nVars?_.slice((t-(l.nVars-l.nAdditions))*f,(t-(l.nVars-l.nAdditions))*f+f):s.Fr.zero}function k(t){const e=$e.fromRprBE(new Uint8Array(qo.arrayBuffer(t)));return d.e(e)}function R(t,e){const a=t.byteLength/f;if(0==a)return d.zero;let i=t.slice((a-1)*f,a*f);for(let o=a-2;o>=0;o--)i=d.add(d.mul(i,e),t.slice(o*f,(o+1)*f));return i}function N(t,e){const a=t.byteLength/f,i=new _e(a*f);i.set(d.zero,(a-1)*f),i.set(t.slice((a-1)*f,a*f),(a-2)*f);for(let o=a-3;o>=0;o--)i.set(d.add(t.slice((o+1)*f,(o+2)*f),d.mul(e,i.slice((o+1)*f,(o+2)*f))),o*f);if(!d.eq(t.slice(0,f),d.mul(d.neg(e),i.slice(0,f))))throw new Error("Polinomial does not divide");return i}async function T(t,e){const i=t.byteLength/f,o=U.slice(0,i*s.G1.F.n8*2),n=await s.Fr.batchFromMontgomery(t);let r=await s.G1.multiExpAffine(o,n,a,e);return r=s.G1.toAffine(r),r}async function D(t,e){e=e||[];let a=await d.ifft(t);const i=new _e(f*l.domainSize*4);i.set(a,0);const o=new _e(f*(l.domainSize+e.length));o.set(a,0);for(let t=0;t<e.length;t++)o.set(d.add(o.slice((l.domainSize+t)*f,(l.domainSize+t+1)*f),e[t]),(l.domainSize+t)*f),o.set(d.sub(o.slice(t*f,(t+1)*f),e[t]),t*f);return[o,await d.fft(i)]}}const{unstringifyBigInts:Mo}=Ze,{keccak256:ko}=Uo;function Ro(t,e){const a=$e.fromRprBE(new Uint8Array(ko.arrayBuffer(e)));return t.Fr.e(a)}function No(t){return("0"+t.toString(16)).slice(-2)}function To(t){let e=t.toString(16);for(;e.length<64;)e="0"+e;return e=`"0x${e}"`,e}var Do=Object.freeze({__proto__:null,setup:async function(t,e,a,i){await ci.ready();const{fd:o,sections:n}=await fa(e,"ptau",1),{curve:r,power:c}=await Ji(o,n),{fd:l,sections:s}=await fa(t,"r1cs",1),d=await po(l,s,!1),u=2*r.G1.F.n8,f=r.G1,g=2*r.G2.F.n8,_=r.Fr,p=r.Fr.n8;i&&i.info("Reading r1cs");let h=await ya(l,s,2);const m=new Fo,L=new Fo;let w=d.nVars;const b=d.nOutputs+d.nPubInputs;await async function(){let t=0;function e(){const e=h.slice(t,t+4);t+=4;return new DataView(e.buffer).getUint32(0,!0)}function a(){const e=_.fromRprLE(h.slice(t,t+r.Fr.n8));return t+=r.Fr.n8,e}function o(){const t=[],i={k:r.Fr.zero},o=e();for(let n=0;n<o;n++){const o=e(),n=a();0==o?i.k=n:t.push([o,n])}const c=n(t);return i.s=c[0],i.coef=c[1],i}function n(t){if(0==t.length)return[0,r.Fr.zero];if(1==t.length)return t[0];const e=t.slice(0,t.length>>1),a=t.slice(t.length>>1),i=n(e),o=n(a),c=i[0],l=o[0],s=w++,d=r.Fr.zero,u=_.neg(i[1]),f=_.neg(o[1]),g=r.Fr.one,p=r.Fr.zero;return m.push([c,l,s,d,u,f,g,p]),L.push([c,l,i[1],o[1]]),[s,r.Fr.one]}for(let t=1;t<=b;t++){const e=t,a=0,i=0,o=r.Fr.zero,n=r.Fr.one,c=r.Fr.zero,l=r.Fr.zero,s=r.Fr.zero;m.push([e,a,i,o,n,c,l,s])}for(let t=0;t<d.nConstraints;t++){i&&t%1e4==0&&i.debug(`processing constraints: ${t}/${d.nConstraints}`);const e=o(),a=o(),n=o(),c=e.s,l=a.s,s=n.s,u=r.Fr.mul(e.coef,a.coef),f=r.Fr.mul(e.coef,a.k),g=r.Fr.mul(e.k,a.coef),_=r.Fr.neg(n.coef),p=r.Fr.sub(r.Fr.mul(e.k,a.k),n.k);m.push([c,l,s,u,f,g,_,p])}}();const y=await ga(a,"zkey",1,14,1<<22,1<<24);if(d.prime!=r.r)return i&&i.error("r1cs curve does not match powers of tau ceremony curve"),-1;let A=di(m.length-1)+1;A<3&&(A=3);const I=2**A;if(i&&i.info("Plonk constraints: "+m.length),A>c)return i&&i.error(`circuit too big for this power of tau ceremony. ${m.length} > 2**${c}`),-1;if(!n[12])return i&&i.error("Powers of tau is not prepared."),-1;const C=new _e(I*u),v=n[12][0].p+(2**A-1)*u;await o.readToBuffer(C,0,I*u,v);const[F,x]=function(){let t=_.two;for(;a(t,[],A);)_.add(t,_.one);let e=_.add(t,_.one);for(;a(e,[t],A);)_.add(e,_.one);return[t,e];function a(t,e,a){const i=2**a;let o=_.one;for(let n=0;n<i;n++){if(_.eq(t,o))return!0;for(let a=0;a<e.length;a++)if(_.eq(t,_.mul(e[a],o)))return!0;o=_.mul(o,_.w[a])}return!1}}(),E={};await async function(t,e){await _a(y,t);const a=new Uint8Array(8+2*p),o=new DataView(a.buffer);for(let t=0;t<L.length;t++){const n=L[t];let r=0;o.setUint32(r,n[0],!0),r+=4,o.setUint32(r,n[1],!0),r+=4,a.set(n[2],r),r+=p,a.set(n[3],r),r+=p,await y.write(a),i&&t%1e6==0&&i.debug(`writing ${e}: ${t}/${L.length}`)}await pa(y)}(3,"Additions"),await S(4,0,"Amap"),await S(5,1,"Bmap"),await S(6,2,"Cmap"),await G(7,3,"Qm"),await G(8,4,"Ql"),await G(9,5,"Qr"),await G(10,6,"Qo"),await G(11,7,"Qc"),await async function(t,e){const a=new _e(p*I*3),o=new Fo(w),n=new Fo(w);let c=_.one;for(let t=0;t<I;t++)t<m.length?(u(m[t][0],t),u(m[t][1],I+t),u(m[t][2],2*I+t)):(u(0,t),u(0,I+t),u(0,2*I+t)),c=_.mul(c,_.w[A]),i&&t%1e6==0&&i.debug(`writing ${e} phase1: ${t}/${m.length}`);for(let t=0;t<w;t++){if(void 0===n[t])throw new Error("Variable not used");a.set(o[t],n[t]*p),i&&t%1e6==0&&i.debug(`writing ${e} phase2: ${t}/${w}`)}await _a(y,t);let l=a.slice(0,I*p);await P(l);let s=a.slice(I*p,I*p*2);await P(s);let d=a.slice(I*p*2,I*p*3);function u(t,e){let i;void 0===o[t]?n[t]=e:a.set(o[t],e*p),i=e<I?c:e<2*I?_.mul(c,F):_.mul(c,x),o[t]=i}await P(d),await pa(y),l=await _.batchFromMontgomery(l),s=await _.batchFromMontgomery(s),d=await _.batchFromMontgomery(d),E.S1=await r.G1.multiExpAffine(C,l,i,"multiexp S1"),E.S2=await r.G1.multiExpAffine(C,s,i,"multiexp S2"),E.S3=await r.G1.multiExpAffine(C,d,i,"multiexp S3")}(12,"sigma"),await async function(t,e){await _a(y,t);const a=Math.max(b,1);for(let t=0;t<a;t++){let o=new _e(I*p);o.set(_.one,t*p),await P(o),i&&i.debug(`writing ${e} ${t}/${a}`)}await pa(y)}(13,"lagrange polynomials"),await _a(y,14);const B=new _e((I+6)*u);return await o.readToBuffer(B,0,(I+6)*u,n[2][0].p),await y.write(B),await pa(y),await async function(){await _a(y,1),await y.writeULE32(2),await pa(y),await _a(y,2);const t=r.q,e=8*(Math.floor(($e.bitLength(t)-1)/64)+1),a=r.r,i=8*(Math.floor(($e.bitLength(a)-1)/64)+1);let c;await y.writeULE32(e),await La(y,t,e),await y.writeULE32(i),await La(y,a,i),await y.writeULE32(w),await y.writeULE32(b),await y.writeULE32(I),await y.writeULE32(L.length),await y.writeULE32(m.length),await y.write(F),await y.write(x),await y.write(f.toAffine(E.Qm)),await y.write(f.toAffine(E.Ql)),await y.write(f.toAffine(E.Qr)),await y.write(f.toAffine(E.Qo)),await y.write(f.toAffine(E.Qc)),await y.write(f.toAffine(E.S1)),await y.write(f.toAffine(E.S2)),await y.write(f.toAffine(E.S3)),c=await o.read(g,n[3][0].p+g),await y.write(c),await pa(y)}(),await y.close(),await l.close(),await o.close(),void(i&&i.info("Setup Finished"));async function S(t,e,a){await _a(y,t);for(let t=0;t<m.length;t++)await y.writeULE32(m[t][e]),i&&t%1e6==0&&i.debug(`writing ${a}: ${t}/${m.length}`);await pa(y)}async function G(t,e,a){let o=new _e(I*p);for(let t=0;t<m.length;t++)o.set(m[t][e],t*p),i&&t%1e6==0&&i.debug(`writing ${a}: ${t}/${m.length}`);await _a(y,t),await P(o),await pa(y),o=await _.batchFromMontgomery(o),E[a]=await r.G1.multiExpAffine(C,o,i,"multiexp "+a)}async function P(t){const e=await _.ifft(t),a=new _e(I*p*4);a.set(e,0);const i=await _.fft(a);await y.write(e),await y.write(i)}},fullProve:async function(t,e,a,i){const o={type:"mem"};return await Ni(t,e,o),await Qo(a,o,i)},prove:Qo,verify:async function(t,e,a,i){t=Mo(t),a=Mo(a),e=Mo(e);const o=await Ua(t.curve),n=o.Fr,r=o.G1;if(a=function(t,e){const a=t.G1,i=t.Fr,o={};return o.A=a.fromObject(e.A),o.B=a.fromObject(e.B),o.C=a.fromObject(e.C),o.Z=a.fromObject(e.Z),o.T1=a.fromObject(e.T1),o.T2=a.fromObject(e.T2),o.T3=a.fromObject(e.T3),o.eval_a=i.fromObject(e.eval_a),o.eval_b=i.fromObject(e.eval_b),o.eval_c=i.fromObject(e.eval_c),o.eval_zw=i.fromObject(e.eval_zw),o.eval_s1=i.fromObject(e.eval_s1),o.eval_s2=i.fromObject(e.eval_s2),o.eval_r=i.fromObject(e.eval_r),o.Wxi=a.fromObject(e.Wxi),o.Wxiw=a.fromObject(e.Wxiw),o}(o,a),t=function(t,e){const a=t.G1,i=t.G2,o=t.Fr,n=e;return n.Qm=a.fromObject(e.Qm),n.Ql=a.fromObject(e.Ql),n.Qr=a.fromObject(e.Qr),n.Qo=a.fromObject(e.Qo),n.Qc=a.fromObject(e.Qc),n.S1=a.fromObject(e.S1),n.S2=a.fromObject(e.S2),n.S3=a.fromObject(e.S3),n.k1=o.fromObject(e.k1),n.k2=o.fromObject(e.k2),n.X_2=i.fromObject(e.X_2),n}(o,t),!function(t,e){const a=t.G1;return!!a.isValid(e.A)&&(!!a.isValid(e.B)&&(!!a.isValid(e.C)&&(!!a.isValid(e.Z)&&(!!a.isValid(e.T1)&&(!!a.isValid(e.T2)&&(!!a.isValid(e.T3)&&(!!a.isValid(e.Wxi)&&!!a.isValid(e.Wxiw))))))))}(o,a))return i.error("Proof is not well constructed"),!1;const c=function(t,e){const a=t.G1,i=t.Fr,o=t.Fr.n8,n={},r=new Uint8Array(2*a.F.n8*3);a.toRprUncompressed(r,0,e.A),a.toRprUncompressed(r,2*a.F.n8,e.B),a.toRprUncompressed(r,4*a.F.n8,e.C),n.beta=Ro(t,r);const c=new Uint8Array(o);i.toRprBE(c,0,n.beta),n.gamma=Ro(t,c);const l=new Uint8Array(2*a.F.n8);a.toRprUncompressed(l,0,e.Z),n.alpha=Ro(t,l);const s=new Uint8Array(2*a.F.n8*3);a.toRprUncompressed(s,0,e.T1),a.toRprUncompressed(s,2*a.F.n8,e.T2),a.toRprUncompressed(s,4*a.F.n8,e.T3),n.xi=Ro(t,s);const d=new Uint8Array(7*o);i.toRprBE(d,0,e.eval_a),i.toRprBE(d,o,e.eval_b),i.toRprBE(d,2*o,e.eval_c),i.toRprBE(d,3*o,e.eval_s1),i.toRprBE(d,4*o,e.eval_s2),i.toRprBE(d,5*o,e.eval_zw),i.toRprBE(d,6*o,e.eval_r),n.v=[],n.v[1]=Ro(t,d);for(let t=2;t<=6;t++)n.v[t]=i.mul(n.v[t-1],n.v[1]);const u=new Uint8Array(2*a.F.n8*2);return a.toRprUncompressed(u,0,e.Wxi),a.toRprUncompressed(u,2*a.F.n8,e.Wxiw),n.u=Ro(t,u),n}(o,a);i&&(i.debug("beta: "+n.toString(c.beta,16)),i.debug("gamma: "+n.toString(c.gamma,16)),i.debug("alpha: "+n.toString(c.alpha,16)),i.debug("xi: "+n.toString(c.xi,16)),i.debug("v1: "+n.toString(c.v[1],16)),i.debug("v6: "+n.toString(c.v[6],16)),i.debug("u: "+n.toString(c.u,16)));const l=function(t,e,a){const i=t.Fr;let o=e.xi,n=1;for(let t=0;t<a.power;t++)o=i.square(o),n*=2;e.xin=o,e.zh=i.sub(o,i.one);const r=[],c=i.e(n);let l=i.one;for(let t=1;t<=Math.max(1,a.nPublic);t++)r[t]=i.div(i.mul(l,e.zh),i.mul(c,i.sub(e.xi,l))),l=i.mul(l,i.w[a.power]);return r}(o,c,t);if(i){i.debug("Lagrange Evaluations: ");for(let t=1;t<l.length;t++)i.debug(`L${t}(xi)=`+n.toString(l[t],16))}if(e.length!=t.nPublic)return i.error("Number of public signals does not match with vk"),!1;const s=function(t,e,a){const i=t.Fr;let o=i.zero;for(let t=0;t<e.length;t++){const n=i.e(e[t]);o=i.sub(o,i.mul(n,a[t+1]))}return o}(o,e,l);i&&i.debug("Pl: "+n.toString(s,16));const d=function(t,e,a,i,o){const n=t.Fr;let r=e.eval_r;r=n.add(r,i);let c=e.eval_a;c=n.add(c,n.mul(a.beta,e.eval_s1)),c=n.add(c,a.gamma);let l=e.eval_b;l=n.add(l,n.mul(a.beta,e.eval_s2)),l=n.add(l,a.gamma);let s=e.eval_c;s=n.add(s,a.gamma);let d=n.mul(n.mul(c,l),s);d=n.mul(d,e.eval_zw),d=n.mul(d,a.alpha),r=n.sub(r,d),r=n.sub(r,n.mul(o,n.square(a.alpha)));return n.div(r,a.zh)}(o,a,c,s,l[1]);i&&i.debug("t: "+n.toString(d,16));const u=function(t,e,a,i,o){const n=t.G1,r=t.Fr;let c=r.mul(r.mul(e.eval_a,e.eval_b),a.v[1]),l=n.timesFr(i.Qm,c),s=r.mul(e.eval_a,a.v[1]);l=n.add(l,n.timesFr(i.Ql,s));let d=r.mul(e.eval_b,a.v[1]);l=n.add(l,n.timesFr(i.Qr,d));let u=r.mul(e.eval_c,a.v[1]);l=n.add(l,n.timesFr(i.Qo,u)),l=n.add(l,n.timesFr(i.Qc,a.v[1]));const f=r.mul(a.beta,a.xi);let g=e.eval_a;g=r.add(g,f),g=r.add(g,a.gamma);let _=e.eval_b;_=r.add(_,r.mul(f,i.k1)),_=r.add(_,a.gamma);let p=e.eval_c;p=r.add(p,r.mul(f,i.k2)),p=r.add(p,a.gamma);let h=r.mul(r.mul(g,_),p);h=r.mul(h,r.mul(a.alpha,a.v[1]));let m=r.mul(r.mul(o,r.square(a.alpha)),a.v[1]);h=r.add(h,m),h=r.add(h,a.u),l=n.add(l,n.timesFr(e.Z,h));let L=e.eval_a;L=r.add(L,r.mul(a.beta,e.eval_s1)),L=r.add(L,a.gamma);let w=e.eval_b;w=r.add(w,r.mul(a.beta,e.eval_s2)),w=r.add(w,a.gamma);let b=r.mul(L,w);return b=r.mul(b,a.alpha),b=r.mul(b,a.v[1]),b=r.mul(b,a.beta),b=r.mul(b,e.eval_zw),l=n.sub(l,n.timesFr(i.S3,b)),l}(o,a,c,t,l[1]);i&&i.debug("D: "+r.toString(r.toAffine(u),16));const f=function(t,e,a,i,o){const n=t.G1,r=t.Fr;let c=e.T1;return c=n.add(c,n.timesFr(e.T2,a.xin)),c=n.add(c,n.timesFr(e.T3,r.square(a.xin))),c=n.add(c,o),c=n.add(c,n.timesFr(e.A,a.v[2])),c=n.add(c,n.timesFr(e.B,a.v[3])),c=n.add(c,n.timesFr(e.C,a.v[4])),c=n.add(c,n.timesFr(i.S1,a.v[5])),c=n.add(c,n.timesFr(i.S2,a.v[6])),c}(o,a,c,t,u);i&&i.debug("F: "+r.toString(r.toAffine(f),16));const g=function(t,e,a,i,o){const n=t.G1,r=t.Fr;let c=o;c=r.add(c,r.mul(a.v[1],e.eval_r)),c=r.add(c,r.mul(a.v[2],e.eval_a)),c=r.add(c,r.mul(a.v[3],e.eval_b)),c=r.add(c,r.mul(a.v[4],e.eval_c)),c=r.add(c,r.mul(a.v[5],e.eval_s1)),c=r.add(c,r.mul(a.v[6],e.eval_s2)),c=r.add(c,r.mul(a.u,e.eval_zw));return n.timesFr(n.one,c)}(o,a,c,0,d);i&&i.debug("E: "+r.toString(r.toAffine(g),16));const _=await async function(t,e,a,i,o,n){const r=t.G1,c=t.Fr;let l=e.Wxi;l=r.add(l,r.timesFr(e.Wxiw,a.u));let s=r.timesFr(e.Wxi,a.xi);const d=c.mul(c.mul(a.u,a.xi),c.w[i.power]);s=r.add(s,r.timesFr(e.Wxiw,d)),s=r.add(s,n),s=r.sub(s,o);return await t.pairingEq(r.neg(l),i.X_2,s,t.G2.one)}(o,a,c,t,g,f);return i&&(_?i.info("OK!"):i.warn("Invalid Proof")),_},exportSolidityCallData:async function(t,e){const a=await Ua(t.curve),i=a.G1,o=a.Fr;let n="";for(let t=0;t<e.length;t++)""!=n&&(n+=","),n+=To(e[t]);const r=new Uint8Array(2*i.F.n8*9+7*o.n8);return i.toRprUncompressed(r,0,i.e(t.A)),i.toRprUncompressed(r,2*i.F.n8,i.e(t.B)),i.toRprUncompressed(r,4*i.F.n8,i.e(t.C)),i.toRprUncompressed(r,6*i.F.n8,i.e(t.Z)),i.toRprUncompressed(r,8*i.F.n8,i.e(t.T1)),i.toRprUncompressed(r,10*i.F.n8,i.e(t.T2)),i.toRprUncompressed(r,12*i.F.n8,i.e(t.T3)),i.toRprUncompressed(r,14*i.F.n8,i.e(t.Wxi)),i.toRprUncompressed(r,16*i.F.n8,i.e(t.Wxiw)),o.toRprBE(r,18*i.F.n8,o.e(t.eval_a)),o.toRprBE(r,18*i.F.n8+o.n8,o.e(t.eval_b)),o.toRprBE(r,18*i.F.n8+2*o.n8,o.e(t.eval_c)),o.toRprBE(r,18*i.F.n8+3*o.n8,o.e(t.eval_s1)),o.toRprBE(r,18*i.F.n8+4*o.n8,o.e(t.eval_s2)),o.toRprBE(r,18*i.F.n8+5*o.n8,o.e(t.eval_zw)),o.toRprBE(r,18*i.F.n8+6*o.n8,o.e(t.eval_r)),"0x"+Array.from(r).map(No).join("")+",["+n+"]"}});return t.groth16=ji,t.plonk=Do,t.powersOfTau=so,t.r1cs=bo,t.wtns=Ao,t.zKey=Oo,Object.defineProperty(t,"__esModule",{value:!0}),t}({});

