    function alg8_complex(F) {
        F.sqrt = function() {
            throw new Error("Sqrt alg 8 not implemented");
        };
    }

    function quarterRound(st, a, b, c, d) {

        st[a] = (st[a] + st[b]) >>> 0;
        st[d] = (st[d] ^ st[a]) >>> 0;
        st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;

        st[c] = (st[c] + st[d]) >>> 0;
        st[b] = (st[b] ^ st[c]) >>> 0;
        st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;

        st[a] = (st[a] + st[b]) >>> 0;
        st[d] = (st[d] ^ st[a]) >>> 0;
        st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;

        st[c] = (st[c] + st[d]) >>> 0;
        st[b] = (st[b] ^ st[c]) >>> 0;
        st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;
    }

    function doubleRound(st) {
        quarterRound(st, 0, 4, 8,12);
        quarterRound(st, 1, 5, 9,13);
        quarterRound(st, 2, 6,10,14);
        quarterRound(st, 3, 7,11,15);

        quarterRound(st, 0, 5,10,15);
        quarterRound(st, 1, 6,11,12);
        quarterRound(st, 2, 7, 8,13);
        quarterRound(st, 3, 4, 9,14);
    }

    class ChaCha {

        constructor(seed) {
            seed = seed || [0,0,0,0,0,0,0,0];
            this.state = [
                0x61707865,
                0x3320646E,
                0x79622D32,
                0x6B206574,
                seed[0],
                seed[1],
                seed[2],
                seed[3],
                seed[4],
                seed[5],
                seed[6],
                seed[7],
                0,
                0,
                0,
                0
            ];
            this.idx = 16;
            this.buff = new Array(16);
        }

        nextU32() {
            if (this.idx == 16) this.update();
            return this.buff[this.idx++];
        }

        nextU64() {
            return add(mul(this.nextU32(), 0x100000000), this.nextU32());
        }

        nextBool() {
            return (this.nextU32() & 1) == 1;
        }

        update() {
            // Copy the state
            for (let i=0; i<16; i++) this.buff[i] = this.state[i];

            // Apply the rounds
            for (let i=0; i<10; i++) doubleRound(this.buff);

            // Add to the initial
            for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;

            this.idx = 0;

            this.state[12] = (this.state[12] + 1) >>> 0;
            if (this.state[12] != 0) return;
            this.state[13] = (this.state[13] + 1) >>> 0;
            if (this.state[13] != 0) return;
            this.state[14] = (this.state[14] + 1) >>> 0;
            if (this.state[14] != 0) return;
            this.state[15] = (this.state[15] + 1) >>> 0;
        }
    }

    var crypto = {};

    function getRandomBytes(n) {
        let array = new Uint8Array(n);
        { // Browser
            if (typeof globalThis.crypto !== "undefined") { // Supported
                globalThis.crypto.getRandomValues(array);
            } else { // fallback
                for (let i=0; i<n; i++) {
                    array[i] = (Math.random()*4294967296)>>>0;
                }
            }
        }
        return array;
    }

    function getRandomSeed() {
        const arr = getRandomBytes(32);
        const arrV = new Uint32Array(arr.buffer);
        const seed = [];
        for (let i=0; i<8; i++) {
            seed.push(arrV[i]);
        }
        return seed;
    }

    let threadRng = null;

    function getThreadRng() {
        if (threadRng) return threadRng;
        threadRng = new ChaCha(getRandomSeed());
        return threadRng;
    }

    /* global BigInt */

    class ZqField$1 {
        constructor(p) {
            this.type="F1";
            this.one = BigInt(1);
            this.zero = BigInt(0);
            this.p = BigInt(p);
            this.m = 1;
            this.negone = this.p-this.one;
            this.two = BigInt(2);
            this.half = this.p >> this.one;
            this.bitLength = bitLength(this.p);
            this.mask = (this.one << BigInt(this.bitLength)) - this.one;

            this.n64 = Math.floor((this.bitLength - 1) / 64)+1;
            this.n32 = this.n64*2;
            this.n8 = this.n64*8;
            this.R = this.e(this.one << BigInt(this.n64*64));
            this.Ri = this.inv(this.R);

            const e = this.negone >> this.one;
            this.nqr = this.two;
            let r = this.pow(this.nqr, e);
            while (!this.eq(r, this.negone)) {
                this.nqr = this.nqr + this.one;
                r = this.pow(this.nqr, e);
            }


            this.s = 0;
            this.t = this.negone;

            while ((this.t & this.one) == this.zero) {
                this.s = this.s + 1;
                this.t = this.t >> this.one;
            }

            this.nqr_to_t = this.pow(this.nqr, this.t);

            buildSqrt(this);
        }

        e(a,b) {
            let res;
            if (!b) {
                res = BigInt(a);
            } else if (b==16) {
                res = BigInt("0x"+a);
            }
            if (res < 0) {
                let nres = -res;
                if (nres >= this.p) nres = nres % this.p;
                return this.p - nres;
            } else {
                return (res>= this.p) ? res%this.p : res;
            }

        }

        add(a, b) {
            const res = a + b;
            return res >= this.p ? res-this.p : res;
        }

        sub(a, b) {
            return (a >= b) ? a-b : this.p-b+a;
        }

        neg(a) {
            return a ? this.p-a : a;
        }

        mul(a, b) {
            return (a*b)%this.p;
        }

        mulScalar(base, s) {
            return (base * this.e(s)) % this.p;
        }

        square(a) {
            return (a*a) % this.p;
        }

        eq(a, b) {
            return a==b;
        }

        neq(a, b) {
            return a!=b;
        }

        lt(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa < bb;
        }

        gt(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa > bb;
        }

        leq(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa <= bb;
        }

        geq(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa >= bb;
        }

        div(a, b) {
            return this.mul(a, this.inv(b));
        }

        idiv(a, b) {
            if (!b) throw new Error("Division by zero");
            return a / b;
        }

        inv(a) {
            if (!a) throw new Error("Division by zero");

            let t = this.zero;
            let r = this.p;
            let newt = this.one;
            let newr = a % this.p;
            while (newr) {
                let q = r/newr;
                [t, newt] = [newt, t-q*newt];
                [r, newr] = [newr, r-q*newr];
            }
            if (t<this.zero) t += this.p;
            return t;
        }

        mod(a, b) {
            return a % b;
        }

        pow(b, e) {
            return exp(this, b, e);
        }

        exp(b, e) {
            return exp(this, b, e);
        }

        band(a, b) {
            const res =  ((a & b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bor(a, b) {
            const res =  ((a | b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bxor(a, b) {
            const res =  ((a ^ b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bnot(a) {
            const res = a ^ this.mask;
            return res >= this.p ? res-this.p : res;
        }

        shl(a, b) {
            if (Number(b) < this.bitLength) {
                const res = (a << b) & this.mask;
                return res >= this.p ? res-this.p : res;
            } else {
                const nb = this.p - b;
                if (Number(nb) < this.bitLength) {
                    return a >> nb;
                } else {
                    return this.zero;
                }
            }
        }

        shr(a, b) {
            if (Number(b) < this.bitLength) {
                return a >> b;
            } else {
                const nb = this.p - b;
                if (Number(nb) < this.bitLength) {
                    const res = (a << nb) & this.mask;
                    return res >= this.p ? res-this.p : res;
                } else {
                    return 0;
                }
            }
        }

        land(a, b) {
            return (a && b) ? this.one : this.zero;
        }

        lor(a, b) {
            return (a || b) ? this.one : this.zero;
        }

        lnot(a) {
            return (a) ? this.zero : this.one;
        }

        sqrt_old(n) {

            if (n == this.zero) return this.zero;

            // Test that have solution
            const res = this.pow(n, this.negone >> this.one);
            if ( res != this.one ) return null;

            let m = this.s;
            let c = this.nqr_to_t;
            let t = this.pow(n, this.t);
            let r = this.pow(n, this.add(this.t, this.one) >> this.one );

            while ( t != this.one ) {
                let sq = this.square(t);
                let i = 1;
                while (sq != this.one ) {
                    i++;
                    sq = this.square(sq);
                }

                // b = c ^ m-i-1
                let b = c;
                for (let j=0; j< m-i-1; j ++) b = this.square(b);

                m = i;
                c = this.square(b);
                t = this.mul(t, c);
                r = this.mul(r, b);
            }

            if (r > (this.p >> this.one)) {
                r = this.neg(r);
            }

            return r;
        }

        normalize(a, b) {
            a = BigInt(a,b);
            if (a < 0) {
                let na = -a;
                if (na >= this.p) na = na % this.p;
                return this.p - na;
            } else {
                return (a>= this.p) ? a%this.p : a;
            }
        }

        random() {
            const nBytes = (this.bitLength*2 / 8);
            let res =this.zero;
            for (let i=0; i<nBytes; i++) {
                res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);
            }
            return res % this.p;
        }

        toString(a, base) {
            let vs;
            if (a > this.half) {
                const v = this.p-a;
                vs = "-"+v.toString(base);
            } else {
                vs = a.toString(base);
            }
            return vs;
        }

        isZero(a) {
            return a == this.zero;
        }

        fromRng(rng) {
            let v;
            do {
                v=this.zero;
                for (let i=0; i<this.n64; i++) {
                    v += rng.nextU64() << BigInt(64 *i);
                }
                v &= this.mask;
            } while (v >= this.p);
            v = (v * this.Ri) % this.p;   // Convert from montgomery
            return v;
        }

    }

    class ZqField {
        constructor(p) {
            this.type="F1";
            this.one = BigInteger.one;
            this.zero = BigInteger.zero;
            this.p = BigInteger(p);
            this.m = 1;
            this.negone = this.p.minus(BigInteger.one);
            this.two = BigInteger(2);
            this.half = this.p.shiftRight(1);
            this.bitLength = this.p.bitLength();
            this.mask = BigInteger.one.shiftLeft(this.bitLength).minus(BigInteger.one);

            this.n64 = Math.floor((this.bitLength - 1) / 64)+1;
            this.n32 = this.n64*2;
            this.n8 = this.n64*8;
            this.R = BigInteger.one.shiftLeft(this.n64*64);
            this.Ri = this.inv(this.R);

            const e = this.negone.shiftRight(this.one);
            this.nqr = this.two;
            let r = this.pow(this.nqr, e);
            while (!r.equals(this.negone)) {
                this.nqr = this.nqr.add(this.one);
                r = this.pow(this.nqr, e);
            }

            this.s = this.zero;
            this.t = this.negone;

            while (!this.t.isOdd()) {
                this.s = this.s.add(this.one);
                this.t = this.t.shiftRight(this.one);
            }

            this.nqr_to_t = this.pow(this.nqr, this.t);

            buildSqrt(this);
        }

        e(a,b) {

            const res = BigInteger(a,b);

            return this.normalize(res);

        }

        add(a, b) {
            let res = a.add(b);
            if (res.geq(this.p)) {
                res = res.minus(this.p);
            }
            return res;
        }

        sub(a, b) {
            if (a.geq(b)) {
                return a.minus(b);
            } else {
                return this.p.minus(b.minus(a));
            }
        }

        neg(a) {
            if (a.isZero()) return a;
            return this.p.minus(a);
        }

        mul(a, b) {
            return a.times(b).mod(this.p);
        }

        mulScalar(base, s) {
            return base.times(BigInteger(s)).mod(this.p);
        }

        square(a) {
            return a.square().mod(this.p);
        }

        eq(a, b) {
            return a.eq(b);
        }

        neq(a, b) {
            return a.neq(b);
        }

        lt(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.lt(bb);
        }

        gt(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.gt(bb);
        }

        leq(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.leq(bb);
        }

        geq(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.geq(bb);
        }

        div(a, b) {
            if (b.isZero()) throw new Error("Division by zero");
            return a.times(b.modInv(this.p)).mod(this.p);
        }

        idiv(a, b) {
            if (b.isZero()) throw new Error("Division by zero");
            return a.divide(b);
        }

        inv(a) {
            if (a.isZero()) throw new Error("Division by zero");
            return a.modInv(this.p);
        }

        mod(a, b) {
            return a.mod(b);
        }

        pow(a, b) {
            return a.modPow(b, this.p);
        }

        exp(a, b) {
            return a.modPow(b, this.p);
        }

        band(a, b) {
            return a.and(b).and(this.mask).mod(this.p);
        }

        bor(a, b) {
            return a.or(b).and(this.mask).mod(this.p);
        }

        bxor(a, b) {
            return a.xor(b).and(this.mask).mod(this.p);
        }

        bnot(a) {
            return a.xor(this.mask).mod(this.p);
        }

        shl(a, b) {
            if (b.lt(this.bitLength)) {
                return a.shiftLeft(b).and(this.mask).mod(this.p);
            } else {
                const nb = this.p.minus(b);
                if (nb.lt(this.bitLength)) {
                    return this.shr(a, nb);
                } else {
                    return BigInteger.zero;
                }
            }
        }

        shr(a, b) {
            if (b.lt(this.bitLength)) {
                return a.shiftRight(b);
            } else {
                const nb = this.p.minus(b);
                if (nb.lt(this.bitLength)) {
                    return this.shl(a, nb);
                } else {
                    return BigInteger.zero;
                }
            }
        }

        land(a, b) {
            return (a.isZero() || b.isZero()) ? BigInteger.zero : BigInteger.one;
        }

        lor(a, b) {
            return (a.isZero() && b.isZero()) ? BigInteger.zero : BigInteger.one;
        }

        lnot(a) {
            return a.isZero() ? BigInteger.one : BigInteger.zero;
        }

        sqrt_old(n) {

            if (n.equals(this.zero)) return this.zero;

            // Test that have solution
            const res = this.pow(n, this.negone.shiftRight(this.one));
            if (!res.equals(this.one)) return null;

            let m = parseInt(this.s);
            let c = this.nqr_to_t;
            let t = this.pow(n, this.t);
            let r = this.pow(n, this.add(this.t, this.one).shiftRight(this.one) );

            while (!t.equals(this.one)) {
                let sq = this.square(t);
                let i = 1;
                while (!sq.equals(this.one)) {
                    i++;
                    sq = this.square(sq);
                }

                // b = c ^ m-i-1
                let b = c;
                for (let j=0; j< m-i-1; j ++) b = this.square(b);

                m = i;
                c = this.square(b);
                t = this.mul(t, c);
                r = this.mul(r, b);
            }

            if (r.greater(this.p.shiftRight(this.one))) {
                r = this.neg(r);
            }

            return r;
        }

        normalize(a) {
            a = BigInteger(a);
            if (a.isNegative()) {
                return this.p.minus(a.abs().mod(this.p));
            } else {
                return a.mod(this.p);
            }
        }

        random() {
            let res = BigInteger(0);
            let n = BigInteger(this.p.square());
            while (!n.isZero()) {
                res = res.shiftLeft(8).add(BigInteger(getRandomBytes(1)[0]));
                n = n.shiftRight(8);
            }
            return res.mod(this.p);
        }

        toString(a, base) {
            let vs;
            if (!a.lesserOrEquals(this.p.shiftRight(BigInteger(1)))) {
                const v = this.p.minus(a);
                vs = "-"+v.toString(base);
            } else {
                vs = a.toString(base);
            }

            return vs;
        }

        isZero(a) {
            return a.isZero();
        }

        fromRng(rng) {
            let v;
            do {
                v = BigInteger(0);
                for (let i=0; i<this.n64; i++) {
                    v = v.add(v, rng.nextU64().shiftLeft(64*i));
                }
                v = v.and(this.mask);
            } while (v.geq(this.p));
            v = v.times(this.Ri).mod(this.q);
            return v;
        }


    }

    const supportsNativeBigInt$1 = typeof BigInt === "function";
    let _F1Field;
    if (supportsNativeBigInt$1) {
        _F1Field = ZqField$1;
    } else {
        _F1Field = ZqField;
    }

    class F1Field extends _F1Field {

        // Returns a buffer with Little Endian Representation
        toRprLE(buff, o, e) {
            toRprLE(buff, o, e, this.n64*8);
        }

        // Returns a buffer with Big Endian Representation
        toRprBE(buff, o, e) {
            toRprBE(buff, o, e, this.n64*8);
        }

        // Returns a buffer with Big Endian Montgomery Representation
        toRprBEM(buff, o, e) {
            return this.toRprBE(buff, o, this.mul(this.R, e));
        }

        toRprLEM(buff, o, e) {
            return this.toRprLE(buff, o, this.mul(this.R, e));
        }


        // Pases a buffer with Little Endian Representation
        fromRprLE(buff, o) {
            return fromRprLE(buff, o, this.n8);
        }

        // Pases a buffer with Big Endian Representation
        fromRprBE(buff, o) {
            return fromRprBE(buff, o, this.n8);
        }

        fromRprLEM(buff, o) {
            return this.mul(this.fromRprLE(buff, o), this.Ri);
        }

        fromRprBEM(buff, o) {
            return this.mul(this.fromRprBE(buff, o), this.Ri);
        }

    }

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var bigInt2BytesLE = function bigInt2BytesLE(_a, len) {
        const b = Array(len);
        let v = BigInteger(_a);
        for (let i=0; i<len; i++) {
            b[i] = v.and(0xFF).toJSNumber();
            v = v.shiftRight(8);
        }
        return b;
    };

    var bigInt2U32LE = function bigInt2BytesLE(_a, len) {
        const b = Array(len);
        let v = BigInteger(_a);
        for (let i=0; i<len; i++) {
            b[i] = v.and(0xFFFFFFFF).toJSNumber();
            v = v.shiftRight(32);
        }
        return b;
    };

    var isOcamNum = function(a) {
        if (!Array.isArray(a)) return false;
        if (a.length != 3) return false;
        if (typeof a[0] !== "number") return false;
        if (typeof a[1] !== "number") return false;
        if (!Array.isArray(a[2])) return false;
        return true;
    };

    var utils$3 = {
    	bigInt2BytesLE: bigInt2BytesLE,
    	bigInt2U32LE: bigInt2U32LE,
    	isOcamNum: isOcamNum
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_int = function buildInt(module, n64, _prefix) {

        const prefix = _prefix || "int";
        if (module.modules[prefix]) return prefix;  // already builded
        module.modules[prefix] = {};

        const n32 = n64*2;
        const n8 = n64*8;

        module.alloc(n8, utils$3.bigInt2BytesLE(1, n8));

        function buildCopy() {
            const f = module.addFunction(prefix+"_copy");
            f.addParam("px", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_load(
                            c.getLocal("px"),
                            i*8
                        )
                    )
                );
            }
        }

        function buildZero() {
            const f = module.addFunction(prefix+"_zero");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_const(0)
                    )
                );
            }
        }

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.i64_store(
                    c.getLocal("pr"),
                    0,
                    c.i64_const(1)
                )
            );
            for (let i=1; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_const(0)
                    )
                );
            }
        }

        function buildIsZero() {
            const f = module.addFunction(prefix+"_isZero");
            f.addParam("px", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_eqz(
                        c.i64_load(c.getLocal("px"))
                    ));
                }
                return c.if(
                    c.i64_eqz(
                        c.i64_load(c.getLocal("px"), n*8 )
                    ),
                    getCompCode(n-1),
                    c.ret(c.i32_const(0))
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }

        function buildEq() {
            const f = module.addFunction(prefix+"_eq");
            f.addParam("px", "i32");
            f.addParam("py", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_eq(
                        c.i64_load(c.getLocal("px")),
                        c.i64_load(c.getLocal("py"))
                    ));
                }
                return c.if(
                    c.i64_eq(
                        c.i64_load(c.getLocal("px"), n*8 ),
                        c.i64_load(c.getLocal("py"), n*8 )
                    ),
                    getCompCode(n-1),
                    c.ret(c.i32_const(0))
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }



        function buildGte() {
            const f = module.addFunction(prefix+"_gte");
            f.addParam("px", "i32");
            f.addParam("py", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_ge_u(
                        c.i64_load(c.getLocal("px")),
                        c.i64_load(c.getLocal("py"))
                    ));
                }
                return c.if(
                    c.i64_lt_u(
                        c.i64_load(c.getLocal("px"), n*8 ),
                        c.i64_load(c.getLocal("py"), n*8 )
                    ),
                    c.ret(c.i32_const(0)),
                    c.if(
                        c.i64_gt_u(
                            c.i64_load(c.getLocal("px"), n*8 ),
                            c.i64_load(c.getLocal("py"), n*8 )
                        ),
                        c.ret(c.i32_const(1)),
                        getCompCode(n-1)
                    )
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }



        function buildAdd() {

            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.setReturnType("i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_add(
                    c.i64_load32_u(c.getLocal("x")),
                    c.i64_load32_u(c.getLocal("y"))
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("r"),
                c.getLocal("c"),
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_add(
                            c.i64_load32_u(c.getLocal("x"), 4*i),
                            c.i64_load32_u(c.getLocal("y"), 4*i)
                        ),
                        c.i64_shr_u (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("r"),
                    i*4,
                    c.getLocal("c")
                ));
            }

            f.addCode(c.i32_wrap_i64(c.i64_shr_u (c.getLocal("c"), c.i64_const(32))));
        }


        function buildSub() {

            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.setReturnType("i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_sub(
                    c.i64_load32_u(c.getLocal("x")),
                    c.i64_load32_u(c.getLocal("y"))
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("r"),
                c.i64_and(
                    c.getLocal("c"),
                    c.i64_const("0xFFFFFFFF")
                )
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_sub(
                            c.i64_load32_u(c.getLocal("x"), 4*i),
                            c.i64_load32_u(c.getLocal("y"), 4*i)
                        ),
                        c.i64_shr_s (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("r"),
                    i*4,
                    c.i64_and( c.getLocal("c"), c.i64_const("0xFFFFFFFF"))
                ));
            }

            f.addCode(c.i32_wrap_i64 ( c.i64_shr_s (c.getLocal("c"), c.i64_const(32))));
        }


        function buildMul() {

            const f = module.addFunction(prefix+"_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
                f.addLocal("y"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const loadX = [];
            const loadY = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadY[j]) {
                    Y = c.teeLocal("y"+j, c.i64_load32_u( c.getLocal("y"), j*4));
                    loadY[j] = true;
                } else {
                    Y = c.getLocal("y"+j);
                }

                return c.i64_mul( X, Y );
            }

            let c0 = "c0";
            let c1 = "c1";

            for (let k=0; k<n32*2-1; k++) {
                for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );

                }

                f.addCode(
                    c.i64_store32(
                        c.getLocal("r"),
                        k*4,
                        c.getLocal(c0)
                    )
                );
                [c0, c1] = [c1, c0];
                f.addCode(
                    c.setLocal(c1,
                        c.i64_shr_u(
                            c.getLocal(c0),
                            c.i64_const(32)
                        )
                    )
                );
            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4*2-4,
                    c.getLocal(c0)
                )
            );

        }



        function buildSquare() {

            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");
            f.addLocal("c0_old", "i64");
            f.addLocal("c1_old", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const loadX = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadX[j]) {
                    Y = c.teeLocal("x"+j, c.i64_load32_u( c.getLocal("x"), j*4));
                    loadX[j] = true;
                } else {
                    Y = c.getLocal("x"+j);
                }

                return c.i64_mul( X, Y );
            }

            let c0 = "c0";
            let c1 = "c1";
            let c0_old = "c0_old";
            let c1_old = "c1_old";

            for (let k=0; k<n32*2-1; k++) {
                f.addCode(
                    c.setLocal(c0, c.i64_const(0)),
                    c.setLocal(c1, c.i64_const(0)),
                );

                for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Multiply by 2
                f.addCode(
                    c.setLocal(c0,
                        c.i64_shl(
                            c.i64_and(
                                c.getLocal(c0),
                                c.i64_const(0xFFFFFFFF)
                            ),
                            c.i64_const(1)
                        )
                    )
                );

                f.addCode(
                    c.setLocal(c1,
                        c.i64_add(
                            c.i64_shl(
                                c.getLocal(c1),
                                c.i64_const(1)
                            ),
                            c.i64_shr_u(
                                c.getLocal(c0),
                                c.i64_const(32)
                            )
                        )
                    )
                );

                if (k%2 == 0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(k>>1, k>>1)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Add the old carry

                if (k>0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                c.i64_and(
                                    c.getLocal(c0_old),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.i64_add(
                                    c.getLocal(c1),
                                    c.i64_shr_u(
                                        c.getLocal(c0),
                                        c.i64_const(32)
                                    )
                                ),
                                c.getLocal(c1_old)
                            )
                        )
                    );
                }

                f.addCode(
                    c.i64_store32(
                        c.getLocal("r"),
                        k*4,
                        c.getLocal(c0)
                    )
                );

                f.addCode(
                    c.setLocal(
                        c0_old,
                        c.getLocal(c1)
                    ),
                    c.setLocal(
                        c1_old,
                        c.i64_shr_u(
                            c.getLocal(c0_old),
                            c.i64_const(32)
                        )
                    )
                );

            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4*2-4,
                    c.getLocal(c0_old)
                )
            );

        }


        function buildSquareOld() {
            const f = module.addFunction(prefix+"_squareOld");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(prefix + "_mul", c.getLocal("x"), c.getLocal("x"), c.getLocal("r")));
        }

        function _buildMul1() {
            const f = module.addFunction(prefix+"__mul1");
            f.addParam("px", "i32");
            f.addParam("y", "i64");
            f.addParam("pr", "i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_mul(
                    c.i64_load32_u(c.getLocal("px"), 0, 0),
                    c.getLocal("y")
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("pr"),
                0,
                0,
                c.getLocal("c"),
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_mul(
                            c.i64_load32_u(c.getLocal("px"), 4*i, 0),
                            c.getLocal("y")
                        ),
                        c.i64_shr_u (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("pr"),
                    i*4,
                    0,
                    c.getLocal("c")
                ));
            }
        }

        function _buildAdd1() {
            const f = module.addFunction(prefix+"__add1");
            f.addParam("x", "i32");
            f.addParam("y", "i64");
            f.addLocal("c", "i64");
            f.addLocal("px", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal("px", c.getLocal("x")));

            f.addCode(c.setLocal(
                "c",
                c.i64_add(
                    c.i64_load32_u(c.getLocal("px"), 0, 0),
                    c.getLocal("y")
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("px"),
                0,
                0,
                c.getLocal("c"),
            ));

            f.addCode(c.setLocal(
                "c",
                c.i64_shr_u(
                    c.getLocal("c"),
                    c.i64_const(32)
                )
            ));

            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.i64_eqz(c.getLocal("c"))
                ),
                c.setLocal(
                    "px",
                    c.i32_add(
                        c.getLocal("px"),
                        c.i32_const(4)
                    )
                ),

                c.setLocal(
                    "c",
                    c.i64_add(
                        c.i64_load32_u(c.getLocal("px"), 0, 0),
                        c.getLocal("c")
                    )
                ),

                c.i64_store32(
                    c.getLocal("px"),
                    0,
                    0,
                    c.getLocal("c"),
                ),

                c.setLocal(
                    "c",
                    c.i64_shr_u(
                        c.getLocal("c"),
                        c.i64_const(32)
                    )
                ),

                c.br(0)
            )));
        }


        function buildDiv() {
            _buildMul1();
            _buildAdd1();

            const f = module.addFunction(prefix+"_div");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("c", "i32");
            f.addParam("r", "i32");
            f.addLocal("rr", "i32");
            f.addLocal("cc", "i32");
            f.addLocal("eX", "i32");
            f.addLocal("eY", "i32");
            f.addLocal("sy", "i64");
            f.addLocal("sx", "i64");
            f.addLocal("ec", "i32");

            const c = f.getCodeBuilder();

            const Y = c.i32_const(module.alloc(n8));
            const Caux = c.i32_const(module.alloc(n8));
            const Raux = c.i32_const(module.alloc(n8));
            const C = c.getLocal("cc");
            const R = c.getLocal("rr");
            const pr1 = module.alloc(n8*2);
            const R1 = c.i32_const(pr1);
            const R2 = c.i32_const(pr1+n8);

            // Ic c is 0 then store it in an auxiliary buffer
            f.addCode(c.if(
                c.getLocal("c"),
                c.setLocal("cc", c.getLocal("c")),
                c.setLocal("cc", Caux)
            ));

            // Ic r is 0 then store it in an auxiliary buffer
            f.addCode(c.if(
                c.getLocal("r"),
                c.setLocal("rr", c.getLocal("r")),
                c.setLocal("rr", Raux)
            ));

            // Copy
            f.addCode(c.call(prefix + "_copy", c.getLocal("x"), R));
            f.addCode(c.call(prefix + "_copy", c.getLocal("y"), Y));
            f.addCode(c.call(prefix + "_zero", C));
            f.addCode(c.call(prefix + "_zero", R1));


            f.addCode(c.setLocal("eX", c.i32_const(n8-1)));
            f.addCode(c.setLocal("eY", c.i32_const(n8-1)));

            // while (eY>3)&&(Y[eY]==0) ey--;
            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.i32_or(
                        c.i32_load8_u(
                            c.i32_add(Y , c.getLocal("eY")),
                            0,
                            0
                        ),
                        c.i32_eq(
                            c.getLocal("eY"),
                            c.i32_const(3)
                        )
                    )
                ),
                c.setLocal("eY", c.i32_sub(c.getLocal("eY"), c.i32_const(1))),
                c.br(0)
            )));

            f.addCode(
                c.setLocal(
                    "sy",
                    c.i64_add(
                        c.i64_load32_u(
                            c.i32_sub(
                                c.i32_add( Y, c.getLocal("eY")),
                                c.i32_const(3)
                            ),
                            0,
                            0
                        ),
                        c.i64_const(1)
                    )
                )
            );

            // Force a divide by 0 if quotien is 0
            f.addCode(
                c.if(
                    c.i64_eq(
                        c.getLocal("sy"),
                        c.i64_const(1)
                    ),
                    c.drop(c.i64_div_u(c.i64_const(0), c.i64_const(0)))
                )
            );

            f.addCode(c.block(c.loop(

                // while (eX>7)&&(Y[eX]==0) ex--;
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_or(
                            c.i32_load8_u(
                                c.i32_add(R , c.getLocal("eX")),
                                0,
                                0
                            ),
                            c.i32_eq(
                                c.getLocal("eX"),
                                c.i32_const(7)
                            )
                        )
                    ),
                    c.setLocal("eX", c.i32_sub(c.getLocal("eX"), c.i32_const(1))),
                    c.br(0)
                )),

                c.setLocal(
                    "sx",
                    c.i64_load(
                        c.i32_sub(
                            c.i32_add( R, c.getLocal("eX")),
                            c.i32_const(7)
                        ),
                        0,
                        0
                    )
                ),

                c.setLocal(
                    "sx",
                    c.i64_div_u(
                        c.getLocal("sx"),
                        c.getLocal("sy")
                    )
                ),
                c.setLocal(
                    "ec",
                    c.i32_sub(
                        c.i32_sub(
                            c.getLocal("eX"),
                            c.getLocal("eY")
                        ),
                        c.i32_const(4)
                    )
                ),

                // While greater than 32 bits or ec is neg, shr and inc exp
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_and(
                            c.i64_eqz(
                                c.i64_and(
                                    c.getLocal("sx"),
                                    c.i64_const("0xFFFFFFFF00000000")
                                )
                            ),
                            c.i32_ge_s(
                                c.getLocal("ec"),
                                c.i32_const(0)
                            )
                        )
                    ),

                    c.setLocal(
                        "sx",
                        c.i64_shr_u(
                            c.getLocal("sx"),
                            c.i64_const(8)
                        )
                    ),

                    c.setLocal(
                        "ec",
                        c.i32_add(
                            c.getLocal("ec"),
                            c.i32_const(1)
                        )
                    ),
                    c.br(0)
                )),

                c.if(
                    c.i64_eqz(c.getLocal("sx")),
                    [
                        ...c.br_if(
                            2,
                            c.i32_eqz(c.call(prefix + "_gte", R, Y))
                        ),
                        ...c.setLocal("sx", c.i64_const(1)),
                        ...c.setLocal("ec", c.i32_const(0))
                    ]
                ),

                c.call(prefix + "__mul1", Y, c.getLocal("sx"), R2),
                c.drop(c.call(
                    prefix + "_sub",
                    R,
                    c.i32_sub(R2, c.getLocal("ec")),
                    R
                )),
                c.call(
                    prefix + "__add1",
                    c.i32_add(C, c.getLocal("ec")),
                    c.getLocal("sx")
                ),
                c.br(0)
            )));
        }

        function buildInverseMod() {

            const f = module.addFunction(prefix+"_inverseMod");
            f.addParam("px", "i32");
            f.addParam("pm", "i32");
            f.addParam("pr", "i32");
            f.addLocal("t", "i32");
            f.addLocal("newt", "i32");
            f.addLocal("r", "i32");
            f.addLocal("qq", "i32");
            f.addLocal("qr", "i32");
            f.addLocal("newr", "i32");
            f.addLocal("swp", "i32");
            f.addLocal("x", "i32");
            f.addLocal("signt", "i32");
            f.addLocal("signnewt", "i32");
            f.addLocal("signx", "i32");

            const c = f.getCodeBuilder();

            const aux1 = c.i32_const(module.alloc(n8));
            const aux2 = c.i32_const(module.alloc(n8));
            const aux3 = c.i32_const(module.alloc(n8));
            const aux4 = c.i32_const(module.alloc(n8));
            const aux5 = c.i32_const(module.alloc(n8));
            const aux6 = c.i32_const(module.alloc(n8));
            const mulBuff = c.i32_const(module.alloc(n8*2));
            const aux7 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.setLocal("t", aux1),
                c.call(prefix + "_zero", aux1),
                c.setLocal("signt", c.i32_const(0)),
            );

            f.addCode(
                c.setLocal("r", aux2),
                c.call(prefix + "_copy", c.getLocal("pm"), aux2)
            );

            f.addCode(
                c.setLocal("newt", aux3),
                c.call(prefix + "_one", aux3),
                c.setLocal("signnewt", c.i32_const(0)),
            );

            f.addCode(
                c.setLocal("newr", aux4),
                c.call(prefix + "_copy", c.getLocal("px"), aux4)
            );




            f.addCode(c.setLocal("qq", aux5));
            f.addCode(c.setLocal("qr", aux6));
            f.addCode(c.setLocal("x", aux7));

            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.call(prefix + "_isZero", c.getLocal("newr") )
                ),
                c.call(prefix + "_div", c.getLocal("r"), c.getLocal("newr"), c.getLocal("qq"), c.getLocal("qr")),

                c.call(prefix + "_mul", c.getLocal("qq"), c.getLocal("newt"), mulBuff),

                c.if(
                    c.getLocal("signt"),
                    c.if(
                        c.getLocal("signnewt"),
                        c.if (
                            c.call(prefix + "_gte", mulBuff, c.getLocal("t")),
                            [
                                ...c.drop(c.call(prefix + "_sub", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(0))
                            ],
                            [
                                ...c.drop(c.call(prefix + "_sub", c.getLocal("t"), mulBuff, c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(1))
                            ],
                        ),
                        [
                            ...c.drop(c.call(prefix + "_add", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                            ...c.setLocal("signx", c.i32_const(1))
                        ]
                    ),
                    c.if(
                        c.getLocal("signnewt"),
                        [
                            ...c.drop(c.call(prefix + "_add", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                            ...c.setLocal("signx", c.i32_const(0))
                        ],
                        c.if (
                            c.call(prefix + "_gte", c.getLocal("t"), mulBuff),
                            [
                                ...c.drop(c.call(prefix + "_sub", c.getLocal("t"), mulBuff, c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(0))
                            ],
                            [
                                ...c.drop(c.call(prefix + "_sub", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(1))
                            ]
                        )
                    )
                ),

                c.setLocal("swp", c.getLocal("t")),
                c.setLocal("t", c.getLocal("newt")),
                c.setLocal("newt", c.getLocal("x")),
                c.setLocal("x", c.getLocal("swp")),

                c.setLocal("signt", c.getLocal("signnewt")),
                c.setLocal("signnewt", c.getLocal("signx")),

                c.setLocal("swp", c.getLocal("r")),
                c.setLocal("r", c.getLocal("newr")),
                c.setLocal("newr", c.getLocal("qr")),
                c.setLocal("qr", c.getLocal("swp")),

                c.br(0)
            )));

            f.addCode(c.if(
                c.getLocal("signt"),
                c.drop(c.call(prefix + "_sub", c.getLocal("pm"), c.getLocal("t"), c.getLocal("pr"))),
                c.call(prefix + "_copy", c.getLocal("t"), c.getLocal("pr"))
            ));
        }


        buildCopy();
        buildZero();
        buildIsZero();
        buildOne();
        buildEq();
        buildGte();
        buildAdd();
        buildSub();
        buildMul();
        buildSquare();
        buildSquareOld();
        buildDiv();
        buildInverseMod();
        module.exportFunction(prefix+"_copy");
        module.exportFunction(prefix+"_zero");
        module.exportFunction(prefix+"_one");
        module.exportFunction(prefix+"_isZero");
        module.exportFunction(prefix+"_eq");
        module.exportFunction(prefix+"_gte");
        module.exportFunction(prefix+"_add");
        module.exportFunction(prefix+"_sub");
        module.exportFunction(prefix+"_mul");
        module.exportFunction(prefix+"_square");
        module.exportFunction(prefix+"_squareOld");
        module.exportFunction(prefix+"_div");
        module.exportFunction(prefix+"_inverseMod");

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */
    var build_timesscalar = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {

        const f = module.addFunction(fnName);
        f.addParam("base", "i32");
        f.addParam("scalar", "i32");
        f.addParam("scalarLength", "i32");
        f.addParam("r", "i32");
        f.addLocal("i", "i32");
        f.addLocal("b", "i32");

        const c = f.getCodeBuilder();

        const aux = c.i32_const(module.alloc(elementLen));

        f.addCode(
            c.if(
                c.i32_eqz(c.getLocal("scalarLength")),
                [
                    ...c.call(opInit, c.getLocal("r")),
                    ...c.ret([])
                ]
            )
        );
        f.addCode(c.call(opCopy, c.getLocal("base"), aux));
        f.addCode(c.call(opInit, c.getLocal("r")));
        f.addCode(c.setLocal("i", c.getLocal("scalarLength")));
        f.addCode(c.block(c.loop(
            c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),

            c.setLocal(
                "b",
                c.i32_load8_u(
                    c.i32_add(
                        c.getLocal("scalar"),
                        c.getLocal("i")
                    )
                )
            ),
            ...innerLoop(),
            c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
            c.br(0)
        )));


        function innerLoop() {
            const code = [];
            for (let i=0; i<8; i++) {
                code.push(
                    ...c.call(opAA, c.getLocal("r"), c.getLocal("r")),
                    ...c.if(
                        c.i32_ge_u( c.getLocal("b"), c.i32_const(0x80 >> i)),
                        [
                            ...c.setLocal(
                                "b",
                                c.i32_sub(
                                    c.getLocal("b"),
                                    c.i32_const(0x80 >> i)
                                )
                            ),
                            ...c.call(opAB, c.getLocal("r"),aux, c.getLocal("r"))
                        ]
                    )
                );
            }
            return code;
        }

    };

    var build_batchinverse = buildBatchInverse;

    function buildBatchInverse(module, prefix) {


        const n8 = module.modules[prefix].n64*8;

        const f = module.addFunction(prefix+"_batchInverse");
        f.addParam("pIn", "i32");
        f.addParam("inStep", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addParam("outStep", "i32");
        f.addLocal("itAux", "i32");
        f.addLocal("itIn", "i32");
        f.addLocal("itOut","i32");
        f.addLocal("i","i32");

        const c = f.getCodeBuilder();

        const AUX = c.i32_const(module.alloc(n8));


        // Alloc Working space for accumulated umltiplications
        f.addCode(
            c.setLocal("itAux", c.i32_load( c.i32_const(0) )),
            c.i32_store(
                c.i32_const(0),
                c.i32_add(
                    c.getLocal("itAux"),
                    c.i32_mul(
                        c.i32_add(
                            c.getLocal("n"),
                            c.i32_const(1)
                        ),
                        c.i32_const(n8)
                    )
                )
            )
        );

        f.addCode(

            // aux[0] = a;
            c.call(prefix+"_one", c.getLocal("itAux")),
            // for (i=0;i<n;i++) aux[i] = aux[i-1]*in[i]
            c.setLocal("itIn", c.getLocal("pIn")),
            c.setLocal("itAux", c.i32_add(c.getLocal("itAux"), c.i32_const(n8))),
            c.setLocal("i", c.i32_const(0)),

            c.block(c.loop(
                c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),
                c.if(
                    c.call(prefix+"_isZero", c.getLocal("itIn")),
                    c.call(
                        prefix + "_copy",
                        c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        c.getLocal("itAux")
                    ),
                    c.call(
                        prefix+"_mul",
                        c.getLocal("itIn"),
                        c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        c.getLocal("itAux")
                    )
                ),
                c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.getLocal("inStep"))),
                c.setLocal("itAux", c.i32_add(c.getLocal("itAux"), c.i32_const(n8))),
                c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            )),

            // point to the last
            c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.getLocal("inStep"))),
            c.setLocal("itAux", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8))),
            // itOut = pOut + (n-1)*stepOut   // Point to the last
            c.setLocal(
                "itOut",
                c.i32_add(
                    c.getLocal("pOut"),
                    c.i32_mul(
                        c.i32_sub(c.getLocal("n"), c.i32_const(1)),
                        c.getLocal("outStep"),
                    )
                )
            ),

            // aux[n-1] = 1/aux[n-1]
            c.call(prefix+"_inverse", c.getLocal("itAux"), c.getLocal("itAux") ),

            c.block(c.loop(
                c.br_if(1, c.i32_eqz( c.getLocal("i"))),
                c.if(
                    c.call(prefix+"_isZero", c.getLocal("itIn")),
                    [
                        ...c.call(
                            prefix + "_copy",
                            c.getLocal("itAux"),
                            c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        ),
                        ...c.call(
                            prefix + "_zero",
                            c.getLocal("itOut")
                        )
                    ],[
                        ...c.call(prefix + "_copy", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)), AUX),
                        ...c.call(
                            prefix+"_mul",
                            c.getLocal("itAux"),
                            c.getLocal("itIn"),
                            c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        ),
                        ...c.call(
                            prefix+"_mul",
                            c.getLocal("itAux"),
                            AUX,
                            c.getLocal("itOut")
                        )
                    ]
                ),
                c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.getLocal("inStep"))),
                c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.getLocal("outStep"))),
                c.setLocal("itAux", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8))),
                c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            ))

        );


        // Recover Old memory
        f.addCode(
            c.i32_store(
                c.i32_const(0),
                c.getLocal("itAux")
            )
        );

    }

    var build_batchconvertion = buildBatchConvertion$1;

    function buildBatchConvertion$1(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
        if (typeof reverse === "undefined") {
            // Set the reverse in a way that allows to use the same buffer as in/out.
            if (sizeIn < sizeOut) {
                reverse = true;
            } else {
                reverse = false;
            }
        }

        const f = module.addFunction(fnName);
        f.addParam("pIn", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addLocal("i", "i32");
        f.addLocal("itIn", "i32");
        f.addLocal("itOut", "i32");

        const c = f.getCodeBuilder();

        if (reverse) {
            f.addCode(
                c.setLocal("itIn",
                    c.i32_add(
                        c.getLocal("pIn"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itOut",
                    c.i32_add(
                        c.getLocal("pOut"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeOut)
                        )
                    )
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn"), c.getLocal("itOut")),

                    c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        } else {
            f.addCode(
                c.setLocal("itIn", c.getLocal("pIn")),
                c.setLocal("itOut", c.getLocal("pOut")),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn"), c.getLocal("itOut")),

                    c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_add(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        }
    }

    var build_batchop = buildBatchConvertion;

    function buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
        if (typeof reverse === "undefined") {
            // Set the reverse in a way that allows to use the same buffer as in/out.
            if (sizeIn < sizeOut) {
                reverse = true;
            } else {
                reverse = false;
            }
        }

        const f = module.addFunction(fnName);
        f.addParam("pIn1", "i32");
        f.addParam("pIn2", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addLocal("i", "i32");
        f.addLocal("itIn1", "i32");
        f.addLocal("itIn2", "i32");
        f.addLocal("itOut", "i32");

        const c = f.getCodeBuilder();

        if (reverse) {
            f.addCode(
                c.setLocal("itIn1",
                    c.i32_add(
                        c.getLocal("pIn1"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itIn2",
                    c.i32_add(
                        c.getLocal("pIn2"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itOut",
                    c.i32_add(
                        c.getLocal("pOut"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeOut)
                        )
                    )
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn1"), c.getLocal("itIn2"), c.getLocal("itOut")),

                    c.setLocal("itIn1", c.i32_sub(c.getLocal("itIn1"), c.i32_const(sizeIn))),
                    c.setLocal("itIn2", c.i32_sub(c.getLocal("itIn2"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        } else {
            f.addCode(
                c.setLocal("itIn1", c.getLocal("pIn1")),
                c.setLocal("itIn2", c.getLocal("pIn2")),
                c.setLocal("itOut", c.getLocal("pOut")),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn1"), c.getLocal("itIn2"), c.getLocal("itOut")),

                    c.setLocal("itIn1", c.i32_add(c.getLocal("itIn1"), c.i32_const(sizeIn))),
                    c.setLocal("itIn2", c.i32_add(c.getLocal("itIn2"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_add(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        }
    }

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_f1m = function buildF1m(module, _q, _prefix, _intPrefix) {
        const q = BigInteger(_q);
        const n64 = Math.floor((q.minus(1).bitLength() - 1)/64) +1;
        const n32 = n64*2;
        const n8 = n64*8;

        const prefix = _prefix || "f1m";
        if (module.modules[prefix]) return prefix;  // already builded

        const intPrefix = build_int(module, n64, _intPrefix);
        const pq = module.alloc(n8, utils$3.bigInt2BytesLE(q, n8));

        module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).mod(q), n8));
        const pR2 = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).square().mod(q), n8));
        const pOne = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).mod(q), n8));
        const pZero = module.alloc(utils$3.bigInt2BytesLE(BigInteger.zero, n8));
        const _minusOne = q.minus(BigInteger.one);
        const _e = _minusOne.shiftRight(1); // e = (p-1)/2
        const pe = module.alloc(n8, utils$3.bigInt2BytesLE(_e, n8));

        const _ePlusOne = _e.add(BigInteger.one); // e = (p-1)/2
        const pePlusOne = module.alloc(n8, utils$3.bigInt2BytesLE(_ePlusOne, n8));

        module.modules[prefix] = {
            pq: pq,
            pR2: pR2,
            n64: n64,
            q: q,
            pOne: pOne,
            pZero: pZero,
            pePlusOne: pePlusOne
        };

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(intPrefix + "_copy", c.i32_const(pOne), c.getLocal("pr")));
        }

        function buildAdd() {
            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.call(intPrefix+"_add", c.getLocal("x"),  c.getLocal("y"), c.getLocal("r")),
                    c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    c.if(
                        c.call(intPrefix+"_gte", c.getLocal("r"), c.i32_const(pq)  ),
                        c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    )
                )
            );
        }

        function buildSub() {
            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.call(intPrefix+"_sub", c.getLocal("x"),  c.getLocal("y"), c.getLocal("r")),
                    c.drop(c.call(intPrefix+"_add", c.getLocal("r"),  c.i32_const(pq), c.getLocal("r")))
                )
            );
        }

        function buildNeg() {
            const f = module.addFunction(prefix+"_neg");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(prefix + "_sub", c.i32_const(pZero), c.getLocal("x"), c.getLocal("r"))
            );
        }


        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.call(intPrefix + "_gte", AUX, c.i32_const(pePlusOne) )
            );
        }


    /*
        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.i32_and(
                    c.i32_load(AUX),
                    c.i32_const(1)
                )
            );
        }
    */

        function buildSign() {
            const f = module.addFunction(prefix+"_sign");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if (
                    c.call(intPrefix + "_isZero", c.getLocal("x")),
                    c.ret(c.i32_const(0))
                ),
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.if(
                    c.call(intPrefix + "_gte", AUX, c.i32_const(pePlusOne)),
                    c.ret(c.i32_const(-1))
                ),
                c.ret(c.i32_const(1))
            );
        }


        function buildMReduct() {
            const carries = module.alloc(n32*n32*8);

            const f = module.addFunction(prefix+"_mReduct");
            f.addParam("t", "i32");
            f.addParam("r", "i32");
            f.addLocal("np32", "i64");
            f.addLocal("c", "i64");
            f.addLocal("m", "i64");

            const c = f.getCodeBuilder();

            const np32 = BigInteger("100000000",16).minus( q.modInv(BigInteger("100000000",16))).toJSNumber();

            f.addCode(c.setLocal("np32", c.i64_const(np32)));

            for (let i=0; i<n32; i++) {
                f.addCode(c.setLocal("c", c.i64_const(0)));

                f.addCode(
                    c.setLocal(
                        "m",
                        c.i64_and(
