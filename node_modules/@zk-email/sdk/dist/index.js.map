{"version":3,"sources":["../src/chain/index.ts","../src/types/proof.ts","../src/auth.ts","../src/utils.ts","../src/proof.ts","../src/relayerUtils.ts","../src/prover.ts","../src/types/blueprint.ts","../src/blueprint.ts","../src/user.ts","../src/index.ts"],"names":["getVerifierContractAbi","signalLength","verifyProofOnChain","proof","client","createPublicClient","base","http","proofData","args","output","error","ProofStatus","GITHUB_CLIENT_ID","getLoginWithGithubUrl","callbackUrl","githubClientId","state","getTokenFromAuth","auth","token","err","PUBLIC_SDK_KEY","relayerUtilsResolver","relayerUtilsInit","resolve","init","post","url","data","authToken","request","response","body","patch","get","queryParams","fullUrl","searchParams","key","value","del","startJsonFileDownload","json","name","blob","link","Proof","_Proof","blueprint","props","Blueprint","sinceLastChecked","newProof","id","baseUrl","proofResponse","proofProps","parseEmail","eml","parseEmailUtils","testBlueprint","revealPrivate","parsedEmail","splitEmail","header","checkInputLengths","dcr","testDecomposedRegex","encoder","headerData","sha256Pad","bodyData","bodyShaLength","maxShaBytes","decomposedRegex","inputDecomposedRegex","inputStr","maxLength","privateResult","extractSubstr","generateProofInputs","decomposedRegexes","externalInputs","params","internalParams","decomposedRegexesCleaned","p","inputs","generateCircuitInputsWithDecomposedRegexesAndExternalInputs","Prover","options","blueprintId","input","requestData","acc","ZkFramework","Status","_Blueprint","blueprintResponse","blueprintProps","slug","parts","version","regex","part","newProps","requestOptions","status","urls","cloned","stars","getStarredBlueprints","slugs","src_default","sdkOptions"],"mappings":"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","file":"index.js","sourcesContent":["import { createPublicClient, http, Account, PublicClient } from \"viem\";\nimport { base } from \"viem/chains\";\nimport { Proof } from \"../proof\";\nimport { ProofData } from \"../types\";\n\nfunction getVerifierContractAbi(signalLength: number) {\n  return [\n    {\n      type: \"function\",\n      name: \"verify\",\n      inputs: [\n        {\n          name: \"a\",\n          type: \"uint256[2]\",\n          internalType: \"uint256[2]\",\n        },\n        {\n          name: \"b\",\n          type: \"uint256[2][2]\",\n          internalType: \"uint256[2][2]\",\n        },\n        {\n          name: \"c\",\n          type: \"uint256[2]\",\n          internalType: \"uint256[2]\",\n        },\n        {\n          name: \"signals\",\n          type: `uint256[${signalLength}]`,\n          internalType: `uint256[${signalLength}]`,\n        },\n      ],\n      outputs: [],\n      stateMutability: \"view\",\n    },\n  ];\n}\n\nexport async function verifyProofOnChain(proof: Proof) {\n  if (\n    !proof.blueprint.props.verifierContract?.chain ||\n    !proof.blueprint.props.verifierContract?.address\n  ) {\n    throw new Error(\"No verifier contract deployed for the blueprint of this proof\");\n  }\n\n  if (!proof.props.proofData || !proof.props.publicOutputs) {\n    throw new Error(\"No proof data generated yet\");\n  }\n\n  // Create public client for Base Sepolia\n  const client = createPublicClient({\n    chain: base,\n    transport: http(\"https://sepolia.base.org\"),\n  });\n\n  // TODO: this is parsed when getting the data from the backend,\n  // add propper typing from the start\n  // @ts-ignore\n  const proofData = proof.props.proofData as ProofData;\n\n  const args = [\n    [BigInt(proofData.pi_a[0]), BigInt(proofData.pi_a[1])],\n    [\n      [\n        BigInt(proofData.pi_b[0][1]), // swap coordinates\n        BigInt(proofData.pi_b[0][0]),\n      ],\n      [\n        BigInt(proofData.pi_b[1][1]), // swap coordinates\n        BigInt(proofData.pi_b[1][0]),\n      ],\n    ],\n    [BigInt(proofData.pi_c[0]), BigInt(proofData.pi_c[1])],\n    proof.props.publicOutputs.map((output) => BigInt(output)),\n  ] as const;\n\n  console.log(\"Call data to verify: \", args);\n  console.log(\"contract address: \", proof.blueprint.props.verifierContract.address);\n\n  try {\n    await client.readContract({\n      address: proof.blueprint.props.verifierContract.address as `0x${string}`,\n      abi: getVerifierContractAbi(proof.props.publicOutputs.length),\n      functionName: \"verify\",\n      args,\n    });\n  } catch (error) {\n    console.error(\"Error verifying proof on chain:\", error);\n    throw error;\n  }\n}\n","import { Dir } from \"fs\";\nimport { ServerDate } from \"./blueprint\";\n\n// According to protobufs\nexport enum ProofStatus {\n  None,\n  InProgress,\n  Done,\n  Failed,\n}\n\nexport type ProofProps = {\n  id: string;\n  blueprintId: string;\n  input: string;\n  proofData?: string;\n  publicData?: string;\n  publicOutputs?: string[];\n  externalInputs?: string;\n  status?: ProofStatus;\n  startedAt?: Date;\n  provedAt?: Date;\n};\n\nexport type ProofResponse = {\n  id: string;\n  blueprint_id: string;\n  input: string;\n  proof?: string;\n  public?: string;\n  external_inputs?: string;\n  public_outputs?: string[];\n  started_at: ServerDate;\n  proved_at?: ServerDate;\n  status: number;\n};\n\nexport type ProofRequest = {\n  blueprint_id: string;\n  input: any;\n  external_inputs: any;\n};\n\nexport type GenerateProofInputsParams = {\n  emailHeaderMaxLength: number;\n  emailBodyMaxLength: number;\n  ignoreBodyHashCheck: boolean;\n  removeSoftLinebreaks: boolean;\n  shaPrecomputeSelector?: string;\n};\n\nexport type GenerateProofInputsParamsInternal = {\n  maxHeaderLength: number;\n  maxBodyLength: number;\n  ignoreBodyHashCheck: boolean;\n  removeSoftLinesBreaks: boolean;\n  shaPrecomputeSelector?: string;\n};\n\nexport type ProofData = {\n  pi_a: [string, string, string];\n  pi_b: [[string, string], [string, string], [string, string]];\n  pi_c: [string, string, string];\n  protocol: string;\n};\n","import { Auth } from \"./types/auth\";\n\n// prod\nconst GITHUB_CLIENT_ID = \"Ov23li0KABFCUsxBEQkn\";\n\n// const GITHUB_CLIENT_ID = \"Ov23liUVyAeZK1bxoAkh\";\n\nexport function getLoginWithGithubUrl(\n  callbackUrl: string,\n  githubClientId = GITHUB_CLIENT_ID\n): string {\n  const state = encodeURIComponent(callbackUrl);\n  return `https://github.com/login/oauth/authorize?client_id=${githubClientId}&scope=user:email&state=${state}`;\n}\n\nexport async function getTokenFromAuth(auth: Auth): Promise<string> {\n  try {\n    let token = await auth.getToken();\n\n    if (!token) {\n      await auth.onTokenExpired();\n      token = await auth.getToken();\n    }\n\n    if (!token) {\n      throw new Error(\"Failed to get new token\");\n    }\n\n    return `Bearer ${token}`;\n  } catch (err) {\n    console.error(\"Failed to get token from auth\");\n    throw err;\n  }\n}\n","const PUBLIC_SDK_KEY = \"pk_live_51NXwT8cHf0vYAjQK9LzB3pM6R8gWx2F\";\n\nimport {\n  Blueprint,\n  DecomposedRegex,\n  DecomposedRegexJson,\n  DecomposedRegexPart,\n  DecomposedRegexPartJson,\n} from \"./blueprint\";\nimport { Auth } from \"./types/auth\";\nimport { getTokenFromAuth } from \"./auth\";\nimport {\n  BlueprintProps,\n  GenerateProofInputsParams,\n  GenerateProofInputsParamsInternal,\n  ParsedEmail,\n  ExternalInputInput,\n} from \"./types\";\n\nimport {\n  init,\n  parseEmail as parseEmailUtils,\n  sha256Pad,\n  extractSubstr,\n  generateCircuitInputsWithDecomposedRegexesAndExternalInputs,\n} from \"@zk-email/relayer-utils\";\n\nlet relayerUtilsResolver: (value: any) => void;\nconst relayerUtilsInit: Promise<void> = new Promise((resolve) => {\n  relayerUtilsResolver = resolve;\n});\n\ninit()\n  .then(() => {\n    relayerUtilsResolver(null);\n  })\n  .catch((err) => {\n    console.log(\"Failed to initialize wasm for relayer-utils: \", err);\n  });\n\nexport async function post<T>(url: string, data?: object | null, auth?: Auth): Promise<T> {\n  let authToken: string | null = null;\n  if (auth) {\n    try {\n      authToken = await getTokenFromAuth(auth);\n    } catch (err) {\n      console.error(\"Could not get token from auth\", err);\n    }\n  }\n\n  try {\n    const request: RequestInit = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": PUBLIC_SDK_KEY,\n        ...(!authToken ? {} : { Authorization: authToken }),\n      },\n    };\n\n    if (data) {\n      request.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, request);\n\n    const body = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}, message: ${body}`);\n    }\n\n    return body;\n  } catch (error) {\n    // TODO: Handle token expired\n    console.error(\"POST Error:\", error);\n    throw error;\n  }\n}\n\nexport async function patch<T>(url: string, data?: object | null, auth?: Auth): Promise<T> {\n  let authToken: string | null = null;\n  if (auth) {\n    try {\n      authToken = await getTokenFromAuth(auth);\n    } catch (err) {\n      console.warn(\"Could not get token from auth\", err);\n    }\n  }\n\n  try {\n    const request: RequestInit = {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": PUBLIC_SDK_KEY,\n        ...(!authToken ? {} : { Authorization: authToken }),\n      },\n    };\n\n    if (data) {\n      request.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, request);\n\n    const body = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}, message: ${body}`);\n    }\n\n    return body;\n  } catch (error) {\n    console.error(\"PATCH Error:\", error);\n    throw error;\n  }\n}\n\nexport async function get<T>(url: string, queryParams?: object | null, auth?: Auth): Promise<T> {\n  let authToken: string | null = null;\n  if (auth) {\n    try {\n      authToken = await getTokenFromAuth(auth);\n    } catch (err) {\n      console.warn(\"Could not get token from auth\", err);\n    }\n  }\n\n  try {\n    let fullUrl = url;\n    if (queryParams) {\n      const searchParams = new URLSearchParams();\n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value) {\n          searchParams.append(key, String(value));\n        }\n      });\n      if (searchParams.size > 0) {\n        fullUrl += `?${searchParams.toString()}`;\n      }\n    }\n\n    const response = await fetch(fullUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": PUBLIC_SDK_KEY,\n        ...(!authToken ? {} : { Authorization: authToken }),\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"GET Error:\", error);\n    throw error;\n  }\n}\n\nexport async function del<T>(url: string, data?: object | null, auth?: Auth): Promise<T> {\n  let authToken: string | null = null;\n  if (auth) {\n    try {\n      authToken = await getTokenFromAuth(auth);\n    } catch (err) {\n      console.error(\"Could not get token from auth\", err);\n    }\n  }\n\n  try {\n    const request: RequestInit = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": PUBLIC_SDK_KEY,\n        ...(!authToken ? {} : { Authorization: authToken }),\n      },\n    };\n\n    if (data) {\n      request.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, request);\n\n    const body = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}, message: ${body}`);\n    }\n\n    return body;\n  } catch (error) {\n    // TODO: Handle token expired\n    console.error(\"DELETE Error:\", error);\n    throw error;\n  }\n}\n\nexport function startJsonFileDownload(json: string, name = \"data\") {\n  if (!window && !document) {\n    throw Error(\"startFilesDownload can only be used in a browser\");\n  }\n\n  const blob = new Blob([json], { type: \"application/json\" });\n  const url = URL.createObjectURL(blob);\n\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = `${name}.json`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n","import { Blueprint, Status } from \"./blueprint\";\nimport { verifyProofOnChain } from \"./chain\";\nimport { ProofProps, ProofResponse, ProofStatus } from \"./types/proof\";\nimport { get } from \"./utils\";\n\n/**\n * A generated proof. You get get proof data and verify proofs on chain.\n */\nexport class Proof {\n  blueprint: Blueprint;\n  props: ProofProps;\n  private lastCheckedStatus: Date | null = null;\n\n  constructor(blueprint: Blueprint, props: ProofProps) {\n    if (!(blueprint instanceof Blueprint)) {\n      throw new Error(\"Invalid blueprint: must be an instance of Blueprint class\");\n    }\n    this.blueprint = blueprint;\n\n    if (!props?.id) {\n      throw new Error(\"A proof must have an id\");\n    }\n\n    this.props = {\n      status: ProofStatus.InProgress,\n      ...props,\n    };\n  }\n\n  getId(): string {\n    return this.props.id;\n  }\n\n  /**\n   * Returns a download link for the files of the proof.\n   * @returns The the url to download a zip of the proof files.\n   */\n  async getProofDataDownloadLink(): Promise<string> {\n    if (this.props.status !== ProofStatus.Done) {\n      throw new Error(\"The proving is not done yet.\");\n    }\n\n    let response: { url: string };\n    try {\n      response = await get<{ url: string }>(\n        `${this.blueprint.baseUrl}/proof/files/${this.props.id}`\n      );\n    } catch (err) {\n      console.error(\"Failed calling GET on /proof/files/:id in getProofDataDownloadLink: \", err);\n      throw err;\n    }\n\n    return response.url;\n  }\n\n  async startFilesDownload() {\n    if (!window && !document) {\n      throw Error(\"startFilesDownload can only be used in a browser\");\n    }\n\n    let url: string;\n    try {\n      url = await this.getProofDataDownloadLink();\n    } catch (err) {\n      console.error(\"Failed to start download of ZKeys: \", err);\n      throw err;\n    }\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"proof_files.zip\"; // Set the desired filename\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  /**\n   * Checks the status of proof.\n   * checkStatus can be used in a while(await checkStatus()) loop, since it will wait a fixed\n   * amount of time before the second time you call it.\n   * @returns A promise with the Status.\n   */\n  async checkStatus(): Promise<ProofStatus> {\n    if (this.props.status === ProofStatus.Done) {\n      return this.props.status;\n    }\n\n    // Waits for a fixed period of time before you can call checkStatus again\n    // This enables you to put checkStatus in a while(await checkStatu()) loop\n    if (!this.lastCheckedStatus) {\n      this.lastCheckedStatus = new Date();\n    } else {\n      const waitTime = 500;\n      const sinceLastChecked = new Date().getTime() - this.lastCheckedStatus.getTime();\n      if (sinceLastChecked < waitTime) {\n        await new Promise((r) => setTimeout(r, waitTime - sinceLastChecked));\n      }\n    }\n\n    // Check status\n    let response: { status: ProofStatus };\n    try {\n      response = await get<{ status: ProofStatus }>(\n        `${this.blueprint.baseUrl}/proof/status/${this.props.id}`\n      );\n    } catch (err) {\n      console.error(\"Failed calling GET /blueprint/status in getStatus(): \", err);\n      throw err;\n    }\n\n    // Update the proof to its new data\n    if (\n      [ProofStatus.InProgress, ProofStatus.Done].includes(this.props.status!) &&\n      this.props.status !== response.status\n    ) {\n      const newProof = await Proof.getProofById(this.props.id, this.blueprint.baseUrl);\n      this.props = newProof.props;\n      return this.props.status!;\n    }\n\n    this.props.status = response.status;\n    return response.status;\n  }\n\n  async waitForCompletion(): Promise<ProofStatus> {\n    while ((await this.checkStatus()) === ProofStatus.InProgress) {}\n    return this.props.status!;\n  }\n\n  /**\n   * Verifies the proof on chain using the verifier contract defined in the blueprint.\n   * Will throw an error if it cannot verify the proof. If the function call succeeds,\n   * the proof was validated.\n   */\n  async verifyOnChain() {\n    await verifyProofOnChain(this);\n  }\n\n  /**\n   * Generates call data for the proof that can be used to verify the proof on chain.\n   */\n  async createCallData() {\n    if (!this.props.proofData || !this.props.publicOutputs) {\n      throw new Error(\"No proof data generated yet\");\n    }\n\n    // TODO: this is parsed when getting the data from the backend,\n    // add propper typing from the start\n    // @ts-ignore\n    const proofData = this.props.proofData as ProofData;\n\n    return [\n      [BigInt(proofData.pi_a[0]), BigInt(proofData.pi_a[1])],\n      [\n        [\n          BigInt(proofData.pi_b[0][1]), // swap coordinates\n          BigInt(proofData.pi_b[0][0]),\n        ],\n        [\n          BigInt(proofData.pi_b[1][1]), // swap coordinates\n          BigInt(proofData.pi_b[1][0]),\n        ],\n      ],\n      [BigInt(proofData.pi_c[0]), BigInt(proofData.pi_c[1])],\n      this.props.publicOutputs.map((output) => BigInt(output)),\n    ];\n  }\n\n  /**\n   * Fetches an existing Proof from the database.\n   * @param id - Id of the Proof.\n   * @returns A promise that resolves to a new instance of Proof.\n   */\n  public static async getProofById(id: string, baseUrl: string): Promise<Proof> {\n    let proofResponse: ProofResponse;\n    try {\n      proofResponse = await get<ProofResponse>(`${baseUrl}/proof/${id}`);\n    } catch (err) {\n      console.error(\"Failed calling /proof/:id in getProofById: \", err);\n      throw err;\n    }\n\n    const proofProps = this.responseToProofProps(proofResponse);\n    const blueprint = await Blueprint.getBlueprintById(proofResponse.blueprint_id, baseUrl);\n\n    return new Proof(blueprint, proofProps);\n  }\n\n  public static responseToProofProps(response: ProofResponse): ProofProps {\n    const props: ProofProps = {\n      id: response.id,\n      blueprintId: response.blueprint_id,\n      status: response.status as ProofStatus,\n      input: response.input,\n      proofData: response.proof,\n      publicData: response.public,\n      publicOutputs: response.public_outputs,\n      externalInputs: response.external_inputs,\n      startedAt: new Date(response.started_at.seconds * 1000),\n      provedAt: response.proved_at ? new Date(response.proved_at.seconds * 1000) : undefined,\n    };\n    return props;\n  }\n\n  /**\n   * @returns The public data and proof data.\n   */\n  getProofData(): {\n    proofData: string;\n    publicData: string;\n    publicOutputs: string[];\n    externalInputs: string;\n  } {\n    if (this.props.status !== ProofStatus.Done) {\n      throw new Error(\"Cannot get proof data, proof is not Done\");\n    }\n    return {\n      proofData: this.props.proofData!,\n      publicData: this.props.publicData!,\n      publicOutputs: this.props.publicOutputs!,\n      externalInputs: this.props.externalInputs!,\n    };\n  }\n}\n","import {\n  DecomposedRegex,\n  DecomposedRegexJson,\n  DecomposedRegexPart,\n  DecomposedRegexPartJson,\n} from \"./blueprint\";\nimport {\n  BlueprintProps,\n  GenerateProofInputsParams,\n  GenerateProofInputsParamsInternal,\n  ParsedEmail,\n  ExternalInputInput,\n} from \"./types\";\nimport {\n  init,\n  parseEmail as parseEmailUtils,\n  sha256Pad,\n  extractSubstr,\n  generateCircuitInputsWithDecomposedRegexesAndExternalInputs,\n} from \"@zk-email/relayer-utils\";\n\nlet relayerUtilsResolver: (value: any) => void;\nconst relayerUtilsInit: Promise<void> = new Promise((resolve) => {\n  relayerUtilsResolver = resolve;\n});\n\ninit()\n  .then(() => {\n    relayerUtilsResolver(null);\n  })\n  .catch((err) => {\n    console.log(\"Failed to initialize wasm for relayer-utils: \", err);\n  });\n\nexport async function parseEmail(eml: string): Promise<ParsedEmail> {\n  try {\n    await relayerUtilsInit;\n    const parsedEmail = await parseEmailUtils(eml);\n    return parsedEmail as ParsedEmail;\n  } catch (err) {\n    console.error(\"Failed to parse email: \", err);\n    throw err;\n  }\n}\n\n// TODO: move out functionality to testDecomposedRegex so it can used seperately\nexport async function testBlueprint(\n  eml: string,\n  blueprint: BlueprintProps,\n  revealPrivate = false\n): Promise<string[][]> {\n  const parsedEmail = await parseEmail(eml);\n\n  if (\n    (blueprint.emailBodyMaxLength === undefined && !blueprint.ignoreBodyHashCheck) ||\n    blueprint.emailHeaderMaxLength === undefined\n  ) {\n    throw new Error(\"emailBodyMaxLength and emailHeaderMaxLength must be provided\");\n  }\n\n  let body = parsedEmail.cleanedBody;\n  if (blueprint.shaPrecomputeSelector) {\n    const splitEmail = body.split(blueprint.shaPrecomputeSelector)[1];\n    if (!splitEmail) {\n      throw new Error(\n        `Precompute selector was not found in email, selector: ${blueprint.shaPrecomputeSelector}`\n      );\n    }\n    body = splitEmail;\n  }\n\n  const header = parsedEmail.canonicalizedHeader;\n\n  await checkInputLengths(header, body, blueprint);\n\n  const output = await Promise.all(\n    blueprint.decomposedRegexes.map((dcr: DecomposedRegex) =>\n      testDecomposedRegex(body, header, dcr, revealPrivate)\n    )\n  );\n\n  return output;\n}\n\nasync function checkInputLengths(header: string, body: string, blueprint: BlueprintProps) {\n  await relayerUtilsInit;\n  const encoder = new TextEncoder();\n  const headerData = encoder.encode(header);\n  const headerLength = (await sha256Pad(headerData, blueprint.emailHeaderMaxLength!)).get(\n    \"messageLength\"\n  );\n  if (headerLength > blueprint.emailHeaderMaxLength!) {\n    throw new Error(`emailHeaderMaxLength of ${blueprint.emailHeaderMaxLength} was exceeded`);\n  }\n\n  if (!blueprint.ignoreBodyHashCheck) {\n    const bodyData = encoder.encode(body);\n\n    const bodyShaLength = ((body.length + 63 + 65) / 64) * 64;\n\n    const maxShaBytes = Math.max(bodyShaLength, blueprint.emailBodyMaxLength!);\n\n    const bodyLength = (await sha256Pad(bodyData, maxShaBytes)).get(\"messageLength\");\n\n    if (bodyLength > blueprint.emailBodyMaxLength!) {\n      throw new Error(`emailBodyMaxLength of ${blueprint.emailBodyMaxLength} was exceeded`);\n    }\n  }\n}\n\nexport async function testDecomposedRegex(\n  body: string,\n  header: string,\n  decomposedRegex: DecomposedRegex | DecomposedRegexJson,\n  revealPrivate = false\n): Promise<string[]> {\n  const inputDecomposedRegex = {\n    parts: decomposedRegex.parts.map((p: DecomposedRegexPart | DecomposedRegexPartJson) => ({\n      is_public: \"isPublic\" in p ? p.isPublic : p.is_public,\n      regex_def: \"regexDef\" in p ? p.regexDef : p.regex_def,\n    })),\n  };\n\n  let inputStr: string;\n  if (decomposedRegex.location === \"body\") {\n    inputStr = body;\n  } else if (decomposedRegex.location === \"header\") {\n    inputStr = header;\n  } else {\n    throw Error(`Unsupported location ${decomposedRegex.location}`);\n  }\n\n  const maxLength =\n    \"maxLength\" in decomposedRegex ? decomposedRegex.maxLength : decomposedRegex.max_length;\n\n  await relayerUtilsInit;\n  const privateResult = extractSubstr(inputStr, inputDecomposedRegex, false);\n\n  if (privateResult[0].length > maxLength) {\n    throw new Error(\n      `Max length of extracted result was exceeded for decomposed regex ${decomposedRegex.name}`\n    );\n  }\n\n  if (!revealPrivate) {\n    return privateResult;\n  }\n\n  const result = extractSubstr(inputStr, inputDecomposedRegex, revealPrivate);\n  return result;\n}\n\nexport async function generateProofInputs(\n  eml: string,\n  decomposedRegexes: DecomposedRegex[],\n  externalInputs: ExternalInputInput[],\n  params: GenerateProofInputsParams\n): Promise<string> {\n  try {\n    const internalParams: GenerateProofInputsParamsInternal = {\n      maxHeaderLength: params.emailHeaderMaxLength,\n      maxBodyLength: params.emailBodyMaxLength,\n      ignoreBodyHashCheck: params.ignoreBodyHashCheck,\n      removeSoftLinesBreaks: params.removeSoftLinebreaks,\n      shaPrecomputeSelector: params.shaPrecomputeSelector,\n    };\n\n    await relayerUtilsInit;\n\n    const decomposedRegexesCleaned = decomposedRegexes.map((dcr) => {\n      return {\n        ...dcr,\n        parts: dcr.parts.map((p) => ({\n          // @ts-ignore\n          is_public: p.isPublic || !!p.is_public,\n          // @ts-ignore\n          regex_def: p.regexDef || !!p.regex_def,\n        })),\n      };\n    });\n\n    const inputs = await generateCircuitInputsWithDecomposedRegexesAndExternalInputs(\n      eml,\n      decomposedRegexesCleaned,\n      externalInputs,\n      internalParams\n    );\n\n    return JSON.stringify(Object.fromEntries(inputs));\n  } catch (err) {\n    console.error(\"Failed to generate inputs for proof\");\n    throw err;\n  }\n}\n","import { Blueprint } from \"./blueprint\";\nimport { Proof } from \"./proof\";\nimport { generateProofInputs } from \"./relayerUtils\";\nimport { GenerateProofInputsParams, ProofRequest, ProofResponse, ProofStatus } from \"./types/proof\";\nimport { ExternalInputInput, ProverOptions } from \"./types/prover\";\nimport { post } from \"./utils\";\n\n/**\n * Represents a Prover generated from a blueprint that can generate Proofs\n */\nexport class Prover {\n  options: ProverOptions;\n  blueprint: Blueprint;\n\n  constructor(blueprint: Blueprint, options?: ProverOptions) {\n    if (options?.isLocal === true) {\n      throw new Error(\"Local proving is not supported yet\");\n    }\n\n    if (!(blueprint instanceof Blueprint)) {\n      throw new Error(\"Invalid blueprint: must be an instance of Blueprint class\");\n    }\n\n    this.blueprint = blueprint;\n\n    // Use defaults for unset fields\n    this.options = {\n      isLocal: false,\n      ...(!!options ? options : {}),\n    };\n  }\n\n  // TODO: Add parsed email input\n  /**\n   * Generates a proof for a given email.\n   * @param eml - Email to prove agains the blueprint of this Prover.\n   * @returns A promise that resolves to a new instance of Proof. The Proof will have the status\n   * Done or Failed.\n   */\n  async generateProof(eml: string, externalInputs: ExternalInputInput[] = []): Promise<Proof> {\n    const proof = await this.generateProofRequest(eml, externalInputs);\n\n    // Wait for proof to finish\n    while (![ProofStatus.Done, ProofStatus.Failed].includes(await proof.checkStatus())) {}\n    return proof;\n  }\n\n  // TODO: Add parsed email input\n  /**\n   * Starts proving for a given email.\n   * @param eml - Email to prove agains the blueprint of this Prover.\n   * @returns A promise that resolves to a new instance of Proof. The Proof will have the status\n   * InProgress.\n   */\n  async generateProofRequest(\n    eml: string,\n    externalInputs: ExternalInputInput[] = []\n  ): Promise<Proof> {\n    const blueprintId = this.blueprint.getId();\n    if (!blueprintId) {\n      throw new Error(\"Blueprint of Proover must be initialized in order to create a Proof\");\n    }\n\n    if (this.blueprint.props.externalInputs?.length && !externalInputs.length) {\n      throw new Error(\n        `The ${this.blueprint.props.slug} blueprint requires external inputs: ${this.blueprint.props.externalInputs}`\n      );\n    }\n\n    let input: string;\n    try {\n      // TODO: Do we use defaults?\n      const params: GenerateProofInputsParams = {\n        emailHeaderMaxLength: this.blueprint.props.emailHeaderMaxLength || 256,\n        emailBodyMaxLength: this.blueprint.props.emailBodyMaxLength || 2560,\n        ignoreBodyHashCheck: this.blueprint.props.ignoreBodyHashCheck || false,\n        removeSoftLinebreaks: this.blueprint.props.removeSoftLinebreaks || true,\n        shaPrecomputeSelector: this.blueprint.props.shaPrecomputeSelector,\n      };\n      console.log(\"generating proof inputs\");\n      input = await generateProofInputs(\n        eml,\n        this.blueprint.props.decomposedRegexes,\n        externalInputs,\n        params\n      );\n    } catch (err) {\n      console.error(\"Failed to generate inputs for proof\");\n      throw err;\n    }\n\n    console.log(\"got proof input\");\n    let response: ProofResponse;\n    try {\n      const requestData: ProofRequest = {\n        blueprint_id: blueprintId,\n        input: JSON.parse(input),\n        external_inputs: externalInputs.reduce(\n          (acc, input) => ({\n            ...acc,\n            [input.name]: input.value,\n          }),\n          {}\n        ),\n      };\n\n      response = await post<ProofResponse>(`${this.blueprint.baseUrl}/proof`, requestData);\n    } catch (err) {\n      console.error(\"Failed calling POST on /proof/ in generateProofRequest: \", err);\n      throw err;\n    }\n\n    const proofProps = Proof.responseToProofProps(response);\n    return new Proof(this.blueprint, proofProps);\n  }\n}\n","export type BlueprintProps = {\n  id?: string;\n  title: string;\n  description?: string;\n  slug?: string;\n  tags?: string[];\n  emailQuery?: string;\n  circuitName: string;\n  ignoreBodyHashCheck?: boolean;\n  shaPrecomputeSelector?: string;\n  emailBodyMaxLength?: number;\n  emailHeaderMaxLength?: number;\n  removeSoftLinebreaks?: boolean;\n  githubUsername?: string;\n  senderDomain?: string;\n  enableHeaderMasking?: boolean;\n  enableBodyMasking?: boolean;\n  zkFramework?: ZkFramework;\n  isPublic?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n  externalInputs?: ExternalInput[];\n  decomposedRegexes: DecomposedRegex[];\n  status?: Status;\n  verifierContract?: VerifierContract;\n  version?: number;\n  stars?: number;\n};\n\nexport type DecomposedRegex = {\n  parts: DecomposedRegexPart[];\n  name: string;\n  maxLength: number;\n  location: \"body\" | \"header\";\n};\n\nexport type DecomposedRegexPart = {\n  isPublic: boolean;\n  regexDef: string;\n};\n\nexport type DecomposedRegexJson = {\n  parts: DecomposedRegexPartJson[];\n  name: string;\n  max_length: number;\n  location: \"body\" | \"header\";\n};\n\nexport type DecomposedRegexPartJson = {\n  is_public: boolean;\n  regex_def: string;\n};\n\nexport type ExternalInput = {\n  name: string;\n  maxLength: number;\n};\n\nexport enum ZkFramework {\n  Circom = \"circom\",\n}\n\n// According to protobufs\nexport enum Status {\n  None,\n  Draft,\n  InProgress,\n  Done,\n  Failed,\n}\n\nexport type VerifierContract = {\n  address?: string;\n  chain: number;\n};\n\nexport type BlueprintRequest = {\n  id?: string;\n  title: string;\n  description?: string;\n  slug?: string;\n  tags?: string[];\n  email_query?: string;\n  circuit_name?: string;\n  ignore_body_hash_check?: boolean;\n  sha_precompute_selector?: string;\n  email_body_max_length?: number;\n  email_header_max_length?: number;\n  remove_soft_linebreaks?: boolean;\n  // TODO: Make non ? after login with github\n  github_username?: string;\n  sender_domain?: string;\n  enable_header_masking?: boolean;\n  enable_body_masking?: boolean;\n  zk_framework?: string;\n  is_public?: boolean;\n  external_inputs?: ExternalInputResponse[];\n  decomposed_regexes: DecomposedRegexResponse[];\n  status?: string;\n  verifier_contract_address?: string;\n  verifier_contract_chain?: number;\n  version?: number;\n};\n\nexport type BlueprintResponse = {\n  id: string;\n  title: string;\n  description: string;\n  slug: string;\n  tags: string[];\n  email_query: string;\n  circuit_name: string;\n  ignore_body_hash_check: boolean;\n  sha_precompute_selector: string;\n  email_body_max_length: number;\n  email_header_max_length?: number;\n  remove_soft_linebreaks?: boolean;\n  github_username?: string;\n  sender_domain: string;\n  enable_header_masking?: boolean;\n  enable_body_masking?: boolean;\n  zk_framework: string;\n  is_public: boolean;\n  created_at: ServerDate;\n  updated_at: ServerDate;\n  external_inputs: ExternalInputResponse[];\n  decomposed_regexes: DecomposedRegexResponse[];\n  status: number;\n  verifier_contract_address: string;\n  verifier_contract_chain: number;\n  version: number;\n  stars: number;\n};\n\nexport type ServerDate = {\n  seconds: number;\n  nanos: number;\n};\n\nexport type ExternalInputResponse = {\n  name: string;\n  max_length: number;\n};\n\nexport type DecomposedRegexResponse = {\n  parts: DecomposedRegexPartResponse[];\n  name: string;\n  max_length: number;\n  location: \"body\" | \"header\";\n};\n\nexport type DecomposedRegexPartResponse = {\n  is_public: boolean;\n  regex_def: string;\n};\n\nexport type ListBlueprintsOptions = {\n  skip?: number;\n  limit?: number;\n  sort?: -1 | 1;\n  sortBy?: \"updatedAt\" | \"stars\";\n  status?: Status[];\n  isPublic?: boolean;\n  search?: string;\n};\n\nexport type ListBlueprintsOptionsRequest = {\n  skip?: number;\n  limit?: number;\n  sort?: -1 | 1;\n  sortBy?: \"updated_at\" | \"stars\";\n  status?: Status[];\n  is_public?: boolean;\n  search?: string;\n};\n\nexport type DownloadUrls = Record<string, string>;\n","import { Prover } from \"./prover\";\nimport {\n  BlueprintProps,\n  BlueprintRequest,\n  BlueprintResponse,\n  DownloadUrls,\n  ListBlueprintsOptions,\n  ListBlueprintsOptionsRequest,\n  Status,\n  ZkFramework,\n} from \"./types/blueprint\";\nimport { del, get, patch, post } from \"./utils\";\nimport { verifyProofOnChain } from \"./chain\";\nimport { Auth } from \"./types/auth\";\nimport { Proof } from \"./proof\";\n\n/**\n * Represents a Regex Blueprint including the decomposed regex access to the circuit.\n */\nexport class Blueprint {\n  // TODO: Implement getter and setter pattern\n  props: BlueprintProps;\n  auth?: Auth;\n  baseUrl: string;\n  stars = 0;\n\n  private lastCheckedStatus: Date | null = null;\n\n  constructor(props: BlueprintProps, baseUrl: string, auth?: Auth) {\n    // Use defaults for unset fields\n    this.props = {\n      ignoreBodyHashCheck: false,\n      enableHeaderMasking: false,\n      enableBodyMasking: false,\n      isPublic: true,\n      status: Status.Draft,\n      ...props,\n    };\n\n    this.baseUrl = baseUrl;\n    this.auth = auth;\n  }\n\n  addAuth(auth: Auth) {\n    this.auth = auth;\n  }\n\n  /**\n   * Fetches an existing RegexBlueprint from the database.\n   * @param {string} id - Id of the RegexBlueprint.\n   * @returns A promise that resolves to a new instance of RegexBlueprint.\n   */\n  public static async getBlueprintById(\n    id: string,\n    baseUrl: string,\n    auth?: Auth\n  ): Promise<Blueprint> {\n    let blueprintResponse: BlueprintResponse;\n    try {\n      blueprintResponse = await get<BlueprintResponse>(`${baseUrl}/blueprint/${id}`);\n    } catch (err) {\n      console.error(\"Failed calling /blueprint/:id in getBlueprintById: \", err);\n      throw err;\n    }\n\n    const blueprintProps = this.responseToBlueprintProps(blueprintResponse);\n\n    const blueprint = new Blueprint(blueprintProps, baseUrl, auth);\n\n    return blueprint;\n  }\n\n  /**\n   * Fetches an existing RegexBlueprint by slug from the database.\n   * @param slug - Slug of the blueprint. Must include version, e.g. \"slug:v1\"\n   * @param version - Version of the slug.\n   * @returns A promise that resolves to a new instance of RegexBlueprint.\n   */\n  public static async getBlueprintBySlug(\n    slug: string,\n    baseUrl: string,\n    auth?: Auth\n  ): Promise<Blueprint> {\n    const parts = slug.split(\"@\");\n\n    if (!parts || !(parts.length > 1)) {\n      throw new Error(\"You must provide the blueprint version, e.g. 'user/slug@v1\");\n    }\n    const version = parts.pop()!.replace(\"v\", \"\");\n\n    slug = encodeURIComponent(parts.join(\"\"));\n\n    if (!version) {\n      throw new Error(\"You must provide the blueprint version, e.g. 'user/slug@v1\");\n    }\n\n    let blueprintResponse: BlueprintResponse;\n    try {\n      const url = `${baseUrl}/blueprint/by-slug/${slug}/${version}`;\n      blueprintResponse = await get<BlueprintResponse>(url);\n    } catch (err) {\n      console.error(\"Failed calling /blueprint/by-slug/:slug/:id in getBlueprintById: \", err);\n      throw err;\n    }\n\n    const blueprintProps = this.responseToBlueprintProps(blueprintResponse);\n\n    const blueprint = new Blueprint(blueprintProps, baseUrl, auth);\n\n    return blueprint;\n  }\n\n  // Maps the blueprint API response to the BlueprintProps\n  private static responseToBlueprintProps(response: BlueprintResponse): BlueprintProps {\n    const props: BlueprintProps = {\n      id: response.id,\n      title: response.title,\n      description: response.description,\n      slug: response.slug,\n      tags: response.tags,\n      emailQuery: response.email_query,\n      circuitName: response.circuit_name,\n      ignoreBodyHashCheck: response.ignore_body_hash_check,\n      shaPrecomputeSelector: response.sha_precompute_selector,\n      emailBodyMaxLength: response.email_body_max_length,\n      emailHeaderMaxLength: response.email_header_max_length,\n      removeSoftLinebreaks: response.remove_soft_linebreaks,\n      githubUsername: response.github_username,\n      senderDomain: response.sender_domain,\n      enableHeaderMasking: response.enable_header_masking,\n      enableBodyMasking: response.enable_body_masking,\n      zkFramework: response.zk_framework as ZkFramework,\n      isPublic: response.is_public,\n      createdAt: new Date(response.created_at.seconds * 1000),\n      updatedAt: new Date(response.updated_at.seconds * 1000),\n      externalInputs: response.external_inputs?.map((input) => ({\n        name: input.name,\n        maxLength: input.max_length,\n      })),\n      decomposedRegexes: response.decomposed_regexes?.map((regex) => ({\n        parts: regex.parts.map((part) => ({\n          isPublic: part.is_public,\n          regexDef: part.regex_def,\n        })),\n        name: regex.name,\n        maxLength: regex.max_length,\n        location: regex.location,\n      })),\n      status: response.status as Status,\n      verifierContract: {\n        address: response.verifier_contract_address,\n        chain: response.verifier_contract_chain,\n      },\n      version: response.version,\n      stars: response.stars,\n    };\n\n    return props;\n  }\n\n  // Maps the BlueprintProps to the BlueprintResponse\n  private static blueprintPropsToRequest(props: BlueprintProps): BlueprintRequest {\n    const response: BlueprintRequest = {\n      id: props.id,\n      title: props.title,\n      description: props.description,\n      slug: props.slug,\n      tags: props.tags,\n      email_query: props.emailQuery,\n      circuit_name: props.circuitName,\n      ignore_body_hash_check: props.ignoreBodyHashCheck,\n      sha_precompute_selector: props.shaPrecomputeSelector,\n      email_body_max_length: props.emailBodyMaxLength,\n      email_header_max_length: props.emailHeaderMaxLength,\n      remove_soft_linebreaks: props.removeSoftLinebreaks,\n      github_username: props.githubUsername,\n      sender_domain: props.senderDomain,\n      enable_header_masking: props.enableHeaderMasking,\n      enable_body_masking: props.enableBodyMasking,\n      zk_framework: props.zkFramework,\n      is_public: props.isPublic,\n      external_inputs: props.externalInputs?.map((input) => ({\n        name: input.name,\n        max_length: input.maxLength,\n      })),\n      decomposed_regexes: props.decomposedRegexes?.map((regex) => ({\n        parts: regex.parts.map((part) => ({\n          // @ts-ignore\n          is_public: part.isPublic || part.is_public,\n          // @ts-ignore\n          regex_def: part.regexDef || part.regex_def,\n        })),\n        name: regex.name,\n        max_length: regex.maxLength,\n        location: regex.location,\n      })),\n      verifier_contract_address: props.verifierContract?.address,\n      verifier_contract_chain: props.verifierContract?.chain,\n    };\n\n    return response;\n  }\n\n  /**\n   * Submits a new RegexBlueprint to the registry as draft.\n   * This does not compile the circuits yet and you will still be able to make changes.\n   * @returns A promise. Once it resolves, `getId` can be called.\n   */\n  public async submitDraft() {\n    if (!this.auth) {\n      throw new Error(\"auth is required, add it with Blueprint.addAuth(auth)\");\n    }\n\n    if (this.props.id) {\n      throw new Error(\"Blueprint was already saved\");\n    }\n\n    const requestData = Blueprint.blueprintPropsToRequest(this.props);\n\n    let response: BlueprintResponse;\n    try {\n      response = await post<BlueprintResponse>(`${this.baseUrl}/blueprint`, requestData, this.auth);\n    } catch (err) {\n      console.error(\"Failed calling POST on /blueprint/ in submitDraft: \", err);\n      throw err;\n    }\n\n    this.props = Blueprint.responseToBlueprintProps(response);\n  }\n\n  /**\n   * Submits a new version of the RegexBlueprint to the registry as draft.\n   * This does not compile the circuits yet and you will still be able to make changes.\n   * @param newProps - The updated blueprint props.\n   * @returns A promise. Once it resolves, the current Blueprint will be replaced with the new one.\n   */\n  public async submitNewVersionDraft(newProps: BlueprintProps) {\n    if (!this.auth) {\n      throw new Error(\"auth is required, add it with Blueprint.addAuth(auth)\");\n    }\n\n    const requestData = Blueprint.blueprintPropsToRequest(newProps);\n\n    let response: BlueprintResponse;\n    try {\n      response = await post<BlueprintResponse>(`${this.baseUrl}/blueprint`, requestData, this.auth);\n    } catch (err) {\n      console.error(\"Failed calling POST on /blueprint/ in submitNewVersionDraft: \", err);\n      throw err;\n    }\n\n    this.props = Blueprint.responseToBlueprintProps(response);\n  }\n\n  /**\n   * Submits a new version of the blueprint. This will save the new blueprint version\n   * and start the compilation.\n   * This will also overwrite the current Blueprint with its new version, even if the last\n   * version was not compiled yet.\n   * @param newProps - The updated blueprint props.\n   */\n  async submitNewVersion(newProps: BlueprintProps) {\n    if (!this.auth) {\n      throw new Error(\"auth is required, add it with Blueprint.addAuth(auth)\");\n    }\n\n    await this.submitNewVersionDraft(newProps);\n\n    // We don't check the status here, since we are compiling directly after submiting the draft.\n\n    // Submit compile request\n    try {\n      await post<{ status: Status }>(\n        `${this.baseUrl}/blueprint/compile/${this.props.id}`,\n        null,\n        this.auth\n      );\n    } catch (err) {\n      // We don't set the status here, since the api call can't fail due to the actual job failing\n      // It can only due to connectivity issues or the job runner not being available\n      console.error(\"Failed calling POST on /blueprint/compile in submit: \", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Lists blueblueprints, only including the latest version per unique slug.\n   * @param options - Options to filter the blueprints by.\n   * @returns A promise. Once it resolves, `getId` can be called.\n   */\n  public static async listBlueprints(\n    baseUrl: string,\n    options?: ListBlueprintsOptions,\n    auth?: Auth\n  ): Promise<Blueprint[]> {\n    console.log(\"listing blueprints with options: \", options);\n\n    const requestOptions: ListBlueprintsOptionsRequest = {\n      skip: options?.skip,\n      limit: options?.limit,\n      sort: options?.sort,\n      status: options?.status,\n      is_public: options?.isPublic,\n      sortBy: options?.sortBy === \"updatedAt\" ? \"updated_at\" : options?.sortBy,\n      search: options?.search,\n    };\n\n    console.log(\"requestOptions: \", requestOptions);\n\n    let response: { blueprints?: BlueprintResponse[] };\n    try {\n      response = await get<{ blueprints?: BlueprintResponse[] }>(\n        `${baseUrl}/blueprint`,\n        requestOptions,\n        auth\n      );\n    } catch (err) {\n      console.error(\"Failed calling GET on /blueprint/ in listBlueprints: \", err);\n      throw err;\n    }\n\n    if (!response.blueprints) {\n      return [];\n    }\n\n    console.log(\"response: \", response);\n\n    const blueprints = response.blueprints.map((blueprintResponse) => {\n      const blueprintProps = Blueprint.responseToBlueprintProps(blueprintResponse);\n      return new Blueprint(blueprintProps, baseUrl, auth);\n    });\n\n    return blueprints;\n  }\n\n  /**\n   * Submits a blueprint. This will save the blueprint if it didn't exist before\n   * and start the compilation.\n   */\n  async submit() {\n    if (!this.auth) {\n      throw new Error(\"auth is required, add it with Blueprint.addAuth(auth)\");\n    }\n\n    // If the blueprint wasn't save yet, we save it first to db\n    if (!this.props.id) {\n      try {\n        await this.submitDraft();\n      } catch (err) {\n        console.error(\"Failed to create blueprint: \", err);\n        throw err;\n      }\n    }\n\n    const status = await this._checkStatus();\n\n    // TODO: Should we allow retry on failed?\n    if (Status.Done === status) {\n      throw new Error(\"The circuits are already compiled.\");\n    }\n    if (Status.InProgress === status) {\n      throw new Error(\"The circuits already being compiled, please wait.\");\n    }\n\n    // Submit compile request\n    try {\n      await post<{ status: Status }>(\n        `${this.baseUrl}/blueprint/compile/${this.props.id}`,\n        null,\n        this.auth\n      );\n    } catch (err) {\n      // We don't set the status here, since the api call can't fail due to the actual job failing\n      // It can only due to connectivity issues or the job runner not being available\n      console.error(\"Failed calling POST on /blueprint/compile in submit: \", err);\n      throw err;\n    }\n  }\n\n  // Request status from server and updates props.status\n  private async _checkStatus(): Promise<Status> {\n    let response: { status: Status };\n    try {\n      response = await get<{ status: Status }>(`${this.baseUrl}/blueprint/status/${this.props.id}`);\n    } catch (err) {\n      console.error(\"Failed calling GET /blueprint/status in getStatus(): \", err);\n      throw err;\n    }\n\n    this.props.status = response.status;\n    return response.status;\n  }\n\n  /**\n   * Checks the status of blueprint.\n   * checkStatus can be used in a while(await checkStatus()) loop, since it will wait a fixed\n   * amount of time the second time you call it.\n   * @returns A promise with the Status.\n   */\n  async checkStatus(): Promise<Status> {\n    // Blueprint wasn't saved yet, return default status\n    if (!this.props.id) {\n      return this.props.status!;\n    }\n\n    if ([Status.Failed, Status.Done].includes(this.props.status!)) {\n      return this.props.status!;\n    }\n\n    // Waits for a fixed period of time before you can call checkStatus again\n    // This enables you to put checkStatus in a while(await checkStatus()) loop\n    if (!this.lastCheckedStatus) {\n      this.lastCheckedStatus = new Date();\n    } else {\n      // TODO: change for prod to one minute\n      const waitTime = 0.5 * 1_000; // TODO: should be one minute;\n      const sinceLastChecked = new Date().getTime() - this.lastCheckedStatus.getTime();\n      if (sinceLastChecked < waitTime) {\n        await new Promise((r) => setTimeout(r, waitTime - sinceLastChecked));\n      }\n    }\n\n    const status = await this._checkStatus();\n\n    return status;\n  }\n\n  /**\n   * Get the id of the blueprint.\n   * @returns The id of the blueprint. If it was not saved yet, return null.\n   */\n  getId(): string | null {\n    return this.props.id || null;\n  }\n\n  /**\n   * Returns a download link for the ZKeys of the blueprint.\n   * @returns The the url to download the ZKeys.\n   */\n  async getZKeyDownloadLink(): Promise<DownloadUrls> {\n    if (this.props.status !== Status.Done) {\n      throw new Error(\"The circuits are not compiled yet, nothing to download.\");\n    }\n\n    let response: { urls: DownloadUrls };\n    try {\n      response = await get<{ urls: DownloadUrls }>(\n        `${this.baseUrl}/blueprint/zkey/${this.props.id}`\n      );\n    } catch (err) {\n      console.error(\"Failed calling GET on /blueprint/zkey/:id in getZKeyDownloadLink: \", err);\n      throw err;\n    }\n\n    return response.urls;\n  }\n\n  /**\n   * Directly starts a download of the ZKeys in the browser.\n   * Must be called within a user action, like a button click.\n   */\n  async startZKeyDownload() {\n    if (!window && !document) {\n      throw Error(\"startZKeyDownload can only be used in a browser\");\n    }\n\n    let urls: DownloadUrls;\n    try {\n      urls = await this.getZKeyDownloadLink();\n    } catch (err) {\n      console.error(\"Failed to start download of ZKeys: \", err);\n      throw err;\n    }\n\n    for (const [name, url] of Object.entries(urls)) {\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = name; // Set the desired filename\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n\n  /**\n   * Creates an instance of Prover with which you can create proofs.\n   * @returns An instance of Prover.\n   */\n  createProver() {\n    return new Prover(this);\n  }\n\n  /**\n   * Verifies a proof on chain.\n   * @param proof - The generated proof you want to verify.\n   * @returns A true if the verification was successfull, false if it failed.\n   */\n  async verifyProofOnChain(proof: Proof): Promise<boolean> {\n    try {\n      await verifyProofOnChain(proof);\n    } catch (err) {\n      console.error(\"Failed to verify proof on chain: \", err);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns a deep cloned version of the Blueprints props.\n   * This can be used to update properties and then to use them with createNewVersion.\n   * @param proof - The generated proof you want to verify.\n   * @returns A true if the verification was successfull, false if it failed.\n   */\n  getClonedProps(): BlueprintProps {\n    const cloned = JSON.parse(JSON.stringify(this.props));\n\n    // Conver date strings\n    if (cloned.createdAt) {\n      cloned.createdAt = new Date(cloned.createdAt);\n    }\n    if (cloned.updatedAt) {\n      cloned.updatedAt = new Date(cloned.updatedAt);\n    }\n\n    return cloned;\n  }\n\n  /**\n   * Returns true if the blueprint can be updated. A blueprint can be updated if the circuits\n   * haven't beed compiled yet, i.e. the status is not Done. The blueprint also must be saved\n   * already before it can be updated.\n   * @returns true if it can be updated\n   */\n  canUpdate(): boolean {\n    return !!(this.props.id && ![Status.Done, Status.InProgress].includes(this.props.status!));\n  }\n\n  /**\n   * Updates an existing blueprint that is not compiled yet.\n   * @param newProps - The props the blueprint should be updated to.\n   * @returns a promise.\n   */\n  async update(newProps: BlueprintProps) {\n    if (!this.auth) {\n      throw new Error(\"auth is required, add it with Blueprint.addAuth(auth)\");\n    }\n\n    if (!this.canUpdate()) {\n      throw new Error(\"Blueprint already compied, cannot update\");\n    }\n\n    const requestData = Blueprint.blueprintPropsToRequest(newProps);\n\n    let response: BlueprintResponse;\n    try {\n      response = await patch<BlueprintResponse>(\n        `${this.baseUrl}/blueprint/${this.props.id}`,\n        requestData,\n        this.auth\n      );\n    } catch (err) {\n      console.error(\"Failed calling POST on /blueprint/ in submitDraft: \", err);\n      throw err;\n    }\n\n    this.props = Blueprint.responseToBlueprintProps(response);\n  }\n\n  async listAllVersions(): Promise<Blueprint[]> {\n    if (!this.props.id) {\n      throw new Error(\"Blueprint was not saved yet\");\n    }\n    let response: { blueprints: BlueprintResponse[] };\n    try {\n      response = await get<{ blueprints: BlueprintResponse[] }>(\n        `${this.baseUrl}/blueprint/versions/${encodeURIComponent(this.props.slug!)}`\n      );\n    } catch (err) {\n      console.error(\"Failed calling GET on /blueprint/versions/:slug in listAllVersions: \", err);\n      throw err;\n    }\n\n    return response.blueprints.map((blueprintResponse) => {\n      const blueprintProps = Blueprint.responseToBlueprintProps(blueprintResponse);\n      return new Blueprint(blueprintProps, this.baseUrl, this.auth);\n    });\n  }\n\n  async addStar(): Promise<number> {\n    if (!this.auth) {\n      throw new Error(\"Auth is required. Please login to star a blueprint.\");\n    }\n\n    try {\n      await post(\n        `${this.baseUrl}/blueprint/${encodeURIComponent(this.props.slug!)}/stars`,\n        null,\n        this.auth\n      );\n      return await this.getStars();\n    } catch (err) {\n      console.error(\"Failed calling POST on /blueprint/${slug}/stars in addStar: \", err);\n      throw err;\n    }\n  }\n\n  async removeStar(): Promise<number> {\n    if (!this.auth) {\n      throw new Error(\"Auth is required. Please login to star a blueprint.\");\n    }\n\n    try {\n      await del(\n        `${this.baseUrl}/blueprint/${encodeURIComponent(this.props.slug!)}/stars`,\n        null,\n        this.auth\n      );\n      return await this.getStars();\n    } catch (err) {\n      console.error(\"Failed calling DELETE on /blueprint/${id}/stars in addStar: \", err);\n      throw err;\n    }\n  }\n\n  async getStars(): Promise<number> {\n    try {\n      const { stars } = await get<{ stars: number }>(\n        `${this.baseUrl}/blueprint/${encodeURIComponent(this.props.slug!)}/stars`\n      );\n      this.props.stars = stars || 0;\n      return stars || 0;\n    } catch (err) {\n      console.error(\"Failed calling POST on /blueprint/${id}/stars in addStar: \", err);\n      throw err;\n    }\n  }\n\n  async cancelCompilation(): Promise<void> {\n    if (this.props.status !== Status.InProgress) {\n      throw new Error(\"Can only cancel compilation of a blueprint that is in progress\");\n    }\n    try {\n      await del<{ stars: number }>(\n        `${this.baseUrl}/blueprint/cancel/${this.props.id}`,\n        null,\n        this.auth\n      );\n    } catch (err) {\n      console.error(\"Failed calling DELETE on /blueprint/cancel/${id} in cancelCompilation: \", err);\n      throw err;\n    }\n  }\n\n  async delete(): Promise<void> {\n    // TODO: add is admin check here, currently only done in registry\n    // if (this.props.status !== Status.Draft) {\n    //   throw new Error(\"Can only delete a blueprint that is in draft\");\n    // }\n    try {\n      await del<{ success: boolean }>(\n        `${this.baseUrl}/blueprint/${this.props.id}`,\n        null,\n        this.auth\n      );\n    } catch (err) {\n      console.error(\"Failed calling DELETE on /blueprint/${id} in cancelCompilation: \", err);\n      throw err;\n    }\n  }\n}\n\n// export {\n//   BlueprintProps,\n//   DecomposedRegex,\n//   DecomposedRegexPart,\n//   ExternalInput,\n//   ZkFramework,\n//   Status,\n//   VerifierContract,\n//   RevealHeaderFields,\n// } from \"./types/blueprint\";\n\nexport * from \"./types/blueprint\";\n","import { Auth } from \"./types\";\nimport { get } from \"./utils\";\n\n/**\n * @returns An array of slugs that the user starred\n */\nexport async function getStarredBlueprints(baseUrl: string, auth: Auth): Promise<string[]> {\n  const { slugs } = await get<{ slugs: string[] }>(`${baseUrl}/blueprint/starred`, null, auth);\n  return slugs;\n}\n","import { Blueprint, BlueprintProps, ListBlueprintsOptions } from \"./blueprint\";\nimport { Proof } from \"./proof\";\nimport { SdkOptions } from \"./types/sdk\";\nimport { getStarredBlueprints } from \"./user\";\n\n// Export Types\nexport * from \"./types/blueprint\";\nexport { Blueprint } from \"./blueprint\";\nexport * from \"./types/proof\";\nexport { Proof } from \"./proof\";\nexport * from \"./types/prover\";\nexport type { Auth } from \"./types/auth\";\nexport type { ParsedEmail } from \"./types/utils\";\n\n// Exports that don't need initialization or options\nexport { startJsonFileDownload } from \"./utils\";\nexport {\n  testDecomposedRegex,\n  parseEmail,\n  generateProofInputs,\n  testBlueprint,\n} from \"./relayerUtils\";\nexport { getLoginWithGithubUrl } from \"./auth\";\n\n// Exported sdk, functions that need initialization\nexport default (sdkOptions?: SdkOptions) => {\n  const baseUrl = sdkOptions?.baseUrl || \"https://conductor.zk.email\";\n  return {\n    createBlueprint(props: BlueprintProps) {\n      if (!sdkOptions && !sdkOptions!.auth) {\n        throw new Error(\"You need to specify options.auth to use createBlueprint\");\n      }\n      const blueprint = new Blueprint(props, baseUrl, sdkOptions!.auth);\n      return blueprint;\n    },\n    async getBlueprint(slug: string): Promise<Blueprint> {\n      return Blueprint.getBlueprintBySlug(slug, baseUrl, sdkOptions?.auth);\n    },\n    async getBlueprintById(id: string): Promise<Blueprint> {\n      return Blueprint.getBlueprintById(id, baseUrl, sdkOptions?.auth);\n    },\n    async listBlueprints(options?: ListBlueprintsOptions): Promise<Blueprint[]> {\n      return Blueprint.listBlueprints(baseUrl, options, sdkOptions?.auth);\n    },\n    async getProof(id: string): Promise<Proof> {\n      return Proof.getProofById(id, baseUrl);\n    },\n    async getStarredBlueprints(): Promise<string[]> {\n      if (!sdkOptions && !sdkOptions!.auth) {\n        throw new Error(\"You need to specify options.auth to use getStarredBlueprints\");\n      }\n      return getStarredBlueprints(baseUrl, sdkOptions!.auth!);\n    },\n  };\n};\n"]}