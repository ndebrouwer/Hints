-compile circom code
-export key with snarkjs or libsnark (cpp)
-convert the key into a binary file for easier deserialization with cpp
-Store sensitive files (verification_key.bin, proof.bin, etc.) securely within the TEE.
-Use TEE APIs to handle encryption/decryption of input files as needed.
-Compile the code for the TEE platform (e.g., Intel SGX).
-Use the enclave SDK to handle the interaction between the secure and untrusted portions of your application.
-Test locally outside the TEE to ensure correctness.
-Test within the TEE to validate secure execution.
-note that the offervalidator.cpp uses 'public input paths' as keywords to be verified, but we also have a public 


# Compile without WebSocket (no BOOST):
g++ -std=c++17 main.cpp TEEEngine.cpp TEEStorage.cpp OfferValidator.cpp OnChainPoster.cpp \
    -I. -o tee_service

# Or compile with WebSocket server:
g++ -std=c++17 main.cpp TEEEngine.cpp TEEStorage.cpp OfferValidator.cpp OnChainPoster.cpp \
    WebSocketServer.cpp -DUSE_BOOST_BEAST \
    -I. -lboost_system -lssl -lcrypto -lpthread -o tee_service

# Then run:
./tee_service <path_to_verification_key_file>


npx ts-node --esm your-script.ts ./emls/rawEmail.eml 0x71C7656EC7ab88b098defB751B7401B5f6d897


